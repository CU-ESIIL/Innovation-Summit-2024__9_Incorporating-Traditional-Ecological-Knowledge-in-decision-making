{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Group 9 -- Incorporating Traditional Ecological Knowledge (TEK) in decision-making \u00b6 Summary: The team introductions included members of the existing ESIIL working groups. We have people with a significant number of superpowers in AI, data processing, computer systems, collaborative work, data collection, mapping, coding, engineering, wireless interconnection hardware and software, and climate data. There are observations about how to communicate climate challenges to traditional communities and how to explain ecological knowledge, as this traditional knowledge in most of the communities is passed through traditions instead of a system-based structure. The concept of cosmos and traditional knowledge is integral and interconnected, and the general idea is to guide people to a living purpose. Traditional knowledge includes practices, memorization, oral languages and traditional interactions and many other intangibles. Provocative question Main discussion: The main discussion was about protecting and preserving traditional and inherent language(s) and other holistic knowledge through data sovereignty. Title: Protecting and Preserving Traditional and Inherent Knowledge through Data Sovereignty. Question: How do we create a sovereign data environment? Mission Statement: We will create a sovereign data environment through remembering our ancestor's teachings and guiding the next Seven Generations through the development of a colloboration of an Intertribal Data Sovereignty Coalition. Vision Statement: Healing our Nations by embracing our ways of life. Next steps: connect to other groups/orgs/nations that deal with data sovereignty at all levels - Tribes, TCUs, organizations, and groups. What's missing: We would like to see a Data Sovereignty conference that brings together as many groups as possible for consensus building. For that to happen, we need meeting space, infrastructure, and funding.","title":"Home"},{"location":"#group-9-incorporating-traditional-ecological-knowledge-tek-in-decision-making","text":"Summary: The team introductions included members of the existing ESIIL working groups. We have people with a significant number of superpowers in AI, data processing, computer systems, collaborative work, data collection, mapping, coding, engineering, wireless interconnection hardware and software, and climate data. There are observations about how to communicate climate challenges to traditional communities and how to explain ecological knowledge, as this traditional knowledge in most of the communities is passed through traditions instead of a system-based structure. The concept of cosmos and traditional knowledge is integral and interconnected, and the general idea is to guide people to a living purpose. Traditional knowledge includes practices, memorization, oral languages and traditional interactions and many other intangibles. Provocative question Main discussion: The main discussion was about protecting and preserving traditional and inherent language(s) and other holistic knowledge through data sovereignty. Title: Protecting and Preserving Traditional and Inherent Knowledge through Data Sovereignty. Question: How do we create a sovereign data environment? Mission Statement: We will create a sovereign data environment through remembering our ancestor's teachings and guiding the next Seven Generations through the development of a colloboration of an Intertribal Data Sovereignty Coalition. Vision Statement: Healing our Nations by embracing our ways of life. Next steps: connect to other groups/orgs/nations that deal with data sovereignty at all levels - Tribes, TCUs, organizations, and groups. What's missing: We would like to see a Data Sovereignty conference that brings together as many groups as possible for consensus building. For that to happen, we need meeting space, infrastructure, and funding.","title":"Group 9 -- Incorporating Traditional Ecological Knowledge (TEK) in decision-making"},{"location":"agenda/","text":"ESIIL Innovation Summit - Agenda \u00b6 Big Data for Environmental Resilience and Adaptation Date: May 13-16, 2024 Location: SEEC Auditorium, University of Colorado Boulder Summit Website Goals of the 2024 ESIIL Innovation Summit \u00b6 Explore big data for environmental resilience and adaptation by identifying data synthesis opportunities and utilizing ESIIL cloud-compute capabilities. Promote best practices in ethical, open science, by supporting accessibility and usability of environmental data by all stakeholders. Champion ethical and equitable practices in environmental science, honoring data sovereignty and encouraging the responsible use of AI. Support diverse and inclusive teams by establishing collaborations around data-inspired themes across different disciplines, sectors, career stages, and backgrounds. Encourage the co-production of environmental knowledge with communities that are experiencing significant environmental challenges. Day Zero - May 13 th \u00b6 Time Event Location 9:00 AM - 12:00 PM MDT Leadership Program S372 (Viz Studio) 9:00 AM - 12:00 PM MDT Auditorium Set Up: Tables, Questions, Handouts, etc. SEEC Auditorium 12:00 - 1:00 PM MDT Facilitators Lunch 1:00 or 1:30 PM MDT Concurrent Optional Activities NEON Tour, HIKE 3:00 - 5:00 PM MDT Early Registration opens SEEC Atrium 3:00 - 4:00 PM MDT Technical Help Desk SEEC Auditorium 4:00 - 6:00 PM MDT Social Mixer SEEC Cafe Day One - May 14 th \u00b6 Time Event Location 8:30 AM MDT Registration SEEC Atrium 9:00 AM MDT Welcome & Opening Ceremony SEEC Auditorium 9:35 AM MDT Logistics and Planning Team Introductions SEEC Auditorium 9:45 AM MDT Positive Polarities SEEC Auditorium 10:00 AM MDT Navigating Miscommunications SEEC Auditorium 10:15 AM MDT Creating a shared language SEEC Auditorium 10:30 AM MDT Break SEEC Atrium 10:45 AM MDT Science of Team Science SEEC Auditorium 11:05 AM MDT Big Data for Resilience SEEC Auditorium 11:45 AM MDT Q&A SEEC Auditorium 12:15 PM MDT Group Photo SEEC Atrium 12:30 PM MDT Lunch SEEC Atrium 1:30 PM MDT Leveraging NEON to Understand Ecosystem Resilience Across Scales SEEC Auditorium 1:45 PM MDT Explore Topics in Resilience and Adaptation SEEC Auditorium 3:15 PM MDT Break SEEC Atrium 3:30 PM MDT Team Breakouts: Innovation Time Rooms available: S124, S127, S221, etc. 4:20 PM MDT Report Back SEEC Auditorium 4:50 PM MDT Whole Group Reflection SEEC Auditorium 4:55 PM MDT Day 1 Evaluation SEEC Auditorium 5:00 PM MDT Day 1 Close SEEC Auditorium Day Two - May 15 th \u00b6 Time Event Location 8:30 AM MDT Coffee & Tea SEEC Atrium 9:00 AM MDT Welcome Back SEEC Auditorium 9:20 AM MDT AI Research for Climate Change and Environmental Sustainability SEEC Auditorium 9:35 PM MDT Prepare for the day SEEC Auditorium 9:50 AM MDT Team Breakouts: Innovation Time Breakout Spaces with your Team 12:30 PM MDT Lunch SEEC Atrium 1:30 PM MDT Working Through the Groan Zone SEEC Auditorium 1:50 PM MDT Team Breakouts: Innovation Time Breakout Spaces with your Team 4:10 PM MDT Report Back SEEC Auditorium 4:50 PM MDT Whole Group Reflection SEEC Auditorium 5:00 PM MDT Day 2 Close Day Three - May 16 th \u00b6 Time Event Location 8:30 AM MDT Coffee & Tea SEEC Atrium 9:00 AM MDT Welcome Back SEEC Auditorium 9:15 AM MDT Final Team Breakout: Prepare for the Final Report Back Breakout Spaces with your Team 9:45 AM MDT Final Break SEEC Atrium 10:00 AM MDT Final Report back SEEC Auditorium 11:20 AM MDT What\u2019s Next? SEEC Auditorium 11:35 AM MDT Final Reflection SEEC Auditorium 11:50 PM MDT Closing SEEC Auditorium","title":"Agenda"},{"location":"agenda/#esiil-innovation-summit-agenda","text":"Big Data for Environmental Resilience and Adaptation Date: May 13-16, 2024 Location: SEEC Auditorium, University of Colorado Boulder Summit Website","title":"ESIIL Innovation Summit - Agenda"},{"location":"agenda/#goals-of-the-2024-esiil-innovation-summit","text":"Explore big data for environmental resilience and adaptation by identifying data synthesis opportunities and utilizing ESIIL cloud-compute capabilities. Promote best practices in ethical, open science, by supporting accessibility and usability of environmental data by all stakeholders. Champion ethical and equitable practices in environmental science, honoring data sovereignty and encouraging the responsible use of AI. Support diverse and inclusive teams by establishing collaborations around data-inspired themes across different disciplines, sectors, career stages, and backgrounds. Encourage the co-production of environmental knowledge with communities that are experiencing significant environmental challenges.","title":"Goals of the 2024 ESIIL Innovation Summit"},{"location":"agenda/#day-zero-may-13th","text":"Time Event Location 9:00 AM - 12:00 PM MDT Leadership Program S372 (Viz Studio) 9:00 AM - 12:00 PM MDT Auditorium Set Up: Tables, Questions, Handouts, etc. SEEC Auditorium 12:00 - 1:00 PM MDT Facilitators Lunch 1:00 or 1:30 PM MDT Concurrent Optional Activities NEON Tour, HIKE 3:00 - 5:00 PM MDT Early Registration opens SEEC Atrium 3:00 - 4:00 PM MDT Technical Help Desk SEEC Auditorium 4:00 - 6:00 PM MDT Social Mixer SEEC Cafe","title":"Day Zero - May 13th"},{"location":"agenda/#day-one-may-14th","text":"Time Event Location 8:30 AM MDT Registration SEEC Atrium 9:00 AM MDT Welcome & Opening Ceremony SEEC Auditorium 9:35 AM MDT Logistics and Planning Team Introductions SEEC Auditorium 9:45 AM MDT Positive Polarities SEEC Auditorium 10:00 AM MDT Navigating Miscommunications SEEC Auditorium 10:15 AM MDT Creating a shared language SEEC Auditorium 10:30 AM MDT Break SEEC Atrium 10:45 AM MDT Science of Team Science SEEC Auditorium 11:05 AM MDT Big Data for Resilience SEEC Auditorium 11:45 AM MDT Q&A SEEC Auditorium 12:15 PM MDT Group Photo SEEC Atrium 12:30 PM MDT Lunch SEEC Atrium 1:30 PM MDT Leveraging NEON to Understand Ecosystem Resilience Across Scales SEEC Auditorium 1:45 PM MDT Explore Topics in Resilience and Adaptation SEEC Auditorium 3:15 PM MDT Break SEEC Atrium 3:30 PM MDT Team Breakouts: Innovation Time Rooms available: S124, S127, S221, etc. 4:20 PM MDT Report Back SEEC Auditorium 4:50 PM MDT Whole Group Reflection SEEC Auditorium 4:55 PM MDT Day 1 Evaluation SEEC Auditorium 5:00 PM MDT Day 1 Close SEEC Auditorium","title":"Day One - May 14th"},{"location":"agenda/#day-two-may-15th","text":"Time Event Location 8:30 AM MDT Coffee & Tea SEEC Atrium 9:00 AM MDT Welcome Back SEEC Auditorium 9:20 AM MDT AI Research for Climate Change and Environmental Sustainability SEEC Auditorium 9:35 PM MDT Prepare for the day SEEC Auditorium 9:50 AM MDT Team Breakouts: Innovation Time Breakout Spaces with your Team 12:30 PM MDT Lunch SEEC Atrium 1:30 PM MDT Working Through the Groan Zone SEEC Auditorium 1:50 PM MDT Team Breakouts: Innovation Time Breakout Spaces with your Team 4:10 PM MDT Report Back SEEC Auditorium 4:50 PM MDT Whole Group Reflection SEEC Auditorium 5:00 PM MDT Day 2 Close","title":"Day Two - May 15th"},{"location":"agenda/#day-three-may-16th","text":"Time Event Location 8:30 AM MDT Coffee & Tea SEEC Atrium 9:00 AM MDT Welcome Back SEEC Auditorium 9:15 AM MDT Final Team Breakout: Prepare for the Final Report Back Breakout Spaces with your Team 9:45 AM MDT Final Break SEEC Atrium 10:00 AM MDT Final Report back SEEC Auditorium 11:20 AM MDT What\u2019s Next? SEEC Auditorium 11:35 AM MDT Final Reflection SEEC Auditorium 11:50 PM MDT Closing SEEC Auditorium","title":"Day Three - May 16th"},{"location":"breakout/","text":"Breakout prompts & dedicated working space \u00b6 Dedicated working space \u00b6 Each team will have a room that has been reserved for their use at all team times. Those rooms will shift for each breakout time, shown below. However, your team is also welcome to explore the building and find other spaces that make you more comfortable or creative. For example, you may want to check out: The SEEC Cafe dining area (north end of the building, lots of windows in the eating room!) The SEEC lobby (both north and south) The Earth Lab conference room (S340). Note that this room may sometimes be reserved by Earth Lab staff. The southern end of the first floor, S148 Outside if it is sunny! The grass or SEEC courtyard! You are also welcome to use other rooms if they are available, but please be aware that other classes, study groups, or workshops may have reserved them and kick you out. Day 1 Team Dedicated Space Morning team time Team 1 S221 Team 2 S149 Team 3 C325 Team 4 S240 Team 5 Viz Studio (S372A) Team 6 Viz Studio (S372B) Afternoon team time Team 1 Viz Studio (S372B) Team 2 S221 Team 3 S149 Team 4 C325 Team 5 S240 Team 6 Viz Studio (S372A) Day 2 Team Dedicated Space Morning team time Team 1 Viz Studio (S372A) Team 2 Viz Studio (S372B) Team 3 S221 Team 4 S149 Team 5 C325 Team 6 S240 Afternoon team time Team 1 S240 Team 2 Viz Studio (S372A) Team 3 Viz Studio (S372B) Team 4 S221 Team 5 S149 Team 6 C325 Day 3 Team Dedicated Space Morning team time Team 1 C325 Team 2 S240 Team 3 Viz Studio (S372A) Team 4 Viz Studio (S372B) Team 5 S221 Team 6 S149 Breakout Prompts \u00b6 For ease of access to breakout group prompts throughout the codefest. Breakout #0: Virtual meeting #3 \u00b6 Introduce yourselves! Please briefly share: Your preferred name and where you are currently based A skill or area of expertise that you feel you are bringing to the table Something you are worried about regarding the codefest Something that brings you joy What is a topic that you are excited to investigate for two days related to forest carbon in the Southern Rocky mountains? What datasets are you excited to potentially use? (Tuesday morning you will have ~2.5 hours to continue brainstorming, with a draft question ready by noon! So don't stress, this is just a first opportunity to get a sense of what your team is generally excited about.) Breakout #1 : Day 1 morning team time \u00b6 In-person introductions Who are you and why are you excited to be here? Establish team norms Note-taking and documenting the flow of ideas Expectations for work outside of official event hours Brainstorm What will your team project be for the next 2.5 days?! This should be a specific scientific question related to forest carbon in the Southern Rocky Mountains that you think is potentially answerable (at least in a very rough form) by the end of the event. Think about\u2026 What are you each excited about and what skills do you have around the table that can be leveraged? What datasets are you familiar with and/or excited to work with? Spin up some instances and get familiar with the data! Evaluation criteria (linked on the website!) Bring back One spokesperson to talk for 1 minute Your specific, answerable scientific question One \u2018need\u2019 that you see, whether that is help accessing an additional dataset, guidance on a dataset already available, or just your first step to get cracking Breakout #2 : Day 1 afternoon team time \u00b6 Establish: How are you going to divide work, responsibilities, and code workflows? How are you going to manage people working in different coding languages? Take time to explore the datasets you intend to use and make sure you know how to work with and visualize them. Map out an initial workflow. What are the steps you will need to take to get from start to 'finish'? Begin work! Breakout #3 : Day 2 morning team time \u00b6 Code, code, code! Focus on concrete, tractable problems, and don't get sucked into unneccessary coding or debugging. Is there an easier or faster way to answer your question? Graphics and deliverables are your friend! Demonstrate the progress you're making and remember to document what you are doing and WHY you're making the decisions you are. Keep your repo up to date! Breakout #4 : Day 2 afternoon team time \u00b6 Prepare your deliverables. What figures are necessary to tell the story of your project? What do you want in your presentation and on your team website? Breakout #5 : Day 3 morning team time \u00b6 Finalize all deliverables, push them to your website & GitHub, and finalize your presentation!","title":"Breakout prompts & dedicated working space"},{"location":"breakout/#breakout-prompts-dedicated-working-space","text":"","title":"Breakout prompts &amp; dedicated working space"},{"location":"breakout/#dedicated-working-space","text":"Each team will have a room that has been reserved for their use at all team times. Those rooms will shift for each breakout time, shown below. However, your team is also welcome to explore the building and find other spaces that make you more comfortable or creative. For example, you may want to check out: The SEEC Cafe dining area (north end of the building, lots of windows in the eating room!) The SEEC lobby (both north and south) The Earth Lab conference room (S340). Note that this room may sometimes be reserved by Earth Lab staff. The southern end of the first floor, S148 Outside if it is sunny! The grass or SEEC courtyard! You are also welcome to use other rooms if they are available, but please be aware that other classes, study groups, or workshops may have reserved them and kick you out. Day 1 Team Dedicated Space Morning team time Team 1 S221 Team 2 S149 Team 3 C325 Team 4 S240 Team 5 Viz Studio (S372A) Team 6 Viz Studio (S372B) Afternoon team time Team 1 Viz Studio (S372B) Team 2 S221 Team 3 S149 Team 4 C325 Team 5 S240 Team 6 Viz Studio (S372A) Day 2 Team Dedicated Space Morning team time Team 1 Viz Studio (S372A) Team 2 Viz Studio (S372B) Team 3 S221 Team 4 S149 Team 5 C325 Team 6 S240 Afternoon team time Team 1 S240 Team 2 Viz Studio (S372A) Team 3 Viz Studio (S372B) Team 4 S221 Team 5 S149 Team 6 C325 Day 3 Team Dedicated Space Morning team time Team 1 C325 Team 2 S240 Team 3 Viz Studio (S372A) Team 4 Viz Studio (S372B) Team 5 S221 Team 6 S149","title":"Dedicated working space"},{"location":"breakout/#breakout-prompts","text":"For ease of access to breakout group prompts throughout the codefest.","title":"Breakout Prompts"},{"location":"breakout/#breakout-0-virtual-meeting-3","text":"Introduce yourselves! Please briefly share: Your preferred name and where you are currently based A skill or area of expertise that you feel you are bringing to the table Something you are worried about regarding the codefest Something that brings you joy What is a topic that you are excited to investigate for two days related to forest carbon in the Southern Rocky mountains? What datasets are you excited to potentially use? (Tuesday morning you will have ~2.5 hours to continue brainstorming, with a draft question ready by noon! So don't stress, this is just a first opportunity to get a sense of what your team is generally excited about.)","title":"Breakout #0: Virtual meeting #3"},{"location":"breakout/#breakout-1-day-1-morning-team-time","text":"In-person introductions Who are you and why are you excited to be here? Establish team norms Note-taking and documenting the flow of ideas Expectations for work outside of official event hours Brainstorm What will your team project be for the next 2.5 days?! This should be a specific scientific question related to forest carbon in the Southern Rocky Mountains that you think is potentially answerable (at least in a very rough form) by the end of the event. Think about\u2026 What are you each excited about and what skills do you have around the table that can be leveraged? What datasets are you familiar with and/or excited to work with? Spin up some instances and get familiar with the data! Evaluation criteria (linked on the website!) Bring back One spokesperson to talk for 1 minute Your specific, answerable scientific question One \u2018need\u2019 that you see, whether that is help accessing an additional dataset, guidance on a dataset already available, or just your first step to get cracking","title":"Breakout #1: Day 1 morning team time"},{"location":"breakout/#breakout-2-day-1-afternoon-team-time","text":"Establish: How are you going to divide work, responsibilities, and code workflows? How are you going to manage people working in different coding languages? Take time to explore the datasets you intend to use and make sure you know how to work with and visualize them. Map out an initial workflow. What are the steps you will need to take to get from start to 'finish'? Begin work!","title":"Breakout #2: Day 1 afternoon team time"},{"location":"breakout/#breakout-3-day-2-morning-team-time","text":"Code, code, code! Focus on concrete, tractable problems, and don't get sucked into unneccessary coding or debugging. Is there an easier or faster way to answer your question? Graphics and deliverables are your friend! Demonstrate the progress you're making and remember to document what you are doing and WHY you're making the decisions you are. Keep your repo up to date!","title":"Breakout #3: Day 2 morning team time"},{"location":"breakout/#breakout-4-day-2-afternoon-team-time","text":"Prepare your deliverables. What figures are necessary to tell the story of your project? What do you want in your presentation and on your team website?","title":"Breakout #4: Day 2 afternoon team time"},{"location":"breakout/#breakout-5-day-3-morning-team-time","text":"Finalize all deliverables, push them to your website & GitHub, and finalize your presentation!","title":"Breakout #5: Day 3 morning team time"},{"location":"teams/","text":"Event Logistics \u00b6 Venue Information \u00b6 The ESIIL Innovation Summit will be held at the University of Colorado Boulder East Campus SEEC Building (4001 Discovery Dr, Boulder, CO 80303). Directions to the SEEC Building here. (Building Maps to follow)","title":"Event Logistics"},{"location":"teams/#event-logistics","text":"","title":"Event Logistics"},{"location":"teams/#venue-information","text":"The ESIIL Innovation Summit will be held at the University of Colorado Boulder East Campus SEEC Building (4001 Discovery Dr, Boulder, CO 80303). Directions to the SEEC Building here. (Building Maps to follow)","title":"Venue Information"},{"location":"virtual-meetings/","text":"Pre-Summit Virtual Meetings \u00b6 There are three virtual meetings associated with the 2024 ESIIL Summit. Virtual Meeting 1 \u00b6 Head in the Clouds: Navigating the Basics of Cloud Computing Date: April 24, 2024 Time: 12:00-2:00 PM MST Virtual Meeting 1 Recording : https://www.youtube.com/watch?v=JxVPjDtIBmU Important Note: Please set up a GitHub account and a Cyverse account prior to this training. Virtual Meeting 2 \u00b6 Feet on the ground: Collaborating with Other People Using Cloud Computing Date: May 1, 2024 Time: 12:00-2:00 PM MST Virtual Meeting 2 Recording : https://www.youtube.com/watch?v=213C7faZVFQ Virtual Meeting 3 \u00b6 Voices in Concert: Cultural Intelligence, the Art of Team Science, and Community Skills Date: May 6, 2024 Time: 9-11 AM MST Virtual Meeting 3 Recording : https://youtu.be/Ea21i3do9sA Science of Team Science Slides Community Skills Slides","title":"Overview"},{"location":"virtual-meetings/#pre-summit-virtual-meetings","text":"There are three virtual meetings associated with the 2024 ESIIL Summit.","title":"Pre-Summit Virtual Meetings"},{"location":"virtual-meetings/#virtual-meeting-1","text":"Head in the Clouds: Navigating the Basics of Cloud Computing Date: April 24, 2024 Time: 12:00-2:00 PM MST Virtual Meeting 1 Recording : https://www.youtube.com/watch?v=JxVPjDtIBmU Important Note: Please set up a GitHub account and a Cyverse account prior to this training.","title":"Virtual Meeting 1"},{"location":"virtual-meetings/#virtual-meeting-2","text":"Feet on the ground: Collaborating with Other People Using Cloud Computing Date: May 1, 2024 Time: 12:00-2:00 PM MST Virtual Meeting 2 Recording : https://www.youtube.com/watch?v=213C7faZVFQ","title":"Virtual Meeting 2"},{"location":"virtual-meetings/#virtual-meeting-3","text":"Voices in Concert: Cultural Intelligence, the Art of Team Science, and Community Skills Date: May 6, 2024 Time: 9-11 AM MST Virtual Meeting 3 Recording : https://youtu.be/Ea21i3do9sA Science of Team Science Slides Community Skills Slides","title":"Virtual Meeting 3"},{"location":"worksheet_redlining/","text":"Redlining \u00b6 Exploring the Impact of Historical Redlining on Urban Greenspace: A Collaborative Examination of Maps, Justice, and Resilience \u00b6 Introduction \u00b6 This group exploration delves into the long-term impacts of historical redlining on urban greenspace, emphasizing the powerful role of maps in shaping environmental and social landscapes. By drawing on the research by Nardone et al. (2021), you will collaboratively investigate how discriminatory practices encoded in maps have led to persistent disparities in urban settings. This exploration aims to uncover the resilience of communities in adapting to these entrenched injustices and to foster a deeper understanding of how mapping can serve both as a tool of exclusion and as a means for promoting social equity. ) Understanding Redlining as a Systemic Disturbance \u00b6 Redlining originated in the 1930s as a discriminatory practice where the Home Owners\u2019 Loan Corporation (HOLC) systematically denied mortgages or offered unfavorable terms based on racial and ethnic compositions. This methodical exclusion, executed through maps that color-coded \u201crisky\u201d investment areas in red, marked minority-populated areas, denying them crucial investment and development opportunities and initiating a profound and lasting disturbance in the urban fabric. Maps serve as powerful tools beyond navigation; they communicate and enforce control. By defining neighborhood boundaries through redlining, HOLC maps not only mirrored societal biases but also perpetuated and embedded them into the urban landscape. This manipulation of geographic data set a trajectory that limited economic growth, dictated the allocation of services, and influenced the development or deterioration of community infrastructure. Figure 1: 1938 Map of Atlanta uses colors as grades for neighborhoods. The red swaths identify each area with large African-American populations that were deemed \u201cless safe.\u201d [![](../assets/redlining/georectified-thumbnail.png)](https://storymaps.arcgis.com/stories/0f58d49c566b486482b3e64e9e5f7ac9) ArcGIS Story Map Explore the Story Map: Click on the image above to explore the interactive story map about [subject of the story map]. Resilience and Adaptation in Urban Environments \u00b6 The legacy of redlining presents both a challenge and an opportunity for resilience and adaptation. Economically and socially, redlining entrenched cycles of poverty and racial segregation, creating a resilient wealth gap that has been difficult to dismantle. Environmentally, the neighborhoods targeted by redlining continue to face significant challenges\u2014they generally feature less greenspace, suffer from higher pollution levels, and are more vulnerable to the impacts of climate change. These factors compound the health and wellness challenges faced by residents. Despite these adversities, urban communities have continually demonstrated remarkable resilience. Adaptation strategies, such as community-led green initiatives, urban agriculture, and grassroots activism, have emerged as responses to these systemic disturbances. By enhancing green infrastructure and advocating for equitable environmental policies, these communities strive to increase their resilience against both historical inequities and environmental challenges. [![](https://img.youtube.com/vi/O5FBJyqfoLM/hqdefault.jpg)](https://youtu.be/O5FBJyqfoLM) Watch the video Video Title: Exploring the Impacts of Historical Redlining on Urban Development Description: Click on the image above to watch a video that delves into the consequences of historical redlining and its ongoing impact on urban environments. This educational piece offers insights into how such discriminatory practices have shaped cities and what can be learned from them. The following group exercise will not only uncover the impact of redlining on urban greenspace but also highlight the adaptive strategies developed in response to this enduring disturbance. Through mapping and analysis, we aim to illustrate the powerful role that geographic data can play in understanding and fostering urban resilience and social equity. References \u00b6 Nardone, A., Rudolph, K. E., Morello-Frosch, R., & Casey, J. A. (2021). Redlines and Greenspace: The Relationship between Historical Redlining and 2010 Greenspace across the United States. Environmental Health Perspectives , 129(1), 017006. DOI:10.1289/EHP7495. Hoffman, J. S., Shandas, V., & Pendleton, N. (2020). The Effects of Historical Housing Policies on Resident Exposure to Intra-Urban Heat: A Study of 108 US Urban Areas. Climate , 8(1), 12. DOI:10.3390/cli8010012. Goals of this group activity \u00b6 The primary objectives of this tutorial are: 1. To practice coding in CyVerse. 2. To analyze the relationship between HOLC grades and the presence of urban greenspace. 3. To understand how historic policies continue to affect the spatial distribution of environmental amenities. Part 1: Accessing and Visualizing Historic Redlining Data \u00b6 We will begin by accessing HOLC maps from the Mapping Inequality project and overlaying this data with modern geographic datasets to visualize the historical impact on contemporary urban landscapes. Data Acquisition \u00b6 Download HOLC map shapefiles from the University of Richmond\u2019s Mapping Inequality Project. Utilize satellite imagery and other geospatial data to map current greenspace using the normalized difference vegetation index (NDVI). Analysis Methodology \u00b6 Replicate the approach used by Nardone et al. to calculate NDVI values for each HOLC neighborhood, assessing greenspace as a health-promoting resource. Employ statistical methods such as propensity score matching to control for confounding variables and estimate the true impact of HOLC grades on urban greenspace. img { width: 100%; } details summary { color: black; background-color: white; } details[open] summary { color: black; } R libraries we use in this analysis if ( ! requireNamespace ( \"tidytext\" , quietly = TRUE )) { install.packages ( \"tidytext\" ) } library ( tidytext ) ## Warning: package 'tidytext' was built under R version 4.3.2 library ( sf ) ## Warning: package 'sf' was built under R version 4.3.2 ## Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE library ( ggplot2 ) ## Warning: package 'ggplot2' was built under R version 4.3.2 library ( ggthemes ) ## Warning: package 'ggthemes' was built under R version 4.3.2 library ( dplyr ) ## ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ## ## filter, lag ## The following objects are masked from 'package:base': ## ## intersect, setdiff, setequal, union library ( rstac ) ## Warning: package 'rstac' was built under R version 4.3.2 library ( gdalcubes ) ## Warning: package 'gdalcubes' was built under R version 4.3.2 library ( gdalUtils ) ## Please note that rgdal will be retired during October 2023, ## plan transition to sf/stars/terra functions using GDAL and PROJ ## at your earliest convenience. ## See https://r-spatial.org/r/2023/05/15/evolution4.html and https://github.com/r-spatial/evolution ## rgdal: version: 1.6-7, (SVN revision 1203) ## Geospatial Data Abstraction Library extensions to R successfully loaded ## Loaded GDAL runtime: GDAL 3.5.3, released 2022/10/21 ## Path to GDAL shared files: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/rgdal/gdal ## GDAL does not use iconv for recoding strings. ## GDAL binary built with GEOS: TRUE ## Loaded PROJ runtime: Rel. 9.1.0, September 1st, 2022, [PJ_VERSION: 910] ## Path to PROJ shared files: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/gdalcubes/proj ## PROJ CDN enabled: FALSE ## Linking to sp version:1.6-1 ## To mute warnings of possible GDAL/OSR exportToProj4() degradation, ## use options(\"rgdal_show_exportToProj4_warnings\"=\"none\") before loading sp or rgdal. ## ## Attaching package: 'gdalUtils' ## The following object is masked from 'package:sf': ## ## gdal_rasterize library ( gdalcubes ) library ( colorspace ) library ( terra ) ## Warning: package 'terra' was built under R version 4.3.2 ## terra 1.7.71 ## ## Attaching package: 'terra' ## The following object is masked from 'package:colorspace': ## ## RGB ## The following objects are masked from 'package:gdalcubes': ## ## animate, crop, size library ( tidyterra ) ## ## Attaching package: 'tidyterra' ## The following object is masked from 'package:stats': ## ## filter library ( basemapR ) library ( tidytext ) library ( ggwordcloud ) library ( osmextract ) ## Data (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright. ## Check the package website, https://docs.ropensci.org/osmextract/, for more details. library ( sf ) library ( ggplot2 ) library ( ggthemes ) library ( glue ) ## ## Attaching package: 'glue' ## The following object is masked from 'package:terra': ## ## trim library ( purrr ) FUNCTION: List cities where HOLC data are available # Function to get a list of unique cities and states from the redlining data get_city_state_list_from_redlining_data <- function () { # URL to the GeoJSON data url <- \"https://raw.githubusercontent.com/americanpanorama/mapping-inequality-census-crosswalk/main/MIv3Areas_2010TractCrosswalk.geojson\" # Read the GeoJSON file into an sf object redlining_data <- tryCatch ({ read_sf ( url ) }, error = function ( e ) { stop ( \"Error reading GeoJSON data: \" , e $ message ) }) # Check for the existence of 'city' and 'state' columns if ( ! all ( c ( \"city\" , \"state\" ) %in% names ( redlining_data ))) { stop ( \"The required columns 'city' and/or 'state' do not exist in the data.\" ) } # Extract a unique list of city and state pairs without the geometries city_state_df <- redlining_data %>% select ( city , state ) %>% st_set_geometry ( NULL ) %>% # Drop the geometry to avoid issues with invalid shapes distinct ( city , state ) %>% arrange ( state , city ) # Arrange the list alphabetically by state, then by city # Return the dataframe of unique city-state pairs return ( city_state_df ) } Stream list of available HOLC cities #Retrieve the list of cities and states city_state_list <- get_city_state_list_from_redlining_data () knitr :: kable ( city_state_list , format = \"markdown\" ) | city | state | |:---------------------------------|:------| | Birmingham | AL | | Mobile | AL | | Montgomery | AL | | Arkadelphia | AR | | Batesville | AR | | Camden | AR | | Conway | AR | | El Dorado | AR | | Fort Smith | AR | | Little Rock | AR | | Russellville | AR | | Texarkana | AR | | Phoenix | AZ | | Fresno | CA | | Los Angeles | CA | | Oakland | CA | | Sacramento | CA | | San Diego | CA | | San Francisco | CA | | San Jose | CA | | Stockton | CA | | Boulder | CO | | Colorado Springs | CO | | Denver | CO | | Fort Collins | CO | | Fort Morgan | CO | | Grand Junction | CO | | Greeley | CO | | Longmont | CO | | Pueblo | CO | | Bridgeport and Fairfield | CT | | Hartford | CT | | New Britain | CT | | New Haven | CT | | Stamford, Darien, and New Canaan | CT | | Waterbury | CT | | Crestview | FL | | Daytona Beach | FL | | DeFuniak Springs | FL | | DeLand | FL | | Jacksonville | FL | | Miami | FL | | New Smyrna | FL | | Orlando | FL | | Pensacola | FL | | St. Petersburg | FL | | Tampa | FL | | Atlanta | GA | | Augusta | GA | | Columbus | GA | | Macon | GA | | Savannah | GA | | Boone | IA | | Cedar Rapids | IA | | Council Bluffs | IA | | Davenport | IA | | Des Moines | IA | | Dubuque | IA | | Sioux City | IA | | Waterloo | IA | | Aurora | IL | | Chicago | IL | | Decatur | IL | | East St. Louis | IL | | Joliet | IL | | Peoria | IL | | Rockford | IL | | Springfield | IL | | Evansville | IN | | Fort Wayne | IN | | Indianapolis | IN | | Lake Co. Gary | IN | | Muncie | IN | | South Bend | IN | | Terre Haute | IN | | Atchison | KS | | Junction City | KS | | Topeka | KS | | Wichita | KS | | Covington | KY | | Lexington | KY | | Louisville | KY | | New Orleans | LA | | Shreveport | LA | | Arlington | MA | | Belmont | MA | | Boston | MA | | Braintree | MA | | Brockton | MA | | Brookline | MA | | Cambridge | MA | | Chelsea | MA | | Dedham | MA | | Everett | MA | | Fall River | MA | | Fitchburg | MA | | Haverhill | MA | | Holyoke Chicopee | MA | | Lawrence | MA | | Lexington | MA | | Lowell | MA | | Lynn | MA | | Malden | MA | | Medford | MA | | Melrose | MA | | Milton | MA | | Needham | MA | | New Bedford | MA | | Newton | MA | | Pittsfield | MA | | Quincy | MA | | Revere | MA | | Salem | MA | | Saugus | MA | | Somerville | MA | | Springfield | MA | | Waltham | MA | | Watertown | MA | | Winchester | MA | | Winthrop | MA | | Worcester | MA | | Baltimore | MD | | Augusta | ME | | Boothbay | ME | | Portland | ME | | Sanford | ME | | Waterville | ME | | Battle Creek | MI | | Bay City | MI | | Detroit | MI | | Flint | MI | | Grand Rapids | MI | | Jackson | MI | | Kalamazoo | MI | | Lansing | MI | | Muskegon | MI | | Pontiac | MI | | Saginaw | MI | | Austin | MN | | Duluth | MN | | Mankato | MN | | Minneapolis | MN | | Rochester | MN | | St. Cloud | MN | | St. Paul | MN | | Staples | MN | | Cape Girardeau | MO | | Carthage | MO | | Greater Kansas City | MO | | Joplin | MO | | Springfield | MO | | St. Joseph | MO | | St. Louis | MO | | Jackson | MS | | Asheville | NC | | Charlotte | NC | | Durham | NC | | Elizabeth City | NC | | Fayetteville | NC | | Goldsboro | NC | | Greensboro | NC | | Hendersonville | NC | | High Point | NC | | New Bern | NC | | Rocky Mount | NC | | Statesville | NC | | Winston-Salem | NC | | Fargo | ND | | Grand Forks | ND | | Minot | ND | | Williston | ND | | Lincoln | NE | | Omaha | NE | | Manchester | NH | | Atlantic City | NJ | | Bergen Co. | NJ | | Camden | NJ | | Essex Co. | NJ | | Hudson Co. | NJ | | Monmouth | NJ | | Passaic County | NJ | | Perth Amboy | NJ | | Trenton | NJ | | Union Co. | NJ | | Albany | NY | | Binghamton-Johnson City | NY | | Bronx | NY | | Brooklyn | NY | | Buffalo | NY | | Elmira | NY | | Jamestown | NY | | Lower Westchester Co. | NY | | Manhattan | NY | | Niagara Falls | NY | | Poughkeepsie | NY | | Queens | NY | | Rochester | NY | | Schenectady | NY | | Staten Island | NY | | Syracuse | NY | | Troy | NY | | Utica | NY | | Akron | OH | | Canton | OH | | Cleveland | OH | | Columbus | OH | | Dayton | OH | | Hamilton | OH | | Lima | OH | | Lorain | OH | | Portsmouth | OH | | Springfield | OH | | Toledo | OH | | Warren | OH | | Youngstown | OH | | Ada | OK | | Alva | OK | | Enid | OK | | Miami Ottawa County | OK | | Muskogee | OK | | Norman | OK | | Oklahoma City | OK | | South McAlester | OK | | Tulsa | OK | | Portland | OR | | Allentown | PA | | Altoona | PA | | Bethlehem | PA | | Chester | PA | | Erie | PA | | Harrisburg | PA | | Johnstown | PA | | Lancaster | PA | | McKeesport | PA | | New Castle | PA | | Philadelphia | PA | | Pittsburgh | PA | | Wilkes-Barre | PA | | York | PA | | Pawtucket & Central Falls | RI | | Providence | RI | | Woonsocket | RI | | Aiken | SC | | Charleston | SC | | Columbia | SC | | Greater Anderson | SC | | Greater Greenville | SC | | Orangeburg | SC | | Rock Hill | SC | | Spartanburg | SC | | Sumter | SC | | Aberdeen | SD | | Huron | SD | | Milbank | SD | | Mitchell | SD | | Rapid City | SD | | Sioux Falls | SD | | Vermillion | SD | | Watertown | SD | | Chattanooga | TN | | Elizabethton | TN | | Erwin | TN | | Greenville | TN | | Johnson City | TN | | Knoxville | TN | | Memphis | TN | | Nashville | TN | | Amarillo | TX | | Austin | TX | | Beaumont | TX | | Dallas | TX | | El Paso | TX | | Fort Worth | TX | | Galveston | TX | | Houston | TX | | Port Arthur | TX | | San Antonio | TX | | Waco | TX | | Wichita Falls | TX | | Ogden | UT | | Salt Lake City | UT | | Bristol | VA | | Danville | VA | | Harrisonburg | VA | | Lynchburg | VA | | Newport News | VA | | Norfolk | VA | | Petersburg | VA | | Phoebus | VA | | Richmond | VA | | Roanoke | VA | | Staunton | VA | | Bennington | VT | | Brattleboro | VT | | Burlington | VT | | Montpelier | VT | | Newport City | VT | | Poultney | VT | | Rutland | VT | | Springfield | VT | | St. Albans | VT | | St. Johnsbury | VT | | Windsor | VT | | Seattle | WA | | Spokane | WA | | Tacoma | WA | | Kenosha | WI | | Madison | WI | | Milwaukee Co. | WI | | Oshkosh | WI | | Racine | WI | | Charleston | WV | | Huntington | WV | | Wheeling | WV | FUNCTION: Stream HOLC data from a city # Function to load and filter redlining data by city load_city_redlining_data <- function ( city_name ) { # URL to the GeoJSON data url <- \"https://raw.githubusercontent.com/americanpanorama/mapping-inequality-census-crosswalk/main/MIv3Areas_2010TractCrosswalk.geojson\" # Read the GeoJSON file into an sf object redlining_data <- read_sf ( url ) # Filter the data for the specified city and non-empty grades city_redline <- redlining_data %>% filter ( city == city_name ) # Return the filtered data return ( city_redline ) } Stream HOLC data for Denver, CO # Load redlining data for Denver denver_redlining <- load_city_redlining_data ( \"Denver\" ) knitr :: kable ( head ( denver_redlining ), format = \"markdown\" ) | area_id | city | state | city_survey | cat | grade | label | res | com | ind | fill | GEOID10 | GISJOIN | calc_area | pct_tract | geometry | |--------:|:-------|:------|:------------|:-----|:------|:------|:-----|:------|:------|:---------|:------------|:---------------|-------------:|----------:|:-----------------------------| | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004104 | G0800310004104 | 1.525535e+01 | 0.00001 | MULTIPOLYGON (((-104.9125 3\u2026 | | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004201 | G0800310004201 | 3.987458e+05 | 0.20900 | MULTIPOLYGON (((-104.9246 3\u2026 | | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004304 | G0800310004304 | 1.554195e+05 | 0.05927 | MULTIPOLYGON (((-104.9125 3\u2026 | | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004202 | G0800310004202 | 1.117770e+06 | 0.57245 | MULTIPOLYGON (((-104.9125 3\u2026 | | 6529 | Denver | CO | TRUE | Best | A | A2 | TRUE | FALSE | FALSE | \\#76a865 | 08031004302 | G0800310004302 | 3.133415e+05 | 0.28381 | MULTIPOLYGON (((-104.928 39\u2026 | | 6529 | Denver | CO | TRUE | Best | A | A2 | TRUE | FALSE | FALSE | \\#76a865 | 08031004301 | G0800310004301 | 1.221218e+05 | 0.08622 | MULTIPOLYGON (((-104.9305 3\u2026 | FUNCTION: Get Points-of-Interest from city of interest get_places <- function ( polygon_layer , type = \"food\" ) { # Check if the input is an sf object if ( ! inherits ( polygon_layer , \"sf\" )) { stop ( \"The provided object is not an sf object.\" ) } # Create a bounding box from the input sf object bbox_here <- st_bbox ( polygon_layer ) |> st_as_sfc () if ( type == \"food\" ){ my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( shop IN ('supermarket', 'bodega', 'market', 'other_market', 'farm', 'garden_centre', 'doityourself', 'farm_supply', 'compost', 'mulch', 'fertilizer') OR amenity IN ('social_facility', 'market', 'restaurant', 'coffee') OR leisure = 'garden' OR landuse IN ('farm', 'farmland', 'row_crops', 'orchard_plantation', 'dairy_grazing') OR building IN ('brewery', 'winery', 'distillery') OR shop = 'greengrocer' OR amenity = 'marketplace' )\" title <- \"food\" } if ( type == \"processed_food\" ) { my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( amenity IN ('fast_food', 'cafe', 'pub') OR shop IN ('convenience', 'supermarket') OR shop = 'kiosk' )\" title <- \"Processed Food Locations\" } if ( type == \"natural_habitats\" ){ my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( boundary = 'protected_area' OR natural IN ('tree', 'wood') OR landuse = 'forest' OR leisure = 'park' )\" title <- \"Natural habitats or City owned trees\" } if ( type == \"roads\" ){ my_layer <- \"lines\" my_query <- \"SELECT * FROM lines WHERE ( highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary') )\" title <- \"Major roads\" } if ( type == \"rivers\" ){ my_layer <- \"lines\" my_query <- \"SELECT * FROM lines WHERE ( waterway IN ('river'))\" title <- \"Major rivers\" } if ( type == \"internet_access\" ) { my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( amenity IN ('library', 'cafe', 'community_centre', 'public_building') AND internet_access = 'yes' )\" title <- \"Internet Access Locations\" } if ( type == \"water_bodies\" ) { my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( natural IN ('water', 'lake', 'pond') OR water IN ('lake', 'pond') OR landuse = 'reservoir' )\" title <- \"Water Bodies\" } if ( type == \"government_buildings\" ) { my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( amenity IN ('townhall', 'courthouse', 'embassy', 'police', 'fire_station') OR building IN ('capitol', 'government') )\" title <- \"Government Buildings\" } # Use the bbox to get data with oe_get(), specifying the desired layer and a custom SQL query for fresh food places tryCatch ({ places <- oe_get ( place = bbox_here , layer = my_layer , # Adjusted layer; change as per actual data availability query = my_query , quiet = TRUE ) places <- st_make_valid ( places ) # Crop the data to the bounding box cropped_places <- st_crop ( places , bbox_here ) # Plotting the cropped fresh food places plot <- ggplot ( data = cropped_places ) + geom_sf ( fill = \"cornflowerblue\" , color = \"cornflowerblue\" ) + ggtitle ( title ) + theme_tufte () + theme ( legend.position = \"none\" , # Optionally hide the legend axis.text = element_blank (), # Remove axis text axis.title = element_blank (), # Remove axis titles axis.ticks = element_blank (), # Remove axis ticks plot.background = element_rect ( fill = \"white\" , color = NA ), # Set the plot background to white panel.background = element_rect ( fill = \"white\" , color = NA ), # Set the panel background to white panel.grid.major = element_blank (), # Remove major grid lines panel.grid.minor = element_blank (), ) # Save the plot as a PNG file png_filename <- paste0 ( title , \"_\" , Sys.Date (), \".png\" ) ggsave ( png_filename , plot , width = 10 , height = 8 , units = \"in\" ) # Return the cropped dataset return ( cropped_places ) }, error = function ( e ) { stop ( \"Failed to retrieve or plot data: \" , e $ message ) }) } FUNCTION: Plot POI over HOLC grades plot_city_redlining <- function ( redlining_data , filename = \"redlining_plot.png\" ) { # Fetch additional geographic data based on redlining data roads <- get_places ( redlining_data , type = \"roads\" ) rivers <- get_places ( redlining_data , type = \"rivers\" ) # Filter residential zones with valid grades and where city survey is TRUE residential_zones <- redlining_data %>% filter ( city_survey == TRUE & grade != \"\" ) # Colors for the grades colors <- c ( \"#76a865\" , \"#7cb5bd\" , \"#ffff00\" , \"#d9838d\" ) # Plot the data using ggplot2 plot <- ggplot () + geom_sf ( data = roads , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.5 , lwd = 1.1 ) + geom_sf ( data = residential_zones , aes ( fill = grade ), alpha = 0.5 ) + theme_tufte () + scale_fill_manual ( values = colors ) + labs ( fill = 'HOLC Categories' ) + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), panel.grid.major = element_blank (), panel.grid.minor = element_blank (), legend.position = \"right\" ) # Save the plot as a high-resolution PNG file ggsave ( filename , plot , width = 10 , height = 8 , units = \"in\" , dpi = 600 ) # Return the plot object if needed for further manipulation or checking return ( plot ) } Plot Denver Redlining denver_plot <- plot_city_redlining ( denver_redlining ) Stream amenities by category food <- get_places ( denver_redlining , type = \"food\" ) food_processed <- get_places ( denver_redlining , type = \"processed_food\" ) natural_habitats <- get_places ( denver_redlining , type = \"natural_habitats\" ) roads <- get_places ( denver_redlining , type = \"roads\" ) rivers <- get_places ( denver_redlining , type = \"rivers\" ) #water_bodies <- get_places(denver_redlining, type=\"water_bodies\") government_buildings <- get_places ( denver_redlining , type = \"government_buildings\" ) FUNCTION: Plot the HOLC grades individually split_plot <- function ( sf_data , roads , rivers ) { # Filter for grades A, B, C, and D sf_data_filtered <- sf_data %>% filter ( grade %in% c ( 'A' , 'B' , 'C' , 'D' )) # Define a color for each grade grade_colors <- c ( \"A\" = \"#76a865\" , \"B\" = \"#7cb5bd\" , \"C\" = \"#ffff00\" , \"D\" = \"#d9838d\" ) # Create the plot with panels for each grade plot <- ggplot ( data = sf_data_filtered ) + geom_sf ( data = roads , alpha = 0.1 , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.1 , lwd = 1.1 ) + geom_sf ( aes ( fill = grade )) + facet_wrap ( ~ grade , nrow = 1 ) + # Free scales for different zoom levels if needed scale_fill_manual ( values = grade_colors ) + theme_minimal () + labs ( fill = 'HOLC Grade' ) + theme_tufte () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"none\" , # Optionally hide the legend axis.text = element_blank (), # Remove axis text axis.title = element_blank (), # Remove axis titles axis.ticks = element_blank (), # Remove axis ticks panel.grid.major = element_blank (), # Remove major grid lines panel.grid.minor = element_blank ()) ggsave ( plot , filename = \"HOLC_grades_individually.png\" , width = 10 , height = 4 , units = \"in\" , dpi = 1200 ) return ( plot ) } Plot 4 HOLC grades individually plot_row <- split_plot ( denver_redlining , roads , rivers ) FUNCTION: Map an amenity over each grade individually process_and_plot_sf_layers <- function ( layer1 , layer2 , output_file = \"output_plot.png\" ) { # Make geometries valid layer1 <- st_make_valid ( layer1 ) layer2 <- st_make_valid ( layer2 ) # Optionally, simplify geometries to remove duplicate vertices layer1 <- st_simplify ( layer1 , preserveTopology = TRUE ) |> filter ( grade != \"\" ) # Prepare a list to store results results <- list () # Loop through each grade and perform operations for ( grade in c ( \"A\" , \"B\" , \"C\" , \"D\" )) { # Filter layer1 for current grade layer1_grade <- layer1 [ layer1 $ grade == grade , ] # Buffer the geometries of the current grade buffered_layer1_grade <- st_buffer ( layer1_grade , dist = 500 ) # Intersect with the second layer intersections <- st_intersects ( layer2 , buffered_layer1_grade , sparse = FALSE ) selected_polygons <- layer2 [ rowSums ( intersections ) > 0 , ] # Add a new column to store the grade information selected_polygons $ grade <- grade # Store the result results [[ grade ]] <- selected_polygons } # Combine all selected polygons from different grades into one sf object final_selected_polygons <- do.call ( rbind , results ) # Define colors for the grades grade_colors <- c ( \"A\" = \"grey\" , \"B\" = \"grey\" , \"C\" = \"grey\" , \"D\" = \"grey\" ) # Create the plot plot <- ggplot () + geom_sf ( data = roads , alpha = 0.05 , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.1 , lwd = 1.1 ) + geom_sf ( data = layer1 , fill = \"grey\" , color = \"grey\" , size = 0.1 ) + facet_wrap ( ~ grade , nrow = 1 ) + geom_sf ( data = final_selected_polygons , fill = \"green\" , color = \"green\" , size = 0.1 ) + facet_wrap ( ~ grade , nrow = 1 ) + #scale_fill_manual(values = grade_colors) + #scale_color_manual(values = grade_colors) + theme_minimal () + labs ( fill = 'HOLC Grade' ) + theme_tufte () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"none\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot as a high-resolution PNG file ggsave ( output_file , plot , width = 10 , height = 4 , units = \"in\" , dpi = 1200 ) # Return the plot for optional further use return ( list ( plot = plot , sf = final_selected_polygons )) } FUNCTION: Create word cloud per grade create_wordclouds_by_grade <- function ( sf_object , output_file = \"food_word_cloud_per_grade.png\" , title = \"Healthy food place names word cloud\" , max_size = 25 , col_select = \"name\" ) { # Extract relevant data and prepare text data text_data <- sf_object %>% select ( grade , col_select ) %>% filter ( ! is.na ( col_select )) %>% unnest_tokens ( output = \"word\" , input = col_select , token = \"words\" ) %>% count ( grade , word , sort = TRUE ) %>% ungroup () %>% filter ( n () > 1 ) # Filter to remove overly common or single-occurrence words # Ensure there are no NA values in the 'word' column text_data <- text_data %>% filter ( ! is.na ( word )) # Handle cases where text_data might be empty if ( nrow ( text_data ) == 0 ) { stop ( \"No data available for creating word clouds.\" ) } # Create a word cloud using ggplot2 and ggwordcloud p <- ggplot ( ) + geom_text_wordcloud_area ( data = text_data , aes ( label = word , size = n ), rm_outside = TRUE ) + scale_size_area ( max_size = max_size ) + facet_wrap ( ~ grade , nrow = 1 ) + scale_color_gradient ( low = \"darkred\" , high = \"red\" ) + theme_minimal () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), panel.spacing = unit ( 0.5 , \"lines\" ), plot.title = element_text ( size = 16 , face = \"bold\" ), legend.position = \"none\" ) + labs ( title = title ) # Attempt to save the plot and handle any errors tryCatch ({ ggsave ( output_file , p , width = 10 , height = 4 , units = \"in\" , dpi = 600 ) }, error = function ( e ) { cat ( \"Error in saving the plot: \" , e $ message , \"\\n\" ) }) return ( p ) } Map food over each grade individually layer1 <- denver_redlining layer2 <- food food_match <- process_and_plot_sf_layers ( layer1 , layer2 , \"food_match.png\" ) WORD CLOUD: Names of places with fresh food food_word_cloud <- create_wordclouds_by_grade ( food_match $ sf , output_file = \"food_word_cloud_per_grade.png\" ) Warning: Using an external vector in selections was deprecated in tidyselect 1.1.0. \u2139 Please use `all_of()` or `any_of()` instead. # Was: data %>% select(col_select) # Now: data %>% select(all_of(col_select)) See . Warning in wordcloud_boxes(data_points = points_valid_first, boxes = boxes, : Some words could not fit on page. They have been removed. Map processed food over each grade individually layer1 <- denver_redlining layer2 <- food_processed processed_food_match <- process_and_plot_sf_layers ( layer1 , layer2 , \"processed_food_match.png\" ) WORD CLOUD: Names of places with processed food processed_food_cloud <- create_wordclouds_by_grade ( processed_food_match $ sf , output_file = \"processed_food_word_cloud_per_grade.png\" , title = \"Processed food place names where larger text is more frequent\" , max_size = 17 ) Part 2: Integrating Environmental Data \u00b6 Data Processing \u00b6 Use satellite data from 2010 to analyze greenspace using NDVI, an index that measures the quantity of vegetation in an area. Apply methods to adjust for potential confounders as described in the study, ensuring that comparisons of greenspace across HOLC grades are valid and not biased by historical or socio-demographic factors. Map natural habitats over each grade individually layer1 <- denver_redlining layer2 <- natural_habitats natural_habitats_match <- process_and_plot_sf_layers ( layer1 , layer2 , \"natural_habitats_match.png\" ) print ( natural_habitats_match $ plot ) ![](worksheet_redlining_files/figure-gfm/unnamed-chunk-18-1.png) WORD CLOUD: Name of natural habitat area natural_habitats_cloud <- create_wordclouds_by_grade ( natural_habitats_match $ sf , output_file = \"natural_habitats_word_cloud_per_grade.png\" , title = \"Natural habitats place names where larger text is more frequent\" , max_size = 35 ) FUNCTION: Stream NDVI data polygon_layer <- denver_redlining # Function to process satellite data based on an SF polygon's extent process_satellite_data <- function ( polygon_layer , start_date , end_date , assets , fps = 1 , output_file = \"anim.gif\" ) { # Record start time start_time <- Sys.time () # Calculate the bbox from the polygon layer bbox <- st_bbox ( polygon_layer ) s = stac ( \"https://earth-search.aws.element84.com/v0\" ) # Use stacR to search for Sentinel-2 images within the bbox and date range items = s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( bbox [ \"xmin\" ], bbox [ \"ymin\" ], bbox [ \"xmax\" ], bbox [ \"ymax\" ]), datetime = paste ( start_date , end_date , sep = \"/\" ), limit = 500 ) %>% post_request () # Define mask for Sentinel-2 image quality #S2.mask <- image_mask(\"SCL\", values = c(3, 8, 9)) # Create a collection of images filtering by cloud cover col <- stac_image_collection ( items $ features , asset_names = assets , property_filter = function ( x ) { x [[ \"eo:cloud_cover\" ]] < 30 }) # Define a view for processing the data v <- cube_view ( srs = \"EPSG:4326\" , extent = list ( t0 = start_date , t1 = end_date , left = bbox [ \"xmin\" ], right = bbox [ \"xmax\" ], top = bbox [ \"ymax\" ], bottom = bbox [ \"ymin\" ]), dx = 0.001 , dy = 0.001 , dt = \"P1M\" , aggregation = \"median\" , resampling = \"bilinear\" ) # Calculate NDVI and create an animation ndvi_col <- function ( n ) { rev ( sequential_hcl ( n , \"Green-Yellow\" )) } #raster_cube(col, v, mask = S2.mask) %>% raster_cube ( col , v ) %>% select_bands ( c ( \"B04\" , \"B08\" )) %>% apply_pixel ( \"(B08-B04)/(B08+B04)\" , \"NDVI\" ) %>% gdalcubes :: animate ( col = ndvi_col , zlim = c ( -0.2 , 1 ), key.pos = 1 , save_as = output_file , fps = fps ) # Calculate processing time end_time <- Sys.time () processing_time <- difftime ( end_time , start_time ) # Return processing time return ( processing_time ) } Stream NDVI data: animation processing_time <- process_satellite_data ( denver_redlining , \"2022-05-31\" , \"2023-05-31\" , c ( \"B04\" , \"B08\" )) FUNCTION: Stream year average NDVI yearly_average_ndvi <- function ( polygon_layer , output_file = \"ndvi.png\" , dx = 0.01 , dy = 0.01 ) { # Record start time start_time <- Sys.time () # Calculate the bbox from the polygon layer bbox <- st_bbox ( polygon_layer ) s = stac ( \"https://earth-search.aws.element84.com/v0\" ) # Search for Sentinel-2 images within the bbox for June items <- s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( bbox [ \"xmin\" ], bbox [ \"ymin\" ], bbox [ \"xmax\" ], bbox [ \"ymax\" ]), datetime = \"2023-01-01/2023-12-31\" , limit = 500 ) %>% post_request () # Create a collection of images filtering by cloud cover col <- stac_image_collection ( items $ features , asset_names = c ( \"B04\" , \"B08\" ), property_filter = function ( x ) { x [[ \"eo:cloud_cover\" ]] < 80 }) # Define a view for processing the data specifically for June v <- cube_view ( srs = \"EPSG:4326\" , extent = list ( t0 = \"2023-01-01\" , t1 = \"2023-12-31\" , left = bbox [ \"xmin\" ], right = bbox [ \"xmax\" ], top = bbox [ \"ymax\" ], bottom = bbox [ \"ymin\" ]), dx = dx , dy = dy , dt = \"P1Y\" , aggregation = \"median\" , resampling = \"bilinear\" ) # Process NDVI ndvi_rast <- raster_cube ( col , v ) %>% select_bands ( c ( \"B04\" , \"B08\" )) %>% apply_pixel ( \"(B08-B04)/(B08+B04)\" , \"NDVI\" ) %>% write_tif () |> terra :: rast () # Convert terra Raster to ggplot using tidyterra ndvi_plot <- ggplot () + geom_spatraster ( data = ndvi_rast , aes ( fill = NDVI )) + scale_fill_viridis_c ( option = \"viridis\" , direction = -1 , name = \"NDVI\" ) + labs ( title = \"NDVI mean for 2023\" ) + theme_minimal () + coord_sf () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"right\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot as a high-resolution PNG file ggsave ( output_file , ndvi_plot , width = 10 , height = 8 , dpi = 600 ) # Calculate processing time end_time <- Sys.time () processing_time <- difftime ( end_time , start_time ) # Return the plot and processing time return ( list ( plot = ndvi_plot , processing_time = processing_time , raster = ndvi_rast )) } Stream NDVI: high resolution ndvi_background <- yearly_average_ndvi ( denver_redlining , dx = 0.0001 , dy = 0.0001 ) FUNCTION: Map NDVI per HOLC grade individually create_mask_and_plot <- function ( redlining_sf , background_raster = ndvi $ raster , roads = NULL , rivers = NULL ){ start_time <- Sys.time () # Start timing # Validate and prepare the redlining data redlining_sf <- redlining_sf %>% filter ( grade != \"\" ) %>% st_make_valid () bbox <- st_bbox ( redlining_sf ) # Get original bounding box expanded_bbox <- expand_bbox ( bbox , 6000 , 1000 ) # expanded_bbox_poly <- st_as_sfc ( expanded_bbox , crs = st_crs ( redlining_sf )) %>% st_make_valid () # Initialize an empty list to store masks masks <- list () # Iterate over each grade to create masks unique_grades <- unique ( redlining_sf $ grade ) for ( grade in unique_grades ) { # Filter polygons by grade grade_polygons <- redlining_sf [ redlining_sf $ grade == grade , ] # Create an \"inverted\" mask by subtracting these polygons from the background mask <- st_difference ( expanded_bbox_poly , st_union ( grade_polygons )) # Store the mask in the list with the grade as the name masks [[ grade ]] <- st_sf ( geometry = mask , grade = grade ) } # Combine all masks into a single sf object mask_sf <- do.call ( rbind , masks ) # Normalize the grades so that C.2 becomes C, but correctly handle other grades mask_sf $ grade <- ifelse ( mask_sf $ grade == \"C.2\" , \"C\" , mask_sf $ grade ) # Prepare the plot plot <- ggplot () + geom_spatraster ( data = background_raster , aes ( fill = NDVI )) + scale_fill_viridis_c ( name = \"NDVI\" , option = \"viridis\" , direction = -1 ) + geom_sf ( data = mask_sf , aes ( color = grade ), fill = \"white\" , size = 0.1 , show.legend = FALSE ) + scale_color_manual ( values = c ( \"A\" = \"white\" , \"B\" = \"white\" , \"C\" = \"white\" , \"D\" = \"white\" ), name = \"Grade\" ) + facet_wrap ( ~ grade , nrow = 1 ) + geom_sf ( data = roads , alpha = 1 , lwd = 0.1 , color = \"white\" ) + geom_sf ( data = rivers , color = \"white\" , alpha = 0.5 , lwd = 1.1 ) + labs ( title = \"NDVI: Normalized Difference Vegetation Index\" ) + theme_minimal () + coord_sf ( xlim = c ( bbox [ \"xmin\" ], bbox [ \"xmax\" ]), ylim = c ( bbox [ \"ymin\" ], bbox [ \"ymax\" ]), expand = FALSE ) + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"bottom\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot ggsave ( \"redlining_mask_ndvi.png\" , plot , width = 10 , height = 4 , dpi = 600 ) end_time <- Sys.time () # End timing runtime <- end_time - start_time # Return the plot and runtime return ( list ( plot = plot , runtime = runtime , mask_sf = mask_sf )) } Stream NDVI: low resolution ndvi_background_low <- yearly_average_ndvi ( denver_redlining ) Map low resolution NDVI per HOLC grade ndvi <- create_mask_and_plot ( denver_redlining , background_raster = ndvi_background_low $ raster , roads = roads , rivers = rivers ) FUNCTION: Map Denver City provided data per HOLC grade process_city_inventory_data <- function ( address , inner_file , polygon_layer , output_filename , variable_label = 'Tree Density' ) { # Download and read the shapefile full_path <- glue ( \"/vsizip/vsicurl/{address}/{inner_file}\" ) shape_data <- st_read ( full_path , quiet = TRUE ) |> st_as_sf () # Process the shape data with the provided polygon layer processed_data <- process_and_plot_sf_layers ( polygon_layer , shape_data , paste0 ( output_filename , \".png\" )) # Extract trees from the processed data trees <- processed_data $ sf denver_redlining_residential <- polygon_layer |> filter ( grade != \"\" ) # Generate the density plot plot <- ggplot () + geom_sf ( data = roads , alpha = 0.05 , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.1 , lwd = 1.1 ) + geom_sf ( data = denver_redlining_residential , fill = \"grey\" , color = \"grey\" , size = 0.1 ) + facet_wrap ( ~ grade , nrow = 1 ) + stat_density_2d ( data = trees , mapping = aes ( x = map_dbl ( geometry , ~ . [ 1 ]), y = map_dbl ( geometry , ~ . [ 2 ]), fill = stat ( density )), geom = 'tile' , contour = FALSE , alpha = 0.9 ) + scale_fill_gradientn ( colors = c ( \"transparent\" , \"white\" , \"limegreen\" ), values = scales :: rescale ( c ( 0 , 0.1 , 1 )), # Adjust these based on your density range guide = \"colourbar\" ) + theme_minimal () + labs ( fill = variable_label ) + theme_tufte () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"bottom\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot ggsave ( paste0 ( output_filename , \"_density_plot.png\" ), plot , width = 10 , height = 4 , units = \"in\" , dpi = 600 ) # Return the plot and the tree layer return ( list ( plot = plot , layer = trees )) } Map tree inventory per HOLC grade result <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/tree_inventory/shape/tree_inventory.zip\" , \"tree_inventory.shp\" , denver_redlining , \"Denver_tree_inventory_2023\" ) Warning: `stat(density)` was deprecated in ggplot2 3.4.0. \u2139 Please use `after_stat(density)` instead. Map traffic accidents per HOLC grade result <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/traffic_accidents/shape/traffic_accidents.zip\" , \"traffic_accidents.shp\" , denver_redlining , \"Denver_traffic_accidents\" , variable_label = 'Traffic accidents density' ) Map stream sampling effort per HOLC grade instream_sampling_sites <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/instream_sampling_sites/shape/instream_sampling_sites.zip\" , \"instream_sampling_sites.shp\" , denver_redlining , \"instream_sampling_sites\" , variable_label = 'Instream sampling sites density' ) Map soil sampling effort per HOLC grade soil_samples <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/soil_samples/shape/soil_samples.zip\" , \"soil_samples.shp\" , denver_redlining , \"Soil samples\" , variable_label = 'soil samples density' ) Map public art density per HOLC grade public_art <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/public_art/shape/public_art.zip\" , \"public_art.shp\" , denver_redlining , \"Public art \" , variable_label = 'Public art density' ) Map liquor licenses density per HOLC grade liquor_licenses <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/liquor_licenses/shape/liquor_licenses.zip\" , \"liquor_licenses.shp\" , denver_redlining , \"liquor licenses \" , variable_label = 'liquor licenses density' ) Map crime density per HOLC grade Crime <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/crime/shape/crime.zip\" , \"crime.shp\" , denver_redlining , \"crime\" , variable_label = 'Crime density' ) WORD CLOUD: Types of crimes crime_cloud <- create_wordclouds_by_grade ( Crime $ layer , output_file = \"Crime_word_cloud_per_grade.png\" , title = \"Crime type where larger text is more frequent\" , max_size = 25 , col_select = \"OFFENSE_TY\" ) Warning: Using an external vector in selections was deprecated in tidyselect 1.1.0. \u2139 Please use `all_of()` or `any_of()` instead. # Was: data %>% select(col_select) # Now: data %>% select(all_of(col_select)) See . Map police shooting density per HOLC grade Denver_police_shootings <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/denver_police_officer_involved_shootings/shape/denver_police_officer_involved_shootings.zip\" , \"denver_police_officer_involved_shootings.shp\" , denver_redlining , \"Police shootings\" , variable_label = 'Police shootings density' ) Not enough data for density across all 4 WORD CLOUD: Police involved shootings Denver_police_shootings_cloud <- create_wordclouds_by_grade ( Denver_police_shootings $ layer , output_file = \"police_shootings_word_cloud_per_grade.png\" , title = \"police involved shooting per crime type where larger text is more frequent\" , max_size = 35 , col_select = \"SHOOT_ACTI\" ) Part 3: Comparative Analysis and Visualization \u00b6 Statistical Analysis \u00b6 Conduct a detailed statistical analysis to compare greenspace across different HOLC grades, using techniques like Targeted Maximum Likelihood Estimation (TMLE) to assess the association between historical redlining and current greenspace levels. Visualize the disparities in greenspace distribution using GIS tools, highlighting how redlining has shaped urban ecological landscapes. Conclusion \u00b6 This tutorial provides tools and methodologies to explore the lingering effects of historic redlining on urban greenspace, offering insights into the intersection of urban planning, environmental justice, and public health. References \u00b6 Nardone, A., Rudolph, K. E., Morello-Frosch, R., & Casey, J. A. (2021). Redlines and Greenspace: The Relationship between Historical Redlining and 2010 Greenspace across the United States. Environmental Health Perspectives , 129(1), 017006. DOI:10.1289/EHP7495. Available online","title":"Redlining"},{"location":"worksheet_redlining/#redlining","text":"","title":"Redlining"},{"location":"worksheet_redlining/#exploring-the-impact-of-historical-redlining-on-urban-greenspace-a-collaborative-examination-of-maps-justice-and-resilience","text":"","title":"Exploring the Impact of Historical Redlining on Urban Greenspace: A Collaborative Examination of Maps, Justice, and Resilience"},{"location":"worksheet_redlining/#introduction","text":"This group exploration delves into the long-term impacts of historical redlining on urban greenspace, emphasizing the powerful role of maps in shaping environmental and social landscapes. By drawing on the research by Nardone et al. (2021), you will collaboratively investigate how discriminatory practices encoded in maps have led to persistent disparities in urban settings. This exploration aims to uncover the resilience of communities in adapting to these entrenched injustices and to foster a deeper understanding of how mapping can serve both as a tool of exclusion and as a means for promoting social equity. )","title":"Introduction"},{"location":"worksheet_redlining/#understanding-redlining-as-a-systemic-disturbance","text":"Redlining originated in the 1930s as a discriminatory practice where the Home Owners\u2019 Loan Corporation (HOLC) systematically denied mortgages or offered unfavorable terms based on racial and ethnic compositions. This methodical exclusion, executed through maps that color-coded \u201crisky\u201d investment areas in red, marked minority-populated areas, denying them crucial investment and development opportunities and initiating a profound and lasting disturbance in the urban fabric. Maps serve as powerful tools beyond navigation; they communicate and enforce control. By defining neighborhood boundaries through redlining, HOLC maps not only mirrored societal biases but also perpetuated and embedded them into the urban landscape. This manipulation of geographic data set a trajectory that limited economic growth, dictated the allocation of services, and influenced the development or deterioration of community infrastructure. Figure 1: 1938 Map of Atlanta uses colors as grades for neighborhoods. The red swaths identify each area with large African-American populations that were deemed \u201cless safe.\u201d [![](../assets/redlining/georectified-thumbnail.png)](https://storymaps.arcgis.com/stories/0f58d49c566b486482b3e64e9e5f7ac9) ArcGIS Story Map Explore the Story Map: Click on the image above to explore the interactive story map about [subject of the story map].","title":"Understanding Redlining as a Systemic Disturbance"},{"location":"worksheet_redlining/#resilience-and-adaptation-in-urban-environments","text":"The legacy of redlining presents both a challenge and an opportunity for resilience and adaptation. Economically and socially, redlining entrenched cycles of poverty and racial segregation, creating a resilient wealth gap that has been difficult to dismantle. Environmentally, the neighborhoods targeted by redlining continue to face significant challenges\u2014they generally feature less greenspace, suffer from higher pollution levels, and are more vulnerable to the impacts of climate change. These factors compound the health and wellness challenges faced by residents. Despite these adversities, urban communities have continually demonstrated remarkable resilience. Adaptation strategies, such as community-led green initiatives, urban agriculture, and grassroots activism, have emerged as responses to these systemic disturbances. By enhancing green infrastructure and advocating for equitable environmental policies, these communities strive to increase their resilience against both historical inequities and environmental challenges. [![](https://img.youtube.com/vi/O5FBJyqfoLM/hqdefault.jpg)](https://youtu.be/O5FBJyqfoLM) Watch the video Video Title: Exploring the Impacts of Historical Redlining on Urban Development Description: Click on the image above to watch a video that delves into the consequences of historical redlining and its ongoing impact on urban environments. This educational piece offers insights into how such discriminatory practices have shaped cities and what can be learned from them. The following group exercise will not only uncover the impact of redlining on urban greenspace but also highlight the adaptive strategies developed in response to this enduring disturbance. Through mapping and analysis, we aim to illustrate the powerful role that geographic data can play in understanding and fostering urban resilience and social equity.","title":"Resilience and Adaptation in Urban Environments"},{"location":"worksheet_redlining/#references","text":"Nardone, A., Rudolph, K. E., Morello-Frosch, R., & Casey, J. A. (2021). Redlines and Greenspace: The Relationship between Historical Redlining and 2010 Greenspace across the United States. Environmental Health Perspectives , 129(1), 017006. DOI:10.1289/EHP7495. Hoffman, J. S., Shandas, V., & Pendleton, N. (2020). The Effects of Historical Housing Policies on Resident Exposure to Intra-Urban Heat: A Study of 108 US Urban Areas. Climate , 8(1), 12. DOI:10.3390/cli8010012.","title":"References"},{"location":"worksheet_redlining/#goals-of-this-group-activity","text":"The primary objectives of this tutorial are: 1. To practice coding in CyVerse. 2. To analyze the relationship between HOLC grades and the presence of urban greenspace. 3. To understand how historic policies continue to affect the spatial distribution of environmental amenities.","title":"Goals of this group activity"},{"location":"worksheet_redlining/#part-1-accessing-and-visualizing-historic-redlining-data","text":"We will begin by accessing HOLC maps from the Mapping Inequality project and overlaying this data with modern geographic datasets to visualize the historical impact on contemporary urban landscapes.","title":"Part 1: Accessing and Visualizing Historic Redlining Data"},{"location":"worksheet_redlining/#data-acquisition","text":"Download HOLC map shapefiles from the University of Richmond\u2019s Mapping Inequality Project. Utilize satellite imagery and other geospatial data to map current greenspace using the normalized difference vegetation index (NDVI).","title":"Data Acquisition"},{"location":"worksheet_redlining/#analysis-methodology","text":"Replicate the approach used by Nardone et al. to calculate NDVI values for each HOLC neighborhood, assessing greenspace as a health-promoting resource. Employ statistical methods such as propensity score matching to control for confounding variables and estimate the true impact of HOLC grades on urban greenspace. img { width: 100%; } details summary { color: black; background-color: white; } details[open] summary { color: black; } R libraries we use in this analysis if ( ! requireNamespace ( \"tidytext\" , quietly = TRUE )) { install.packages ( \"tidytext\" ) } library ( tidytext ) ## Warning: package 'tidytext' was built under R version 4.3.2 library ( sf ) ## Warning: package 'sf' was built under R version 4.3.2 ## Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE library ( ggplot2 ) ## Warning: package 'ggplot2' was built under R version 4.3.2 library ( ggthemes ) ## Warning: package 'ggthemes' was built under R version 4.3.2 library ( dplyr ) ## ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ## ## filter, lag ## The following objects are masked from 'package:base': ## ## intersect, setdiff, setequal, union library ( rstac ) ## Warning: package 'rstac' was built under R version 4.3.2 library ( gdalcubes ) ## Warning: package 'gdalcubes' was built under R version 4.3.2 library ( gdalUtils ) ## Please note that rgdal will be retired during October 2023, ## plan transition to sf/stars/terra functions using GDAL and PROJ ## at your earliest convenience. ## See https://r-spatial.org/r/2023/05/15/evolution4.html and https://github.com/r-spatial/evolution ## rgdal: version: 1.6-7, (SVN revision 1203) ## Geospatial Data Abstraction Library extensions to R successfully loaded ## Loaded GDAL runtime: GDAL 3.5.3, released 2022/10/21 ## Path to GDAL shared files: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/rgdal/gdal ## GDAL does not use iconv for recoding strings. ## GDAL binary built with GEOS: TRUE ## Loaded PROJ runtime: Rel. 9.1.0, September 1st, 2022, [PJ_VERSION: 910] ## Path to PROJ shared files: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/gdalcubes/proj ## PROJ CDN enabled: FALSE ## Linking to sp version:1.6-1 ## To mute warnings of possible GDAL/OSR exportToProj4() degradation, ## use options(\"rgdal_show_exportToProj4_warnings\"=\"none\") before loading sp or rgdal. ## ## Attaching package: 'gdalUtils' ## The following object is masked from 'package:sf': ## ## gdal_rasterize library ( gdalcubes ) library ( colorspace ) library ( terra ) ## Warning: package 'terra' was built under R version 4.3.2 ## terra 1.7.71 ## ## Attaching package: 'terra' ## The following object is masked from 'package:colorspace': ## ## RGB ## The following objects are masked from 'package:gdalcubes': ## ## animate, crop, size library ( tidyterra ) ## ## Attaching package: 'tidyterra' ## The following object is masked from 'package:stats': ## ## filter library ( basemapR ) library ( tidytext ) library ( ggwordcloud ) library ( osmextract ) ## Data (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright. ## Check the package website, https://docs.ropensci.org/osmextract/, for more details. library ( sf ) library ( ggplot2 ) library ( ggthemes ) library ( glue ) ## ## Attaching package: 'glue' ## The following object is masked from 'package:terra': ## ## trim library ( purrr ) FUNCTION: List cities where HOLC data are available # Function to get a list of unique cities and states from the redlining data get_city_state_list_from_redlining_data <- function () { # URL to the GeoJSON data url <- \"https://raw.githubusercontent.com/americanpanorama/mapping-inequality-census-crosswalk/main/MIv3Areas_2010TractCrosswalk.geojson\" # Read the GeoJSON file into an sf object redlining_data <- tryCatch ({ read_sf ( url ) }, error = function ( e ) { stop ( \"Error reading GeoJSON data: \" , e $ message ) }) # Check for the existence of 'city' and 'state' columns if ( ! all ( c ( \"city\" , \"state\" ) %in% names ( redlining_data ))) { stop ( \"The required columns 'city' and/or 'state' do not exist in the data.\" ) } # Extract a unique list of city and state pairs without the geometries city_state_df <- redlining_data %>% select ( city , state ) %>% st_set_geometry ( NULL ) %>% # Drop the geometry to avoid issues with invalid shapes distinct ( city , state ) %>% arrange ( state , city ) # Arrange the list alphabetically by state, then by city # Return the dataframe of unique city-state pairs return ( city_state_df ) } Stream list of available HOLC cities #Retrieve the list of cities and states city_state_list <- get_city_state_list_from_redlining_data () knitr :: kable ( city_state_list , format = \"markdown\" ) | city | state | |:---------------------------------|:------| | Birmingham | AL | | Mobile | AL | | Montgomery | AL | | Arkadelphia | AR | | Batesville | AR | | Camden | AR | | Conway | AR | | El Dorado | AR | | Fort Smith | AR | | Little Rock | AR | | Russellville | AR | | Texarkana | AR | | Phoenix | AZ | | Fresno | CA | | Los Angeles | CA | | Oakland | CA | | Sacramento | CA | | San Diego | CA | | San Francisco | CA | | San Jose | CA | | Stockton | CA | | Boulder | CO | | Colorado Springs | CO | | Denver | CO | | Fort Collins | CO | | Fort Morgan | CO | | Grand Junction | CO | | Greeley | CO | | Longmont | CO | | Pueblo | CO | | Bridgeport and Fairfield | CT | | Hartford | CT | | New Britain | CT | | New Haven | CT | | Stamford, Darien, and New Canaan | CT | | Waterbury | CT | | Crestview | FL | | Daytona Beach | FL | | DeFuniak Springs | FL | | DeLand | FL | | Jacksonville | FL | | Miami | FL | | New Smyrna | FL | | Orlando | FL | | Pensacola | FL | | St. Petersburg | FL | | Tampa | FL | | Atlanta | GA | | Augusta | GA | | Columbus | GA | | Macon | GA | | Savannah | GA | | Boone | IA | | Cedar Rapids | IA | | Council Bluffs | IA | | Davenport | IA | | Des Moines | IA | | Dubuque | IA | | Sioux City | IA | | Waterloo | IA | | Aurora | IL | | Chicago | IL | | Decatur | IL | | East St. Louis | IL | | Joliet | IL | | Peoria | IL | | Rockford | IL | | Springfield | IL | | Evansville | IN | | Fort Wayne | IN | | Indianapolis | IN | | Lake Co. Gary | IN | | Muncie | IN | | South Bend | IN | | Terre Haute | IN | | Atchison | KS | | Junction City | KS | | Topeka | KS | | Wichita | KS | | Covington | KY | | Lexington | KY | | Louisville | KY | | New Orleans | LA | | Shreveport | LA | | Arlington | MA | | Belmont | MA | | Boston | MA | | Braintree | MA | | Brockton | MA | | Brookline | MA | | Cambridge | MA | | Chelsea | MA | | Dedham | MA | | Everett | MA | | Fall River | MA | | Fitchburg | MA | | Haverhill | MA | | Holyoke Chicopee | MA | | Lawrence | MA | | Lexington | MA | | Lowell | MA | | Lynn | MA | | Malden | MA | | Medford | MA | | Melrose | MA | | Milton | MA | | Needham | MA | | New Bedford | MA | | Newton | MA | | Pittsfield | MA | | Quincy | MA | | Revere | MA | | Salem | MA | | Saugus | MA | | Somerville | MA | | Springfield | MA | | Waltham | MA | | Watertown | MA | | Winchester | MA | | Winthrop | MA | | Worcester | MA | | Baltimore | MD | | Augusta | ME | | Boothbay | ME | | Portland | ME | | Sanford | ME | | Waterville | ME | | Battle Creek | MI | | Bay City | MI | | Detroit | MI | | Flint | MI | | Grand Rapids | MI | | Jackson | MI | | Kalamazoo | MI | | Lansing | MI | | Muskegon | MI | | Pontiac | MI | | Saginaw | MI | | Austin | MN | | Duluth | MN | | Mankato | MN | | Minneapolis | MN | | Rochester | MN | | St. Cloud | MN | | St. Paul | MN | | Staples | MN | | Cape Girardeau | MO | | Carthage | MO | | Greater Kansas City | MO | | Joplin | MO | | Springfield | MO | | St. Joseph | MO | | St. Louis | MO | | Jackson | MS | | Asheville | NC | | Charlotte | NC | | Durham | NC | | Elizabeth City | NC | | Fayetteville | NC | | Goldsboro | NC | | Greensboro | NC | | Hendersonville | NC | | High Point | NC | | New Bern | NC | | Rocky Mount | NC | | Statesville | NC | | Winston-Salem | NC | | Fargo | ND | | Grand Forks | ND | | Minot | ND | | Williston | ND | | Lincoln | NE | | Omaha | NE | | Manchester | NH | | Atlantic City | NJ | | Bergen Co. | NJ | | Camden | NJ | | Essex Co. | NJ | | Hudson Co. | NJ | | Monmouth | NJ | | Passaic County | NJ | | Perth Amboy | NJ | | Trenton | NJ | | Union Co. | NJ | | Albany | NY | | Binghamton-Johnson City | NY | | Bronx | NY | | Brooklyn | NY | | Buffalo | NY | | Elmira | NY | | Jamestown | NY | | Lower Westchester Co. | NY | | Manhattan | NY | | Niagara Falls | NY | | Poughkeepsie | NY | | Queens | NY | | Rochester | NY | | Schenectady | NY | | Staten Island | NY | | Syracuse | NY | | Troy | NY | | Utica | NY | | Akron | OH | | Canton | OH | | Cleveland | OH | | Columbus | OH | | Dayton | OH | | Hamilton | OH | | Lima | OH | | Lorain | OH | | Portsmouth | OH | | Springfield | OH | | Toledo | OH | | Warren | OH | | Youngstown | OH | | Ada | OK | | Alva | OK | | Enid | OK | | Miami Ottawa County | OK | | Muskogee | OK | | Norman | OK | | Oklahoma City | OK | | South McAlester | OK | | Tulsa | OK | | Portland | OR | | Allentown | PA | | Altoona | PA | | Bethlehem | PA | | Chester | PA | | Erie | PA | | Harrisburg | PA | | Johnstown | PA | | Lancaster | PA | | McKeesport | PA | | New Castle | PA | | Philadelphia | PA | | Pittsburgh | PA | | Wilkes-Barre | PA | | York | PA | | Pawtucket & Central Falls | RI | | Providence | RI | | Woonsocket | RI | | Aiken | SC | | Charleston | SC | | Columbia | SC | | Greater Anderson | SC | | Greater Greenville | SC | | Orangeburg | SC | | Rock Hill | SC | | Spartanburg | SC | | Sumter | SC | | Aberdeen | SD | | Huron | SD | | Milbank | SD | | Mitchell | SD | | Rapid City | SD | | Sioux Falls | SD | | Vermillion | SD | | Watertown | SD | | Chattanooga | TN | | Elizabethton | TN | | Erwin | TN | | Greenville | TN | | Johnson City | TN | | Knoxville | TN | | Memphis | TN | | Nashville | TN | | Amarillo | TX | | Austin | TX | | Beaumont | TX | | Dallas | TX | | El Paso | TX | | Fort Worth | TX | | Galveston | TX | | Houston | TX | | Port Arthur | TX | | San Antonio | TX | | Waco | TX | | Wichita Falls | TX | | Ogden | UT | | Salt Lake City | UT | | Bristol | VA | | Danville | VA | | Harrisonburg | VA | | Lynchburg | VA | | Newport News | VA | | Norfolk | VA | | Petersburg | VA | | Phoebus | VA | | Richmond | VA | | Roanoke | VA | | Staunton | VA | | Bennington | VT | | Brattleboro | VT | | Burlington | VT | | Montpelier | VT | | Newport City | VT | | Poultney | VT | | Rutland | VT | | Springfield | VT | | St. Albans | VT | | St. Johnsbury | VT | | Windsor | VT | | Seattle | WA | | Spokane | WA | | Tacoma | WA | | Kenosha | WI | | Madison | WI | | Milwaukee Co. | WI | | Oshkosh | WI | | Racine | WI | | Charleston | WV | | Huntington | WV | | Wheeling | WV | FUNCTION: Stream HOLC data from a city # Function to load and filter redlining data by city load_city_redlining_data <- function ( city_name ) { # URL to the GeoJSON data url <- \"https://raw.githubusercontent.com/americanpanorama/mapping-inequality-census-crosswalk/main/MIv3Areas_2010TractCrosswalk.geojson\" # Read the GeoJSON file into an sf object redlining_data <- read_sf ( url ) # Filter the data for the specified city and non-empty grades city_redline <- redlining_data %>% filter ( city == city_name ) # Return the filtered data return ( city_redline ) } Stream HOLC data for Denver, CO # Load redlining data for Denver denver_redlining <- load_city_redlining_data ( \"Denver\" ) knitr :: kable ( head ( denver_redlining ), format = \"markdown\" ) | area_id | city | state | city_survey | cat | grade | label | res | com | ind | fill | GEOID10 | GISJOIN | calc_area | pct_tract | geometry | |--------:|:-------|:------|:------------|:-----|:------|:------|:-----|:------|:------|:---------|:------------|:---------------|-------------:|----------:|:-----------------------------| | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004104 | G0800310004104 | 1.525535e+01 | 0.00001 | MULTIPOLYGON (((-104.9125 3\u2026 | | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004201 | G0800310004201 | 3.987458e+05 | 0.20900 | MULTIPOLYGON (((-104.9246 3\u2026 | | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004304 | G0800310004304 | 1.554195e+05 | 0.05927 | MULTIPOLYGON (((-104.9125 3\u2026 | | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004202 | G0800310004202 | 1.117770e+06 | 0.57245 | MULTIPOLYGON (((-104.9125 3\u2026 | | 6529 | Denver | CO | TRUE | Best | A | A2 | TRUE | FALSE | FALSE | \\#76a865 | 08031004302 | G0800310004302 | 3.133415e+05 | 0.28381 | MULTIPOLYGON (((-104.928 39\u2026 | | 6529 | Denver | CO | TRUE | Best | A | A2 | TRUE | FALSE | FALSE | \\#76a865 | 08031004301 | G0800310004301 | 1.221218e+05 | 0.08622 | MULTIPOLYGON (((-104.9305 3\u2026 | FUNCTION: Get Points-of-Interest from city of interest get_places <- function ( polygon_layer , type = \"food\" ) { # Check if the input is an sf object if ( ! inherits ( polygon_layer , \"sf\" )) { stop ( \"The provided object is not an sf object.\" ) } # Create a bounding box from the input sf object bbox_here <- st_bbox ( polygon_layer ) |> st_as_sfc () if ( type == \"food\" ){ my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( shop IN ('supermarket', 'bodega', 'market', 'other_market', 'farm', 'garden_centre', 'doityourself', 'farm_supply', 'compost', 'mulch', 'fertilizer') OR amenity IN ('social_facility', 'market', 'restaurant', 'coffee') OR leisure = 'garden' OR landuse IN ('farm', 'farmland', 'row_crops', 'orchard_plantation', 'dairy_grazing') OR building IN ('brewery', 'winery', 'distillery') OR shop = 'greengrocer' OR amenity = 'marketplace' )\" title <- \"food\" } if ( type == \"processed_food\" ) { my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( amenity IN ('fast_food', 'cafe', 'pub') OR shop IN ('convenience', 'supermarket') OR shop = 'kiosk' )\" title <- \"Processed Food Locations\" } if ( type == \"natural_habitats\" ){ my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( boundary = 'protected_area' OR natural IN ('tree', 'wood') OR landuse = 'forest' OR leisure = 'park' )\" title <- \"Natural habitats or City owned trees\" } if ( type == \"roads\" ){ my_layer <- \"lines\" my_query <- \"SELECT * FROM lines WHERE ( highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary') )\" title <- \"Major roads\" } if ( type == \"rivers\" ){ my_layer <- \"lines\" my_query <- \"SELECT * FROM lines WHERE ( waterway IN ('river'))\" title <- \"Major rivers\" } if ( type == \"internet_access\" ) { my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( amenity IN ('library', 'cafe', 'community_centre', 'public_building') AND internet_access = 'yes' )\" title <- \"Internet Access Locations\" } if ( type == \"water_bodies\" ) { my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( natural IN ('water', 'lake', 'pond') OR water IN ('lake', 'pond') OR landuse = 'reservoir' )\" title <- \"Water Bodies\" } if ( type == \"government_buildings\" ) { my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( amenity IN ('townhall', 'courthouse', 'embassy', 'police', 'fire_station') OR building IN ('capitol', 'government') )\" title <- \"Government Buildings\" } # Use the bbox to get data with oe_get(), specifying the desired layer and a custom SQL query for fresh food places tryCatch ({ places <- oe_get ( place = bbox_here , layer = my_layer , # Adjusted layer; change as per actual data availability query = my_query , quiet = TRUE ) places <- st_make_valid ( places ) # Crop the data to the bounding box cropped_places <- st_crop ( places , bbox_here ) # Plotting the cropped fresh food places plot <- ggplot ( data = cropped_places ) + geom_sf ( fill = \"cornflowerblue\" , color = \"cornflowerblue\" ) + ggtitle ( title ) + theme_tufte () + theme ( legend.position = \"none\" , # Optionally hide the legend axis.text = element_blank (), # Remove axis text axis.title = element_blank (), # Remove axis titles axis.ticks = element_blank (), # Remove axis ticks plot.background = element_rect ( fill = \"white\" , color = NA ), # Set the plot background to white panel.background = element_rect ( fill = \"white\" , color = NA ), # Set the panel background to white panel.grid.major = element_blank (), # Remove major grid lines panel.grid.minor = element_blank (), ) # Save the plot as a PNG file png_filename <- paste0 ( title , \"_\" , Sys.Date (), \".png\" ) ggsave ( png_filename , plot , width = 10 , height = 8 , units = \"in\" ) # Return the cropped dataset return ( cropped_places ) }, error = function ( e ) { stop ( \"Failed to retrieve or plot data: \" , e $ message ) }) } FUNCTION: Plot POI over HOLC grades plot_city_redlining <- function ( redlining_data , filename = \"redlining_plot.png\" ) { # Fetch additional geographic data based on redlining data roads <- get_places ( redlining_data , type = \"roads\" ) rivers <- get_places ( redlining_data , type = \"rivers\" ) # Filter residential zones with valid grades and where city survey is TRUE residential_zones <- redlining_data %>% filter ( city_survey == TRUE & grade != \"\" ) # Colors for the grades colors <- c ( \"#76a865\" , \"#7cb5bd\" , \"#ffff00\" , \"#d9838d\" ) # Plot the data using ggplot2 plot <- ggplot () + geom_sf ( data = roads , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.5 , lwd = 1.1 ) + geom_sf ( data = residential_zones , aes ( fill = grade ), alpha = 0.5 ) + theme_tufte () + scale_fill_manual ( values = colors ) + labs ( fill = 'HOLC Categories' ) + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), panel.grid.major = element_blank (), panel.grid.minor = element_blank (), legend.position = \"right\" ) # Save the plot as a high-resolution PNG file ggsave ( filename , plot , width = 10 , height = 8 , units = \"in\" , dpi = 600 ) # Return the plot object if needed for further manipulation or checking return ( plot ) } Plot Denver Redlining denver_plot <- plot_city_redlining ( denver_redlining ) Stream amenities by category food <- get_places ( denver_redlining , type = \"food\" ) food_processed <- get_places ( denver_redlining , type = \"processed_food\" ) natural_habitats <- get_places ( denver_redlining , type = \"natural_habitats\" ) roads <- get_places ( denver_redlining , type = \"roads\" ) rivers <- get_places ( denver_redlining , type = \"rivers\" ) #water_bodies <- get_places(denver_redlining, type=\"water_bodies\") government_buildings <- get_places ( denver_redlining , type = \"government_buildings\" ) FUNCTION: Plot the HOLC grades individually split_plot <- function ( sf_data , roads , rivers ) { # Filter for grades A, B, C, and D sf_data_filtered <- sf_data %>% filter ( grade %in% c ( 'A' , 'B' , 'C' , 'D' )) # Define a color for each grade grade_colors <- c ( \"A\" = \"#76a865\" , \"B\" = \"#7cb5bd\" , \"C\" = \"#ffff00\" , \"D\" = \"#d9838d\" ) # Create the plot with panels for each grade plot <- ggplot ( data = sf_data_filtered ) + geom_sf ( data = roads , alpha = 0.1 , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.1 , lwd = 1.1 ) + geom_sf ( aes ( fill = grade )) + facet_wrap ( ~ grade , nrow = 1 ) + # Free scales for different zoom levels if needed scale_fill_manual ( values = grade_colors ) + theme_minimal () + labs ( fill = 'HOLC Grade' ) + theme_tufte () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"none\" , # Optionally hide the legend axis.text = element_blank (), # Remove axis text axis.title = element_blank (), # Remove axis titles axis.ticks = element_blank (), # Remove axis ticks panel.grid.major = element_blank (), # Remove major grid lines panel.grid.minor = element_blank ()) ggsave ( plot , filename = \"HOLC_grades_individually.png\" , width = 10 , height = 4 , units = \"in\" , dpi = 1200 ) return ( plot ) } Plot 4 HOLC grades individually plot_row <- split_plot ( denver_redlining , roads , rivers ) FUNCTION: Map an amenity over each grade individually process_and_plot_sf_layers <- function ( layer1 , layer2 , output_file = \"output_plot.png\" ) { # Make geometries valid layer1 <- st_make_valid ( layer1 ) layer2 <- st_make_valid ( layer2 ) # Optionally, simplify geometries to remove duplicate vertices layer1 <- st_simplify ( layer1 , preserveTopology = TRUE ) |> filter ( grade != \"\" ) # Prepare a list to store results results <- list () # Loop through each grade and perform operations for ( grade in c ( \"A\" , \"B\" , \"C\" , \"D\" )) { # Filter layer1 for current grade layer1_grade <- layer1 [ layer1 $ grade == grade , ] # Buffer the geometries of the current grade buffered_layer1_grade <- st_buffer ( layer1_grade , dist = 500 ) # Intersect with the second layer intersections <- st_intersects ( layer2 , buffered_layer1_grade , sparse = FALSE ) selected_polygons <- layer2 [ rowSums ( intersections ) > 0 , ] # Add a new column to store the grade information selected_polygons $ grade <- grade # Store the result results [[ grade ]] <- selected_polygons } # Combine all selected polygons from different grades into one sf object final_selected_polygons <- do.call ( rbind , results ) # Define colors for the grades grade_colors <- c ( \"A\" = \"grey\" , \"B\" = \"grey\" , \"C\" = \"grey\" , \"D\" = \"grey\" ) # Create the plot plot <- ggplot () + geom_sf ( data = roads , alpha = 0.05 , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.1 , lwd = 1.1 ) + geom_sf ( data = layer1 , fill = \"grey\" , color = \"grey\" , size = 0.1 ) + facet_wrap ( ~ grade , nrow = 1 ) + geom_sf ( data = final_selected_polygons , fill = \"green\" , color = \"green\" , size = 0.1 ) + facet_wrap ( ~ grade , nrow = 1 ) + #scale_fill_manual(values = grade_colors) + #scale_color_manual(values = grade_colors) + theme_minimal () + labs ( fill = 'HOLC Grade' ) + theme_tufte () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"none\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot as a high-resolution PNG file ggsave ( output_file , plot , width = 10 , height = 4 , units = \"in\" , dpi = 1200 ) # Return the plot for optional further use return ( list ( plot = plot , sf = final_selected_polygons )) } FUNCTION: Create word cloud per grade create_wordclouds_by_grade <- function ( sf_object , output_file = \"food_word_cloud_per_grade.png\" , title = \"Healthy food place names word cloud\" , max_size = 25 , col_select = \"name\" ) { # Extract relevant data and prepare text data text_data <- sf_object %>% select ( grade , col_select ) %>% filter ( ! is.na ( col_select )) %>% unnest_tokens ( output = \"word\" , input = col_select , token = \"words\" ) %>% count ( grade , word , sort = TRUE ) %>% ungroup () %>% filter ( n () > 1 ) # Filter to remove overly common or single-occurrence words # Ensure there are no NA values in the 'word' column text_data <- text_data %>% filter ( ! is.na ( word )) # Handle cases where text_data might be empty if ( nrow ( text_data ) == 0 ) { stop ( \"No data available for creating word clouds.\" ) } # Create a word cloud using ggplot2 and ggwordcloud p <- ggplot ( ) + geom_text_wordcloud_area ( data = text_data , aes ( label = word , size = n ), rm_outside = TRUE ) + scale_size_area ( max_size = max_size ) + facet_wrap ( ~ grade , nrow = 1 ) + scale_color_gradient ( low = \"darkred\" , high = \"red\" ) + theme_minimal () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), panel.spacing = unit ( 0.5 , \"lines\" ), plot.title = element_text ( size = 16 , face = \"bold\" ), legend.position = \"none\" ) + labs ( title = title ) # Attempt to save the plot and handle any errors tryCatch ({ ggsave ( output_file , p , width = 10 , height = 4 , units = \"in\" , dpi = 600 ) }, error = function ( e ) { cat ( \"Error in saving the plot: \" , e $ message , \"\\n\" ) }) return ( p ) } Map food over each grade individually layer1 <- denver_redlining layer2 <- food food_match <- process_and_plot_sf_layers ( layer1 , layer2 , \"food_match.png\" ) WORD CLOUD: Names of places with fresh food food_word_cloud <- create_wordclouds_by_grade ( food_match $ sf , output_file = \"food_word_cloud_per_grade.png\" ) Warning: Using an external vector in selections was deprecated in tidyselect 1.1.0. \u2139 Please use `all_of()` or `any_of()` instead. # Was: data %>% select(col_select) # Now: data %>% select(all_of(col_select)) See . Warning in wordcloud_boxes(data_points = points_valid_first, boxes = boxes, : Some words could not fit on page. They have been removed. Map processed food over each grade individually layer1 <- denver_redlining layer2 <- food_processed processed_food_match <- process_and_plot_sf_layers ( layer1 , layer2 , \"processed_food_match.png\" ) WORD CLOUD: Names of places with processed food processed_food_cloud <- create_wordclouds_by_grade ( processed_food_match $ sf , output_file = \"processed_food_word_cloud_per_grade.png\" , title = \"Processed food place names where larger text is more frequent\" , max_size = 17 )","title":"Analysis Methodology"},{"location":"worksheet_redlining/#part-2-integrating-environmental-data","text":"","title":"Part 2: Integrating Environmental Data"},{"location":"worksheet_redlining/#data-processing","text":"Use satellite data from 2010 to analyze greenspace using NDVI, an index that measures the quantity of vegetation in an area. Apply methods to adjust for potential confounders as described in the study, ensuring that comparisons of greenspace across HOLC grades are valid and not biased by historical or socio-demographic factors. Map natural habitats over each grade individually layer1 <- denver_redlining layer2 <- natural_habitats natural_habitats_match <- process_and_plot_sf_layers ( layer1 , layer2 , \"natural_habitats_match.png\" ) print ( natural_habitats_match $ plot ) ![](worksheet_redlining_files/figure-gfm/unnamed-chunk-18-1.png) WORD CLOUD: Name of natural habitat area natural_habitats_cloud <- create_wordclouds_by_grade ( natural_habitats_match $ sf , output_file = \"natural_habitats_word_cloud_per_grade.png\" , title = \"Natural habitats place names where larger text is more frequent\" , max_size = 35 ) FUNCTION: Stream NDVI data polygon_layer <- denver_redlining # Function to process satellite data based on an SF polygon's extent process_satellite_data <- function ( polygon_layer , start_date , end_date , assets , fps = 1 , output_file = \"anim.gif\" ) { # Record start time start_time <- Sys.time () # Calculate the bbox from the polygon layer bbox <- st_bbox ( polygon_layer ) s = stac ( \"https://earth-search.aws.element84.com/v0\" ) # Use stacR to search for Sentinel-2 images within the bbox and date range items = s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( bbox [ \"xmin\" ], bbox [ \"ymin\" ], bbox [ \"xmax\" ], bbox [ \"ymax\" ]), datetime = paste ( start_date , end_date , sep = \"/\" ), limit = 500 ) %>% post_request () # Define mask for Sentinel-2 image quality #S2.mask <- image_mask(\"SCL\", values = c(3, 8, 9)) # Create a collection of images filtering by cloud cover col <- stac_image_collection ( items $ features , asset_names = assets , property_filter = function ( x ) { x [[ \"eo:cloud_cover\" ]] < 30 }) # Define a view for processing the data v <- cube_view ( srs = \"EPSG:4326\" , extent = list ( t0 = start_date , t1 = end_date , left = bbox [ \"xmin\" ], right = bbox [ \"xmax\" ], top = bbox [ \"ymax\" ], bottom = bbox [ \"ymin\" ]), dx = 0.001 , dy = 0.001 , dt = \"P1M\" , aggregation = \"median\" , resampling = \"bilinear\" ) # Calculate NDVI and create an animation ndvi_col <- function ( n ) { rev ( sequential_hcl ( n , \"Green-Yellow\" )) } #raster_cube(col, v, mask = S2.mask) %>% raster_cube ( col , v ) %>% select_bands ( c ( \"B04\" , \"B08\" )) %>% apply_pixel ( \"(B08-B04)/(B08+B04)\" , \"NDVI\" ) %>% gdalcubes :: animate ( col = ndvi_col , zlim = c ( -0.2 , 1 ), key.pos = 1 , save_as = output_file , fps = fps ) # Calculate processing time end_time <- Sys.time () processing_time <- difftime ( end_time , start_time ) # Return processing time return ( processing_time ) } Stream NDVI data: animation processing_time <- process_satellite_data ( denver_redlining , \"2022-05-31\" , \"2023-05-31\" , c ( \"B04\" , \"B08\" )) FUNCTION: Stream year average NDVI yearly_average_ndvi <- function ( polygon_layer , output_file = \"ndvi.png\" , dx = 0.01 , dy = 0.01 ) { # Record start time start_time <- Sys.time () # Calculate the bbox from the polygon layer bbox <- st_bbox ( polygon_layer ) s = stac ( \"https://earth-search.aws.element84.com/v0\" ) # Search for Sentinel-2 images within the bbox for June items <- s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( bbox [ \"xmin\" ], bbox [ \"ymin\" ], bbox [ \"xmax\" ], bbox [ \"ymax\" ]), datetime = \"2023-01-01/2023-12-31\" , limit = 500 ) %>% post_request () # Create a collection of images filtering by cloud cover col <- stac_image_collection ( items $ features , asset_names = c ( \"B04\" , \"B08\" ), property_filter = function ( x ) { x [[ \"eo:cloud_cover\" ]] < 80 }) # Define a view for processing the data specifically for June v <- cube_view ( srs = \"EPSG:4326\" , extent = list ( t0 = \"2023-01-01\" , t1 = \"2023-12-31\" , left = bbox [ \"xmin\" ], right = bbox [ \"xmax\" ], top = bbox [ \"ymax\" ], bottom = bbox [ \"ymin\" ]), dx = dx , dy = dy , dt = \"P1Y\" , aggregation = \"median\" , resampling = \"bilinear\" ) # Process NDVI ndvi_rast <- raster_cube ( col , v ) %>% select_bands ( c ( \"B04\" , \"B08\" )) %>% apply_pixel ( \"(B08-B04)/(B08+B04)\" , \"NDVI\" ) %>% write_tif () |> terra :: rast () # Convert terra Raster to ggplot using tidyterra ndvi_plot <- ggplot () + geom_spatraster ( data = ndvi_rast , aes ( fill = NDVI )) + scale_fill_viridis_c ( option = \"viridis\" , direction = -1 , name = \"NDVI\" ) + labs ( title = \"NDVI mean for 2023\" ) + theme_minimal () + coord_sf () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"right\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot as a high-resolution PNG file ggsave ( output_file , ndvi_plot , width = 10 , height = 8 , dpi = 600 ) # Calculate processing time end_time <- Sys.time () processing_time <- difftime ( end_time , start_time ) # Return the plot and processing time return ( list ( plot = ndvi_plot , processing_time = processing_time , raster = ndvi_rast )) } Stream NDVI: high resolution ndvi_background <- yearly_average_ndvi ( denver_redlining , dx = 0.0001 , dy = 0.0001 ) FUNCTION: Map NDVI per HOLC grade individually create_mask_and_plot <- function ( redlining_sf , background_raster = ndvi $ raster , roads = NULL , rivers = NULL ){ start_time <- Sys.time () # Start timing # Validate and prepare the redlining data redlining_sf <- redlining_sf %>% filter ( grade != \"\" ) %>% st_make_valid () bbox <- st_bbox ( redlining_sf ) # Get original bounding box expanded_bbox <- expand_bbox ( bbox , 6000 , 1000 ) # expanded_bbox_poly <- st_as_sfc ( expanded_bbox , crs = st_crs ( redlining_sf )) %>% st_make_valid () # Initialize an empty list to store masks masks <- list () # Iterate over each grade to create masks unique_grades <- unique ( redlining_sf $ grade ) for ( grade in unique_grades ) { # Filter polygons by grade grade_polygons <- redlining_sf [ redlining_sf $ grade == grade , ] # Create an \"inverted\" mask by subtracting these polygons from the background mask <- st_difference ( expanded_bbox_poly , st_union ( grade_polygons )) # Store the mask in the list with the grade as the name masks [[ grade ]] <- st_sf ( geometry = mask , grade = grade ) } # Combine all masks into a single sf object mask_sf <- do.call ( rbind , masks ) # Normalize the grades so that C.2 becomes C, but correctly handle other grades mask_sf $ grade <- ifelse ( mask_sf $ grade == \"C.2\" , \"C\" , mask_sf $ grade ) # Prepare the plot plot <- ggplot () + geom_spatraster ( data = background_raster , aes ( fill = NDVI )) + scale_fill_viridis_c ( name = \"NDVI\" , option = \"viridis\" , direction = -1 ) + geom_sf ( data = mask_sf , aes ( color = grade ), fill = \"white\" , size = 0.1 , show.legend = FALSE ) + scale_color_manual ( values = c ( \"A\" = \"white\" , \"B\" = \"white\" , \"C\" = \"white\" , \"D\" = \"white\" ), name = \"Grade\" ) + facet_wrap ( ~ grade , nrow = 1 ) + geom_sf ( data = roads , alpha = 1 , lwd = 0.1 , color = \"white\" ) + geom_sf ( data = rivers , color = \"white\" , alpha = 0.5 , lwd = 1.1 ) + labs ( title = \"NDVI: Normalized Difference Vegetation Index\" ) + theme_minimal () + coord_sf ( xlim = c ( bbox [ \"xmin\" ], bbox [ \"xmax\" ]), ylim = c ( bbox [ \"ymin\" ], bbox [ \"ymax\" ]), expand = FALSE ) + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"bottom\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot ggsave ( \"redlining_mask_ndvi.png\" , plot , width = 10 , height = 4 , dpi = 600 ) end_time <- Sys.time () # End timing runtime <- end_time - start_time # Return the plot and runtime return ( list ( plot = plot , runtime = runtime , mask_sf = mask_sf )) } Stream NDVI: low resolution ndvi_background_low <- yearly_average_ndvi ( denver_redlining ) Map low resolution NDVI per HOLC grade ndvi <- create_mask_and_plot ( denver_redlining , background_raster = ndvi_background_low $ raster , roads = roads , rivers = rivers ) FUNCTION: Map Denver City provided data per HOLC grade process_city_inventory_data <- function ( address , inner_file , polygon_layer , output_filename , variable_label = 'Tree Density' ) { # Download and read the shapefile full_path <- glue ( \"/vsizip/vsicurl/{address}/{inner_file}\" ) shape_data <- st_read ( full_path , quiet = TRUE ) |> st_as_sf () # Process the shape data with the provided polygon layer processed_data <- process_and_plot_sf_layers ( polygon_layer , shape_data , paste0 ( output_filename , \".png\" )) # Extract trees from the processed data trees <- processed_data $ sf denver_redlining_residential <- polygon_layer |> filter ( grade != \"\" ) # Generate the density plot plot <- ggplot () + geom_sf ( data = roads , alpha = 0.05 , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.1 , lwd = 1.1 ) + geom_sf ( data = denver_redlining_residential , fill = \"grey\" , color = \"grey\" , size = 0.1 ) + facet_wrap ( ~ grade , nrow = 1 ) + stat_density_2d ( data = trees , mapping = aes ( x = map_dbl ( geometry , ~ . [ 1 ]), y = map_dbl ( geometry , ~ . [ 2 ]), fill = stat ( density )), geom = 'tile' , contour = FALSE , alpha = 0.9 ) + scale_fill_gradientn ( colors = c ( \"transparent\" , \"white\" , \"limegreen\" ), values = scales :: rescale ( c ( 0 , 0.1 , 1 )), # Adjust these based on your density range guide = \"colourbar\" ) + theme_minimal () + labs ( fill = variable_label ) + theme_tufte () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"bottom\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot ggsave ( paste0 ( output_filename , \"_density_plot.png\" ), plot , width = 10 , height = 4 , units = \"in\" , dpi = 600 ) # Return the plot and the tree layer return ( list ( plot = plot , layer = trees )) } Map tree inventory per HOLC grade result <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/tree_inventory/shape/tree_inventory.zip\" , \"tree_inventory.shp\" , denver_redlining , \"Denver_tree_inventory_2023\" ) Warning: `stat(density)` was deprecated in ggplot2 3.4.0. \u2139 Please use `after_stat(density)` instead. Map traffic accidents per HOLC grade result <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/traffic_accidents/shape/traffic_accidents.zip\" , \"traffic_accidents.shp\" , denver_redlining , \"Denver_traffic_accidents\" , variable_label = 'Traffic accidents density' ) Map stream sampling effort per HOLC grade instream_sampling_sites <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/instream_sampling_sites/shape/instream_sampling_sites.zip\" , \"instream_sampling_sites.shp\" , denver_redlining , \"instream_sampling_sites\" , variable_label = 'Instream sampling sites density' ) Map soil sampling effort per HOLC grade soil_samples <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/soil_samples/shape/soil_samples.zip\" , \"soil_samples.shp\" , denver_redlining , \"Soil samples\" , variable_label = 'soil samples density' ) Map public art density per HOLC grade public_art <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/public_art/shape/public_art.zip\" , \"public_art.shp\" , denver_redlining , \"Public art \" , variable_label = 'Public art density' ) Map liquor licenses density per HOLC grade liquor_licenses <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/liquor_licenses/shape/liquor_licenses.zip\" , \"liquor_licenses.shp\" , denver_redlining , \"liquor licenses \" , variable_label = 'liquor licenses density' ) Map crime density per HOLC grade Crime <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/crime/shape/crime.zip\" , \"crime.shp\" , denver_redlining , \"crime\" , variable_label = 'Crime density' ) WORD CLOUD: Types of crimes crime_cloud <- create_wordclouds_by_grade ( Crime $ layer , output_file = \"Crime_word_cloud_per_grade.png\" , title = \"Crime type where larger text is more frequent\" , max_size = 25 , col_select = \"OFFENSE_TY\" ) Warning: Using an external vector in selections was deprecated in tidyselect 1.1.0. \u2139 Please use `all_of()` or `any_of()` instead. # Was: data %>% select(col_select) # Now: data %>% select(all_of(col_select)) See . Map police shooting density per HOLC grade Denver_police_shootings <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/denver_police_officer_involved_shootings/shape/denver_police_officer_involved_shootings.zip\" , \"denver_police_officer_involved_shootings.shp\" , denver_redlining , \"Police shootings\" , variable_label = 'Police shootings density' ) Not enough data for density across all 4 WORD CLOUD: Police involved shootings Denver_police_shootings_cloud <- create_wordclouds_by_grade ( Denver_police_shootings $ layer , output_file = \"police_shootings_word_cloud_per_grade.png\" , title = \"police involved shooting per crime type where larger text is more frequent\" , max_size = 35 , col_select = \"SHOOT_ACTI\" )","title":"Data Processing"},{"location":"worksheet_redlining/#part-3-comparative-analysis-and-visualization","text":"","title":"Part 3: Comparative Analysis and Visualization"},{"location":"worksheet_redlining/#statistical-analysis","text":"Conduct a detailed statistical analysis to compare greenspace across different HOLC grades, using techniques like Targeted Maximum Likelihood Estimation (TMLE) to assess the association between historical redlining and current greenspace levels. Visualize the disparities in greenspace distribution using GIS tools, highlighting how redlining has shaped urban ecological landscapes.","title":"Statistical Analysis"},{"location":"worksheet_redlining/#conclusion","text":"This tutorial provides tools and methodologies to explore the lingering effects of historic redlining on urban greenspace, offering insights into the intersection of urban planning, environmental justice, and public health.","title":"Conclusion"},{"location":"worksheet_redlining/#references_1","text":"Nardone, A., Rudolph, K. E., Morello-Frosch, R., & Casey, J. A. (2021). Redlines and Greenspace: The Relationship between Historical Redlining and 2010 Greenspace across the United States. Environmental Health Perspectives , 129(1), 017006. DOI:10.1289/EHP7495. Available online","title":"References"},{"location":"additional-resources/bilingualism_md/","text":"R and Python bilingualism \u00b6 Welcome to the R and Python bilingualism reference guide! If you\u2019re fluent in one of these languages but hesitant to learn the other, you\u2019re in the right place. The good news is that there are many similarities between R and Python that make it easy to switch between the two. Both R and Python are widely used in data science and are open-source, meaning that they are free to use and constantly being improved by the community. They both have extensive libraries for data analysis, visualization, and machine learning. In fact, many of the libraries in both languages have similar names and functions, such as Pandas in Python and data.table in R. While there are differences between the two languages, they can complement each other well. Python is versatile and scalable, making it ideal for large and complex projects such as web development and artificial intelligence. R, on the other hand, is known for its exceptional statistical capabilities and is often used in data analysis and modeling. Visualization is also easier in R, making it a popular choice for creating graphs and charts. By learning both R and Python, you\u2019ll be able to take advantage of the strengths of each language and create more efficient and robust data analysis workflows. Don\u2019t let the differences between the two languages intimidate you - once you become familiar with one, learning the other will be much easier. So, whether you\u2019re a Python enthusiast looking to expand your statistical analysis capabilities, or an R user interested in exploring the world of web development and artificial intelligence, this guide will help you become bilingual in R and Python. Install packages \u00b6 In R, packages can be installed from CRAN repository by using the install.packages() function: R code: # Install the dplyr package from CRAN install.packages ( \"dplyr\" ) In Python, packages can be installed from the Anaconda repository by using the conda install command: Python code: # Install the pandas package from Anaconda ! conda install pandas Loading libraries in R and Python In R, libraries can be loaded in the same way as before, using the library() function: R code: # Load the dplyr library library ( dplyr ) In Python, libraries can be loaded in the same way as before, using the import statement. Here\u2019s an example: Python code: # Load the pandas library import pandas as pd Note that the package or library must be installed from the respective repository before it can be loaded. Also, make sure you have the correct repository specified in your system before installing packages. By default, R uses CRAN as its primary repository, whereas Anaconda uses its own repository by default. reticulate \u00b6 The reticulate package lets you run both R and Python together in the R environment. R libraries are stored and managed in a repository called CRAN. You can download R packages with the install.packages() function install.packages ( \"reticulate\" ) You only need to install packages once, but you need to mount those packages with the library() function each time you open R. library ( reticulate ) Python libraries are stored and managed in a few different libraries and their dependencies are not regulated as strictly as R libraries are in CRAN. It\u2019s easier to publish a python package but it can also be more cumbersome for users because you need to manage dependencies yourself. You can download python packages using both R and Python code py_install ( \"laspy\" ) ## + '/Users/ty/opt/miniconda3/bin/conda' 'install' '--yes' '--prefix' '/Users/ty/opt/miniconda3/envs/earth-analytics-python' '-c' 'conda-forge' 'laspy' Now, let\u2019s create a Python list and assign it to a variable py_list: R code: py_list <- r_to_py ( list ( 1 , 2 , 3 )) We can now print out the py_list variable in Python using the py_run_string() function: R code: py_run_string ( \"print(r.py_list)\" ) This will output [1, 2, 3] in the Python console. Now, let\u2019s create an R vector and assign it to a variable r_vec: R code: r_vec <- c ( 4 , 5 , 6 ) We can now print out the r_vec variable in R using the py$ syntax to access Python variables: R code: print ( py $ py_list ) This will output [1, 2, 3] in the R console. We can also call Python functions from R using the py_call() function. For example, let\u2019s call the Python sum() function on the py_list variable and assign the result to an R variable r_sum: R code: r_sum <- py_call ( \"sum\" , args = list ( py_list )) We can now print out the r_sum variable in R: R code: print ( r_sum ) This will output 6 in the R console. Load packages and change settings \u00b6 options ( java.parameters = \"-Xmx5G\" ) library ( r5r ) library ( sf ) library ( data.table ) library ( ggplot2 ) library ( interp ) library ( dplyr ) library ( osmdata ) library ( ggthemes ) library ( sf ) library ( data.table ) library ( ggplot2 ) library ( akima ) library ( dplyr ) library ( raster ) library ( osmdata ) library ( mapview ) library ( cowplot ) library ( here ) library ( testthat ) import sys sys . argv . append ([ \"--max-memory\" , \"5G\" ]) import pandas as pd import geopandas import matplotlib.pyplot as plt import numpy as np import plotnine import contextily as cx import r5py import seaborn as sns R and Python are two popular programming languages used for data analysis, statistics, and machine learning. Although they share some similarities, there are some fundamental differences between them. Here\u2019s an example code snippet in R and Python to illustrate some of the differences: R Code: # Create a vector of numbers from 1 to 10 x <- 1 : 10 # Compute the mean of the vector mean_x <- mean ( x ) # Print the result print ( mean_x ) ## [1] 5.5 Python Code: # Import the numpy library for numerical operations import numpy as np # Create a numpy array of numbers from 1 to 10 x = np . array ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]) # Compute the mean of the array mean_x = np . mean ( x ) # Print the result print ( mean_x ) ## 5.5 In this example, we can see that there are several differences between R and Python: Syntax: R uses the assignment operator \\<- while Python uses the equals sign = for variable assignment. Libraries: Python relies heavily on external libraries such as numpy, pandas, and matplotlib for data analysis, while R has built-in functions for many data analysis tasks. Data types: R is designed to work with vectors and matrices, while Python uses lists and arrays. In the example above, we used the numpy library to create a numerical array in Python. Function names: Function names in R and Python can differ significantly. In the example above, we used the mean() function in R and the np.mean() function in Python to calculate the mean of the vector/array. These are just a few of the many differences between R and Python. Ultimately, the choice between the two languages will depend on your specific needs and preferences. Load saved data \u00b6 R Code: data ( \"iris\" ) here () load ( file = here ( \"2_R_and_Py_bilingualism\" , \"data\" , \"iris_example_data.rdata\" )) objects () Python code: Save data \u00b6 R Code: save ( iris , file = here ( \"2_R_and_Py_bilingualism\" , \"data\" , \"iris_example_data.rdata\" )) write.csv ( iris , file = here ( \"2_R_and_Py_bilingualism\" , \"data\" , \"iris_example_data.csv\" )) Python code: functions \u00b6 Both R and Python are powerful languages for writing functions that can take input, perform a specific task, and return output. R Code: # Define a function that takes two arguments and returns their sum sum_r <- function ( a , b ) { return ( a + b ) } # Call the function with two arguments and print the result result_r <- sum_r ( 3 , 5 ) print ( result_r ) ## [1] 8 Python code: # Define a function that takes two arguments and returns their sum def sum_py ( a , b ): return a + b # Call the function with two arguments and print the result result_py = sum_py ( 3 , 5 ) print ( result_py ) ## 8 In both cases, we define a function that takes two arguments and returns their sum. In R, we use the function keyword to define a function, while in Python, we use the def keyword. The function body in R is enclosed in curly braces, while in Python it is indented. There are a few differences in the syntax and functionality between the two approaches: Function arguments: In R, function arguments are separated by commas, while in Python they are enclosed in parentheses. The syntax for specifying default arguments and variable-length argument lists can also differ between the two languages. Return statement: In R, we use the return keyword to specify the return value of a function, while in Python, we simply use the return statement. Function names: Function names in R and Python can differ significantly. In the example above, we used the sum_r() function in R and the sum_py() function in Python to calculate the sum of two numbers. Data Plots \u00b6 R Code: # Load the \"ggplot2\" package for plotting library ( ggplot2 ) # Generate some sample data x <- seq ( 1 , 10 , 1 ) y <- x + rnorm ( 10 ) # Create a scatter plot ggplot ( data.frame ( x , y ), aes ( x = x , y = y )) + geom_point () Python code: # Load the \"matplotlib\" library import matplotlib.pyplot as plt # Generate some sample data import numpy as np x = np . arange ( 1 , 11 ) y = x + np . random . normal ( 0 , 1 , 10 ) #clear last plot plt . clf () # Create a scatter plot plt . scatter ( x , y ) plt . show () In both cases, we generate some sample data and create a scatter plot to visualize the relationship between the variables. There are a few differences in the syntax and functionality between the two approaches: Library and package names: In R, we use the ggplot2 package for plotting, while in Python, we use the matplotlib library. Data format: In R, we use a data frame to store the input data, while in Python, we use numpy arrays. Plotting functions: In R, we use the ggplot() function to create a new plot object, and then use the geom_point() function to create a scatter plot layer. In Python, we use the scatter() function from the matplotlib.pyplot module to create a scatter plot directly. Linear regression \u00b6 R Code: # Load the \"ggplot2\" package for plotting library ( ggplot2 ) # Generate some sample data x <- seq ( 1 , 10 , 1 ) y <- x + rnorm ( 10 ) # Perform linear regression model_r <- lm ( y ~ x ) # Print the model summary summary ( model_r ) ## ## Call: ## lm(formula = y ~ x) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.69344 -0.42336 0.08961 0.34778 1.56728 ## ## Coefficients: ## Estimate Std. Error t value Pr(>|t|) ## (Intercept) -0.1676 0.6781 -0.247 0.811 ## x 0.9750 0.1093 8.921 1.98e-05 *** ## --- ## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ## ## Residual standard error: 0.9926 on 8 degrees of freedom ## Multiple R-squared: 0.9087, Adjusted R-squared: 0.8972 ## F-statistic: 79.59 on 1 and 8 DF, p-value: 1.976e-05 # Plot the data and regression line ggplot ( data.frame ( x , y ), aes ( x = x , y = y )) + geom_point () + geom_smooth ( method = \"lm\" , se = FALSE ) ## `geom_smooth()` using formula = 'y ~ x' Python code: # Load the \"matplotlib\" and \"scikit-learn\" libraries import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression # Generate some sample data import numpy as np x = np . arange ( 1 , 11 ) y = x + np . random . normal ( 0 , 1 , 10 ) # Perform linear regression model_py = LinearRegression () . fit ( x . reshape ( - 1 , 1 ), y ) # Print the model coefficients print ( \"Coefficients: \" , model_py . coef_ ) ## Coefficients: [1.15539692] print ( \"Intercept: \" , model_py . intercept_ ) #clear last plot ## Intercept: -1.1291396173221218 plt . clf () # Plot the data and regression line plt . scatter ( x , y ) plt . plot ( x , model_py . predict ( x . reshape ( - 1 , 1 )), color = 'red' ) plt . show () In both cases, we generate some sample data with a linear relationship between x and y, and then perform a simple linear regression to estimate the slope and intercept of the line. We then plot the data and regression line to visualize the fit. There are a few differences in the syntax and functionality between the two approaches: Library and package names: In R, we use the lm() function from the base package to perform linear regression, while in Python, we use the LinearRegression() class from the scikit-learn library. Additionally, we use the ggplot2 package in R for plotting, while we use the matplotlib library in Python. Data format: In R, we can specify the dependent and independent variables in the formula used for regression. In Python, we need to reshape the input data to a two-dimensional array before fitting the model. Model summary: In R, we can use the summary() function to print a summary of the model, including the estimated coefficients, standard errors, and p-values. In Python, we need to print the coefficients and intercept separately. Random Forest \u00b6 R Code: # Load the \"randomForest\" package library ( randomForest ) # Load the \"iris\" dataset data ( iris ) # Split the data into training and testing sets set.seed ( 123 ) train_idx <- sample ( 1 : nrow ( iris ), nrow ( iris ) * 0.7 , replace = FALSE ) train_data <- iris [ train_idx , ] test_data <- iris [ - train_idx , ] # Build a random forest model rf_model <- randomForest ( Species ~ . , data = train_data , ntree = 500 ) # Make predictions on the testing set predictions <- predict ( rf_model , test_data ) # Calculate accuracy of the model accuracy <- sum ( predictions == test_data $ Species ) / nrow ( test_data ) print ( paste ( \"Accuracy:\" , accuracy )) ## [1] \"Accuracy: 0.977777777777778\" Python code: # Load the \"pandas\", \"numpy\", and \"sklearn\" libraries import pandas as pd import numpy as np from sklearn.ensemble import RandomForestClassifier from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split # Load the \"iris\" dataset iris = load_iris () # Split the data into training and testing sets X_train , X_test , y_train , y_test = train_test_split ( iris . data , iris . target , test_size = 0.3 , random_state = 123 ) # Build a random forest model rf_model = RandomForestClassifier ( n_estimators = 500 , random_state = 123 ) rf_model . fit ( X_train , y_train ) # Make predictions on the testing set ## RandomForestClassifier(n_estimators=500, random_state=123) predictions = rf_model . predict ( X_test ) # Calculate accuracy of the model accuracy = sum ( predictions == y_test ) / len ( y_test ) print ( \"Accuracy:\" , accuracy ) ## Accuracy: 0.9555555555555556 In both cases, we load the iris dataset and split it into training and testing sets. We then build a random forest model using the training data and evaluate its accuracy on the testing data. There are a few differences in the syntax and functionality between the two approaches: Library and package names: In R, we use the randomForest package to build random forest models, while in Python, we use the RandomForestClassifier class from the sklearn.ensemble module. We also use different libraries for loading and manipulating data (pandas and numpy in Python, and built-in datasets in R). Model parameters: The syntax for setting model parameters is slightly different in R and Python. For example, in R, we specify the number of trees using the ntree parameter, while in Python, we use the n_estimators parameter. Data format: In R, we use a data frame to store the input data, while in Python, we use numpy arrays. Basic streetmap from Open Street Map \u00b6 R Code: # Load the \"osmdata\" package for mapping library ( osmdata ) library ( tmap ) # Define the map location and zoom level bbox <- c ( left = -0.16 , bottom = 51.49 , right = -0.13 , top = 51.51 ) # Get the OpenStreetMap data osm_data <- opq ( bbox ) %>% add_osm_feature ( key = \"highway\" ) %>% osmdata_sf () # Plot the map using tmap tm_shape ( osm_data $ osm_lines ) + tm_lines () Python code: # Load the \"osmnx\" package for mapping import osmnx as ox # Define the map location and zoom level bbox = ( 51.49 , - 0.16 , 51.51 , - 0.13 ) # Get the OpenStreetMap data osm_data = ox . graph_from_bbox ( north = bbox [ 2 ], south = bbox [ 0 ], east = bbox [ 3 ], west = bbox [ 1 ], network_type = 'all' ) # Plot the map using osmnx ox . plot_graph ( osm_data ) ## (<Figure size 1600x1600 with 0 Axes>, <AxesSubplot:>) In both cases, we define the map location and zoom level, retrieve the OpenStreetMap data using the specified bounding box, and plot the map. The main differences between the two approaches are: Package names and syntax: In R, we use the osmdata package and its syntax to download and process the OpenStreetMap data, while in Python, we use the osmnx package and its syntax. Mapping libraries: In R, we use the tmap package to create a static map of the OpenStreetMap data, while in Python, we use the built-in ox.plot_graph function from the osmnx package to plot the map. CNN on Raster data \u00b6 R Code: # Load the \"keras\" package for building the CNN library ( tensorflow ) library ( keras ) # Load the \"raster\" package for working with raster data library ( raster ) # Load the \"magrittr\" package for pipe operator library ( magrittr ) # Load the data as a raster brick raster_data <- brick ( \"raster_data.tif\" ) # Split the data into training and testing sets split_data <- sample ( 1 : nlayers ( raster_data ), size = nlayers ( raster_data ) * 0.8 , replace = FALSE ) train_data <- raster_data [[ split_data ]] test_data <- raster_data [[ setdiff ( 1 : nlayers ( raster_data ), split_data )]] # Define the CNN model model <- keras_model_sequential () %>% layer_conv_2d ( filters = 32 , kernel_size = c ( 3 , 3 ), activation = \"relu\" , input_shape = c ( ncol ( train_data ), nrow ( train_data ), ncell ( train_data ))) %>% layer_max_pooling_2d ( pool_size = c ( 2 , 2 )) %>% layer_dropout ( rate = 0.25 ) %>% layer_flatten () %>% layer_dense ( units = 128 , activation = \"relu\" ) %>% layer_dropout ( rate = 0.5 ) %>% layer_dense ( units = nlayers ( train_data ), activation = \"softmax\" ) # Compile the model model %>% compile ( loss = \"categorical_crossentropy\" , optimizer = \"adam\" , metrics = \"accuracy\" ) # Train the model history <- model %>% fit ( x = array ( train_data ), y = to_categorical ( 1 : nlayers ( train_data )), epochs = 10 , validation_split = 0.2 ) # Evaluate the model model %>% evaluate ( x = array ( test_data ), y = to_categorical ( 1 : nlayers ( test_data ))) # Plot the model accuracy over time plot ( history ) Piping \u00b6 Piping is a powerful feature in both R and Python that allows for a more streamlined and readable code. However, the syntax for piping is slightly different between the two languages. In R, piping is done using the %>% operator from the magrittr package, while in Python, it is done using the | operator from the pandas package. Let\u2019s compare and contrast piping in R and Python with some examples: Piping in R In R, we can use the %>% operator to pipe output from one function to another, which can make our code more readable and easier to follow. Here\u2019s an example: R code: library ( dplyr ) # create a data frame df <- data.frame ( x = c ( 1 , 2 , 3 ), y = c ( 4 , 5 , 6 )) # calculate the sum of column x and y df %>% mutate ( z = x + y ) %>% summarize ( sum_z = sum ( z )) ## sum_z ## 1 21 In this example, we first create a data frame df with two columns x and y. We then pipe the output of df to mutate, which adds a new column z to the data frame that is the sum of x and y. Finally, we pipe the output to summarize, which calculates the sum of z and returns the result. Piping in Python In Python, we can use the | operator to pipe output from one function to another. However, instead of piping output from one function to another, we pipe a DataFrame to a method of the DataFrame. Here\u2019s an example: Python code: import pandas as pd # create a DataFrame df = pd . DataFrame ({ 'x' : [ 1 , 2 , 3 ], 'y' : [ 4 , 5 , 6 ]}) # calculate the sum of column x and y ( df . assign ( z = df [ 'x' ] + df [ 'y' ]) . agg ( sum_z = ( 'z' , 'sum' ))) ## z ## sum_z 21 In this example, we first create a DataFrame df with two columns x and y. We then use the assign() method to add a new column z to the DataFrame that is the sum of x and y. Finally, we use the agg() method to calculate the sum of z and return the result. As we can see, the syntax for piping is slightly different between R and Python, but the concept remains the same. Piping can make our code more readable and easier to follow, which is an important aspect of creating efficient and effective code. R code: library ( dplyr ) library ( ggplot2 ) iris %>% filter ( Species == \"setosa\" ) %>% group_by ( Sepal.Width ) %>% summarise ( mean.Petal.Length = mean ( Petal.Length )) %>% mutate ( Sepal.Width = as.factor ( Sepal.Width )) %>% ggplot ( aes ( x = Sepal.Width , y = mean.Petal.Length )) + geom_bar ( stat = \"identity\" , fill = \"dodgerblue\" ) + labs ( title = \"Mean Petal Length of Setosa by Sepal Width\" , x = \"Sepal Width\" , y = \"Mean Petal Length\" ) In this example, we start with the iris dataset and filter it to only include rows where the Species column is \u201csetosa\u201d. We then group the remaining rows by the Sepal.Width column and calculate the mean Petal.Length for each group. Next, we convert Sepal.Width to a factor variable to ensure that it is treated as a categorical variable in the visualization. Finally, we create a bar plot using ggplot2, with Sepal.Width on the x-axis and mean.Petal.Length on the y-axis. The resulting plot shows the mean petal length of setosa flowers for each sepal width category. Python code: import pandas as pd # Load the iris dataset and pipe it into the next function ( pd . read_csv ( \"https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data\" , header = None , names = [ 'sepal_length' , 'sepal_width' , 'petal_length' , 'petal_width' , 'class' ]) # Select columns and pivot the dataset . loc [:, [ 'sepal_length' , 'sepal_width' , 'petal_length' ]] . melt ( var_name = 'variable' , value_name = 'value' ) # Group by variable and calculate mean . groupby ( 'variable' , as_index = False ) . mean () # Filter for mean greater than 3.5 and sort by descending mean . query ( 'value > 3.5' ) . sort_values ( 'value' , ascending = False ) ) ## variable value ## 1 sepal_length 5.843333 ## 0 petal_length 3.758667 for loops \u00b6 Here is an example of a for loop in R: R code # Create a vector of numbers numbers <- c ( 1 , 2 , 3 , 4 , 5 ) # Use a for loop to print out each number in the vector for ( i in numbers ) { print ( i ) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 In this example, the for loop iterates over each element in the numbers vector, assigning the current element to the variable i. The print(i) statement is then executed for each iteration, outputting the value of i. Here is the equivalent example in Python: Python code # Create a list of numbers numbers = [ 1 , 2 , 3 , 4 , 5 ] # Use a for loop to print out each number in the list for i in numbers : print ( i ) ## 1 ## 2 ## 3 ## 4 ## 5 In Python, the for loop iterates over each element in the numbers list, assigning the current element to the variable i. The print(i) statement is then executed for each iteration, outputting the value of i. Both languages also support nested for loops, which can be used to perform iterations over multiple dimensions, such as looping through a 2D array. Parallel \u00b6 Parallel computing is a technique used to execute multiple computational tasks simultaneously, which can significantly reduce the time required to complete a task. Both R and Python have built-in support for parallel computing, although the approaches are slightly different. In this answer, we will compare and contrast the parallel computing capabilities of R and Python, and provide working examples in code. Parallel computing in R In R, there are several packages that support parallel computing, such as parallel, foreach, and doParallel. The parallel package provides basic functionality for parallel computing, while foreach and doParallel provide higher-level abstractions that make it easier to write parallel code. Here is an example of using the foreach package to execute a loop in parallel: R code: library ( foreach ) library ( doParallel ) # Set up a parallel backend with 4 workers cl <- makeCluster ( 4 ) registerDoParallel ( cl ) # Define a function to apply in parallel myfunc <- function ( x ) { # some computation here return ( x ^ 2 ) } # Generate some data mydata <- 1 : 1000 # Apply the function to the data in parallel result <- foreach ( i = mydata ) %dopar% { myfunc ( i ) } # Stop the cluster stopCluster ( cl ) In this example, we use the makeCluster() function to set up a cluster with 4 workers, and the registerDoParallel() function to register the cluster as the parallel backend for foreach. We then define a function myfunc() that takes an input x and returns x^2. We generate some data mydata and use foreach to apply myfunc() to each element of mydata in parallel, using the %dopar% operator. R Tidyverse parallel In R Tidyverse, we can use the furrr package for parallel computing. Here\u2019s an example of using furrr to parallelize a map function: R Tidy code: library ( tidyverse ) library ( furrr ) # Generate a list of numbers numbers <- 1 : 10 # Use the future_map function from furrr to parallelize the map function plan ( multisession ) squares <- future_map ( numbers , function ( x ) x ^ 2 ) In this example, we first load the Tidyverse and furrr libraries. We then generate a list of numbers from 1 to 10. We then use the plan function to set the parallelization strategy to \u201cmultisession\u201d, which will use multiple CPU cores to execute the code. Finally, we use the future_map function from furrr to apply the function x^2 to each number in the list in parallel. Parallel computing in Python In Python, the standard library includes the multiprocessing module, which provides basic support for parallel computing. Additionally, there are several third-party packages that provide higher-level abstractions, such as joblib and dask. Here is an example of using the multiprocessing module to execute a loop in parallel: Python code: def square ( x ): return x ** 2 from multiprocessing import Pool # Generate a list of numbers numbers = list ( range ( 1 , 11 )) # Use the map function and a pool of workers to parallelize the square function with Pool () as pool : squares = pool . map ( square , numbers ) print ( squares ) In this example, we define a function myfunc() that takes an input x and returns x^2. We generate some data mydata and use the Pool class from the multiprocessing module to set up a pool of 4 workers. We then use the map() method of the Pool class to apply myfunc() to each element of mydata in parallel. Comparison and contrast Both R and Python have built-in support for parallel computing, with similar basic functionality for creating and managing parallel processes. However, the higher-level abstractions differ between the two languages. In R, the foreach package provides a high-level interface that makes it easy to write parallel code, while in Python, the multiprocessing module provides a basic interface that can be extended using third-party packages like joblib and dask. Additionally, Python has better support for distributed computing using frameworks like Apache Spark, while R has better support for shared-memory parallelism using tools like data.table and ff. Data wrangling \u00b6 Data wrangling is an important part of any data analysis project, and both R and Python provide tools and libraries for performing this task. In this answer, we will compare and contrast data wrangling in R\u2019s tidyverse and Python\u2019s pandas library, with working examples in code. Data Wrangling in R Tidyverse The tidyverse is a collection of R packages designed for data science, and it includes several packages that are useful for data wrangling. One of the most popular packages is dplyr, which provides a grammar of data manipulation for data frames. Here is an example of using dplyr to filter, mutate, and summarize a data frame: R code library ( dplyr ) # Load data data ( mtcars ) # Filter for cars with more than 100 horsepower mtcars %>% filter ( hp > 100 ) %>% # Add a new column with fuel efficiency in km per liter mutate ( kmpl = 0.425 * mpg ) %>% # Group by number of cylinders and summarize group_by ( cyl ) %>% summarize ( mean_hp = mean ( hp ), mean_kmpl = mean ( kmpl )) ## # A tibble: 3 \u00d7 3 ## cyl mean_hp mean_kmpl ## <dbl> <dbl> <dbl> ## 1 4 111 11.0 ## 2 6 122. 8.39 ## 3 8 209. 6.42 In this example, we first filter the mtcars data frame to only include cars with more than 100 horsepower. We then use mutate to create a new column with fuel efficiency in kilometers per liter. Finally, we group the data by the number of cylinders and calculate the mean horsepower and fuel efficiency. Data Wrangling in Python Pandas Pandas is a popular library for data manipulation in Python. It provides a data frame object similar to R\u2019s data frames, along with a wide range of functions for data wrangling. Here is an example of using pandas to filter, transform, and group a data frame: Python code: import pandas as pd # Load data mtcars = pd . read_csv ( 'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/mtcars.csv' ) # Filter for cars with more than 100 horsepower filtered_mtcars = mtcars [ mtcars [ 'hp' ] > 100 ] # Add a new column with fuel efficiency in km per liter filtered_mtcars [ 'kmpl' ] = 0.425 * filtered_mtcars [ 'mpg' ] # Group by number of cylinders and calculate mean horsepower and fuel efficiency grouped_mtcars = filtered_mtcars . groupby ( 'cyl' ) . agg ({ 'hp' : 'mean' , 'kmpl' : 'mean' }) In this example, we first load the mtcars data from a CSV file. We then filter the data to only include cars with more than 100 horsepower, using boolean indexing. We use the assign function to create a new column with fuel efficiency in kilometers per liter. Finally, we group the data by the number of cylinders and calculate the mean horsepower and fuel efficiency. Comparison Overall, both R\u2019s tidyverse and Python\u2019s pandas provide similar functionality for data wrangling. Both allow for filtering, transforming, and aggregating data frames. The syntax for performing these operations is slightly different between the two languages, with R using the %>% operator for chaining operations and Python using method chaining or the apply family of functions. One key difference between the two languages is that R\u2019s tidyverse provides a consistent grammar for data manipulation across its various packages, making it easier to learn and use. However, Python\u2019s pandas library has a larger developer community and is more versatile for use in other applications, such as web development or machine learning. In conclusion, both R and Python provide powerful tools for data wrangling, and the choice between the two ultimately depends on the specific needs of the user and their familiarity Data from API \u00b6 Retrieving data from an API is a common task in both R and Python. Here are examples of how to retrieve data from an API in both languages: Python To retrieve data from an API in Python, we can use the requests library. Here\u2019s an example of how to retrieve weather data from the OpenWeatherMap API: Python code: import requests url = 'https://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=API_KEY' response = requests . get ( url ) data = response . json () print ( data ) This code retrieves the current weather data for London from the OpenWeatherMap API. We first construct the API URL with the location and API key, then use the requests.get() function to make a request to the API. We then extract the JSON data from the response using the .json() method and print the resulting data. R In R, we can use the httr package to retrieve data from an API. Here\u2019s an example of how to retrieve weather data from the OpenWeatherMap API in R: R code: library ( httr ) url <- 'https://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=API_KEY' response <- GET ( url ) data <- content ( response , 'text' ) print ( data ) This code is similar to the Python code above. We first load the httr library, then construct the API URL and use the GET() function to make a request to the API. We then extract the data from the response using the content() function and print the resulting data. Retrieving Data from an API in R Tidyverse In R Tidyverse, we can use the httr and jsonlite packages to retrieve and process data from an API. R code: # Load required packages library ( httr ) library ( jsonlite ) # Define API endpoint endpoint <- \"https://jsonplaceholder.typicode.com/posts\" # Retrieve data from API response <- GET ( endpoint ) # Extract content from response content <- content ( response , \"text\" ) # Convert content to JSON json <- fromJSON ( content ) # Convert JSON to a data frame df <- as.data.frame ( json ) In the above example, we use the GET() function from the httr package to retrieve data from an API endpoint, and the content() function to extract the content of the response. We then use the fromJSON() function from the jsonlite package to convert the JSON content to a list, and the as.data.frame() function to convert the list to a data frame. Retrieving Data from an API in Python In Python, we can use the requests library to retrieve data from an API, and the json library to process the JSON data. Python code: # Load required libraries import requests import json # Define API endpoint endpoint = \"https://jsonplaceholder.typicode.com/posts\" # Retrieve data from API response = requests . get ( endpoint ) # Extract content from response content = response . content # Convert content to JSON json_data = json . loads ( content ) # Convert JSON to a list of dictionaries data = [ dict ( row ) for row in json_data ] In the above example, we use the get() function from the requests library to retrieve data from an API endpoint, and the content attribute to extract the content of the response. We then use the loads() function from the json library to convert the JSON content to a list of dictionaries. Comparison Both R Tidyverse and Python provide powerful tools for retrieving and processing data from an API. In terms of syntax, the two languages are somewhat similar. In both cases, we use a library to retrieve data from the API, extract the content of the response, and then process the JSON data. However, there are some differences in the specific functions and methods used. For example, in R Tidyverse, we use the content() function to extract the content of the response, whereas in Python, we use the content attribute. Additionally, in R Tidyverse, we use the fromJSON() function to convert the JSON data to a list, whereas in Python, we use the loads() function. Census data \u00b6 Retrieving USA census data in R, R Tidy, and Python can be done using different packages and libraries. Here are some working examples in code for each language: R: To retrieve census data in R, we can use the tidycensus package. Here\u2019s an example of how to retrieve the total population for the state of California: R code: library ( tidycensus ) library ( tidyverse ) # Set your Census API key census_api_key ( \"your_api_key\" ) # Get the total population for the state of California ca_pop <- get_acs ( geography = \"state\" , variables = \"B01003_001\" , state = \"CA\" ) %>% rename ( total_population = estimate ) %>% select ( total_population ) # View the result ca_pop R Tidy: To retrieve census data in R Tidy, we can also use the tidycensus package. Here\u2019s an example of how to retrieve the total population for the state of California using pipes and dplyr functions: R tidy code: library ( tidycensus ) library ( tidyverse ) # Set your Census API key census_api_key ( \"your_api_key\" ) # Get the total population for the state of California ca_pop <- get_acs ( geography = \"state\" , variables = \"B01003_001\" , state = \"CA\" ) %>% rename ( total_population = estimate ) %>% select ( total_population ) # View the result ca_pop Python: To retrieve census data in Python, we can use the census library. Here\u2019s an example of how to retrieve the total population for the state of California: Python code: from census import Census from us import states import pandas as pd # Set your Census API key c = Census ( \"your_api_key\" ) # Get the total population for the state of California ca_pop = c . acs5 . state (( \"B01003_001\" ), states . CA . fips , year = 2019 ) # Convert the result to a Pandas DataFrame ca_pop_df = pd . DataFrame ( ca_pop ) # Rename the column ca_pop_df = ca_pop_df . rename ( columns = { \"B01003_001E\" : \"total_population\" }) # Select only the total population column ca_pop_df = ca_pop_df [[ \"total_population\" ]] # View the result ca_pop_df Lidar data \u00b6 To find Lidar data in R and Python, you typically need to start by identifying sources of Lidar data and then accessing them using appropriate packages and functions. Here are some examples of how to find Lidar data in R and Python: R: Identify sources of Lidar data: The USGS National Map Viewer provides access to Lidar data for the United States. You can also find Lidar data on state and local government websites, as well as on commercial data providers\u2019 websites. Access the data: You can use the lidR package in R to download and read Lidar data in the LAS format. For example, the following code downloads and reads Lidar data for a specific area: R code: library ( lidR ) # Download Lidar data LASfile <- system.file ( \"extdata\" , \"Megaplot.laz\" , package = \"lidR\" ) lidar <- readLAS ( LASfile ) # Visualize the data plot ( lidar ) Python: Identify sources of Lidar data: The USGS 3DEP program provides access to Lidar data for the United States. You can also find Lidar data on state and local government websites, as well as on commercial data providers\u2019 websites. Access the data: You can use the pylastools package in Python to download and read Lidar data in the LAS format. For example, the following code downloads and reads Lidar data for a specific area: Python code: py_install ( \"requests\" ) py_install ( \"pylas\" ) py_install ( \"laspy\" ) import requests from pylas import read import laspy import numpy as np # Download Lidar data url = \"https://s3-us-west-2.amazonaws.com/usgs-lidar-public/USGS_LPC_CA_SanFrancisco_2016_LAS_2018.zip\" lasfile = \"USGS_LPC_CA_SanFrancisco_2016_LAS_2018.las\" r = requests . get ( url , allow_redirects = True ) open ( lasfile , 'wb' ) . write ( r . content ) # Read the data lidar = read ( lasfile ) # Visualize the data laspy . plot . plot ( lidar ) Data for black lives \u00b6 Data for Black Lives ( https://d4bl.org/ ) is a movement that uses data science to create measurable change in the lives of Black people. While the Data for Black Lives website provides resources, reports, articles, and datasets related to racial equity, it doesn\u2019t provide a direct API for downloading data. Instead, you can access the Data for Black Lives GitHub repository ( https://github.com/Data4BlackLives ) to find datasets and resources to work with. In this example, we\u2019ll use a sample dataset available at https://github.com/Data4BlackLives/covid-19/tree/master/data . The dataset \u201cCOVID19_race_data.csv\u201d contains COVID-19 race-related data. R: In R, we\u2019ll use the \u2018readr\u2019 and \u2018dplyr\u2019 packages to read, process, and analyze the dataset. R code: # Install and load necessary libraries library ( readr ) library ( dplyr ) # Read the CSV file url <- \"https://raw.githubusercontent.com/Data4BlackLives/covid-19/master/data/COVID19_race_data.csv\" data <- read_csv ( url ) # Basic information about the dataset print ( dim ( data )) print ( head ( data )) # Example analysis: calculate the mean of 'cases_total' by 'state' data %>% group_by ( state ) %>% summarize ( mean_cases_total = mean ( cases_total , na.rm = TRUE )) %>% arrange ( desc ( mean_cases_total )) Python: In Python, we\u2019ll use the \u2018pandas\u2019 library to read, process, and analyze the dataset. Python code: import pandas as pd # Read the CSV file url = \"https://raw.githubusercontent.com/Data4BlackLives/covid-19/master/data/COVID19_race_data.csv\" data = pd . read_csv ( url ) # Basic information about the dataset print ( data . shape ) print ( data . head ()) # Example analysis: calculate the mean of 'cases_total' by 'state' mean_cases_total = data . groupby ( \"state\" )[ \"cases_total\" ] . mean () . sort_values ( ascending = False ) print ( mean_cases_total ) In conclusion, both R and Python provide powerful libraries and tools for downloading, processing, and analyzing datasets, such as those found in the Data for Black Lives repository. The \u2018readr\u2019 and \u2018dplyr\u2019 libraries in R offer a simple and intuitive way to read and manipulate data, while the \u2018pandas\u2019 library in Python offers similar functionality with a different syntax. Depending on your preferred programming language and environment, both options can be effective in working with social justice datasets. Propublica Congress API \u00b6 The ProPublica Congress API provides information about the U.S. Congress members and their voting records. In this example, we\u2019ll fetch data about the current Senate members and calculate the number of members in each party. R: In R, we\u2019ll use the \u2018httr\u2019 and \u2018jsonlite\u2019 packages to fetch and process data from the ProPublica Congress API. R code: # load necessary libraries library ( httr ) library ( jsonlite ) # Replace 'your_api_key' with your ProPublica API key # # Fetch data about the current Senate members url <- \"https://api.propublica.org/congress/v1/117/senate/members.json\" response <- GET ( url , add_headers ( `X-API-Key` = api_key )) # Check if the request was successful if ( http_status ( response ) $ category == \"Success\" ) { data <- content ( response , \"parsed\" ) members <- data $ results [[ 1 ]] $ members # Calculate the number of members in each party party_counts <- table ( sapply ( members , function ( x ) x $ party )) print ( party_counts ) } else { print ( http_status ( response ) $ message ) } ## ## D I ID R ## 49 1 2 51 Python: In Python, we\u2019ll use the \u2018requests\u2019 library to fetch data from the ProPublica Congress API and \u2018pandas\u2019 library to process the data. python code: # Install necessary libraries import requests import pandas as pd # Replace 'your_api_key' with your ProPublica API key api_key = \"your_api_key\" headers = { \"X-API-Key\" : api_key } # Fetch data about the current Senate members url = \"https://api.propublica.org/congress/v1/117/senate/members.json\" response = requests . get ( url , headers = headers ) # Check if the request was successful if response . status_code == 200 : data = response . json () members = data [ \"results\" ][ 0 ][ \"members\" ] # Calculate the number of members in each party party_counts = pd . DataFrame ( members )[ \"party\" ] . value_counts () print ( party_counts ) else : print ( f \"Error: { response . status_code } \" ) In conclusion, both R and Python offer efficient ways to fetch and process data from APIs like the ProPublica Congress API. The \u2018httr\u2019 and \u2018jsonlite\u2019 libraries in R provide a straightforward way to make HTTP requests and parse JSON data, while the \u2018requests\u2019 library in Python offers similar functionality. The \u2018pandas\u2019 library in Python can be used for data manipulation and analysis, and R provides built-in functions like table() for aggregating data. Depending on your preferred programming language and environment, both options can be effective for working with the ProPublica Congress API. Nonprofit Explorer API by ProPublica \u00b6 The Nonprofit Explorer API by ProPublica provides data on tax-exempt organizations in the United States. In this example, we\u2019ll search for organizations with the keyword \u201ceducation\u201d and analyze the results. R: In R, we\u2019ll use the \u2018httr\u2019 and \u2018jsonlite\u2019 packages to fetch and process data from the Nonprofit Explorer API. R code: # Install and load necessary libraries library ( httr ) library ( jsonlite ) # Fetch data for organizations with the keyword \"education\" url <- \"https://projects.propublica.org/nonprofits/api/v2/search.json?q=education\" response <- GET ( url ) # Check if the request was successful if ( http_status ( response ) $ category == \"Success\" ) { data <- content ( response , \"parsed\" ) organizations <- data $ organizations # Count the number of organizations per state state_counts <- table ( sapply ( organizations , function ( x ) x $ state )) print ( state_counts ) } else { print ( http_status ( response ) $ message ) } ## ## AZ CA CO DC FL GA HI IL Indiana LA ## 3 22 6 5 3 2 1 2 1 1 ## MD MI MN MO MP MS NC NE NJ NM ## 1 2 5 3 1 1 2 2 2 1 ## NY OH OK Oregon PA TX UT VA WA WV ## 1 5 1 2 2 12 1 4 3 1 ## ZZ ## 2 Python: In Python, we\u2019ll use the \u2018requests\u2019 library to fetch data from the Nonprofit Explorer API and \u2018pandas\u2019 library to process the data. Python code: # Install necessary libraries import requests import pandas as pd # Fetch data for organizations with the keyword \"education\" url = \"https://projects.propublica.org/nonprofits/api/v2/search.json?q=education\" response = requests . get ( url ) # Check if the request was successful if response . status_code == 200 : data = response . json () organizations = data [ \"organizations\" ] # Count the number of organizations per state state_counts = pd . DataFrame ( organizations )[ \"state\" ] . value_counts () print ( state_counts ) else : print ( f \"Error: { response . status_code } \" ) ## CA 22 ## TX 12 ## CO 6 ## MN 5 ## OH 5 ## DC 5 ## VA 4 ## AZ 3 ## WA 3 ## MO 3 ## FL 3 ## IL 2 ## GA 2 ## NC 2 ## MI 2 ## Oregon 2 ## NE 2 ## ZZ 2 ## PA 2 ## NJ 2 ## HI 1 ## MS 1 ## NY 1 ## Indiana 1 ## NM 1 ## LA 1 ## UT 1 ## MD 1 ## MP 1 ## WV 1 ## OK 1 ## Name: state, dtype: int64 In conclusion, both R and Python offer efficient ways to fetch and process data from APIs like the Nonprofit Explorer API. The \u2018httr\u2019 and \u2018jsonlite\u2019 libraries in R provide a straightforward way to make HTTP requests and parse JSON data, while the \u2018requests\u2019 library in Python offers similar functionality. The \u2018pandas\u2019 library in Python can be used for data manipulation and analysis, and R provides built-in functions like table() for aggregating data. Depending on your preferred programming language and environment, both options can be effective for working with the Nonprofit Explorer API. Campaign Finance API by ProPublica \u00b6 The Campaign Finance API by the Federal Election Commission (FEC) provides data on campaign finance in U.S. federal elections. In this example, we\u2019ll fetch data about individual contributions for the 2020 election cycle and analyze the results. R: In R, we\u2019ll use the \u2018httr\u2019 and \u2018jsonlite\u2019 packages to fetch and process data from the Campaign Finance API. R code: # Install and load necessary libraries library ( httr ) library ( jsonlite ) # Fetch data about individual contributions for the 2020 election cycle url <- \"https://api.open.fec.gov/v1/schedules/schedule_a/?api_key='OGwpkX7tH5Jihs1qQcisKfVAMddJzmzouWKtKoby'&two_year_transaction_period=2020&sort_hide_null=false&sort_null_only=false&per_page=20&page=1\" response <- GET ( url ) # Check if the request was successful if ( http_status ( response ) $ category == \"Success\" ) { data <- content ( response , \"parsed\" ) contributions <- data $ results # Calculate the total contributions per state state_totals <- aggregate ( contributions $ contributor_state , by = list ( contributions $ contributor_state ), FUN = sum ) colnames ( state_totals ) <- c ( \"State\" , \"Total_Contributions\" ) print ( state_totals ) } else { print ( http_status ( response ) $ message ) } ## [1] \"Client error: (403) Forbidden\" Python: In Python, we\u2019ll use the \u2018requests\u2019 library to fetch data from the Campaign Finance API and \u2018pandas\u2019 library to process the data. Python code: # Install necessary libraries import requests import pandas as pd # Fetch data about individual contributions for the 2020 election cycle url = \"https://api.open.fec.gov/v1/schedules/schedule_a/?api_key=your_api_key&two_year_transaction_period=2020&sort_hide_null=false&sort_null_only=false&per_page=20&page=1\" response = requests . get ( url ) # Check if the request was successful if response . status_code == 200 : data = response . json () contributions = data [ \"results\" ] # Calculate the total contributions per state df = pd . DataFrame ( contributions ) state_totals = df . groupby ( \"contributor_state\" )[ \"contribution_receipt_amount\" ] . sum () print ( state_totals ) else : print ( f \"Error: { response . status_code } \" ) ## Error: 403 In conclusion, both R and Python offer efficient ways to fetch and process data from APIs like the Campaign Finance API. The \u2018httr\u2019 and \u2018jsonlite\u2019 libraries in R provide a straightforward way to make HTTP requests and parse JSON data, while the \u2018requests\u2019 library in Python offers similar functionality. The \u2018pandas\u2019 library in Python can be used for data manipulation and analysis, and R provides built-in functions like aggregate() for aggregating data. Depending on your preferred programming language and environment, both options can be effective for working with the Campaign Finance API. Note: Remember to replace your_api_key with your actual FEC API key in the code examples above. Historic Redlining \u00b6 Historic redlining data refers to data from the Home Owners\u2019 Loan Corporation (HOLC) that created residential security maps in the 1930s, which contributed to racial segregation and disinvestment in minority neighborhoods. One popular source for this data is the Mapping Inequality project ( https://dsl.richmond.edu/panorama/redlining/ ). In this example, we\u2019ll download historic redlining data for Philadelphia in the form of a GeoJSON file and analyze the data in R and Python. R: In R, we\u2019ll use the \u2018sf\u2019 and \u2018dplyr\u2019 packages to read and process the GeoJSON data. R code: # Install and load necessary libraries library ( sf ) library ( dplyr ) # Download historic redlining data for Philadelphia url <- \"https://dsl.richmond.edu/panorama/redlining/static/downloads/geojson/PAPhiladelphia1937.geojson\" philly_geojson <- read_sf ( url ) # Count the number of areas per HOLC grade grade_counts <- philly_geojson %>% group_by ( holc_grade ) %>% summarize ( count = n ()) plot ( grade_counts ) Python: In Python, we\u2019ll use the \u2018geopandas\u2019 library to read and process the GeoJSON data. Python code: # Install necessary libraries import geopandas as gpd # Download historic redlining data for Philadelphia url = \"https://dsl.richmond.edu/panorama/redlining/static/downloads/geojson/PAPhiladelphia1937.geojson\" philly_geojson = gpd . read_file ( url ) # Count the number of areas per HOLC grade grade_counts = philly_geojson [ \"holc_grade\" ] . value_counts () print ( grade_counts ) ## B 28 ## D 26 ## C 18 ## A 10 ## Name: holc_grade, dtype: int64 In conclusion, both R and Python offer efficient ways to download and process historic redlining data in the form of GeoJSON files. The \u2018sf\u2019 package in R provides a simple way to read and manipulate spatial data, while the \u2018geopandas\u2019 library in Python offers similar functionality. The \u2018dplyr\u2019 package in R can be used for data manipulation and analysis, and Python\u2019s built-in functions like value_counts() can be used for aggregating data. Depending on your preferred programming language and environment, both options can be effective for working with historic redlining data. American Indian and Alaska Native Areas (AIANNH) \u00b6 In this example, we\u2019ll download and analyze the American Indian and Alaska Native Areas (AIANNH) TIGER/Line Shapefile from the U.S. Census Bureau. We\u2019ll download the data for the year 2020, and analyze the number of AIANNH per congressional district R: In R, we\u2019ll use the \u2018sf\u2019 and \u2018dplyr\u2019 packages to read and process the Shapefile data. R code: # Install and load necessary libraries library ( sf ) library ( dplyr ) # Download historic redlining data for Philadelphia url <- \"https://www2.census.gov/geo/tiger/TIGER2020/AIANNH/tl_2020_us_aiannh.zip\" temp_file <- tempfile ( fileext = \".zip\" ) download.file ( url , temp_file , mode = \"wb\" ) unzip ( temp_file , exdir = tempdir ()) # Read the Shapefile shapefile_path <- file.path ( tempdir (), \"tl_2020_us_aiannh.shp\" ) aiannh <- read_sf ( shapefile_path ) # Count the number of AIANNH per congressional district state_counts <- aiannh %>% group_by ( LSAD ) %>% summarize ( count = n ()) print ( state_counts [ order ( - state_counts $ count ),]) ## Simple feature collection with 26 features and 2 fields ## Geometry type: GEOMETRY ## Dimension: XY ## Bounding box: xmin: -174.236 ymin: 18.91069 xmax: -67.03552 ymax: 71.34019 ## Geodetic CRS: NAD83 ## # A tibble: 26 \u00d7 3 ## LSAD count geometry ## <chr> <int> <MULTIPOLYGON [\u00b0]> ## 1 79 221 (((-166.5331 65.33918, -166.5331 65.33906, -166.533 65.33699, -1\u2026 ## 2 86 206 (((-83.38811 35.46645, -83.38342 35.46596, -83.38316 35.46593, -\u2026 ## 3 OT 155 (((-92.32972 47.81374, -92.3297 47.81305, -92.32967 47.81196, -9\u2026 ## 4 78 75 (((-155.729 20.02457, -155.7288 20.02428, -155.7288 20.02427, -1\u2026 ## 5 85 46 (((-122.3355 37.95215, -122.3354 37.95206, -122.3352 37.95199, -\u2026 ## 6 92 35 (((-93.01356 31.56287, -93.01354 31.56251, -93.01316 31.56019, -\u2026 ## 7 88 25 (((-97.35299 36.908, -97.35291 36.90801, -97.35287 36.908, -97.3\u2026 ## 8 96 19 (((-116.48 32.63814, -116.48 32.63718, -116.4794 32.63716, -116.\u2026 ## 9 84 16 (((-105.5937 36.40379, -105.5937 36.40324, -105.5937 36.40251, -\u2026 ## 10 89 11 (((-95.91705 41.28037, -95.91653 41.28036, -95.91653 41.28125, -\u2026 ## # \u2139 16 more rows Python: In Python, we\u2019ll use the \u2018geopandas\u2019 library to read and process the Shapefile data. Python code: import geopandas as gpd import pandas as pd import requests import zipfile import os from io import BytesIO # Download historic redlining data for Philadelphia url = \"https://www2.census.gov/geo/tiger/TIGER2020/AIANNH/tl_2020_us_aiannh.zip\" response = requests . get ( url ) zip_file = zipfile . ZipFile ( BytesIO ( response . content )) # Extract Shapefile temp_dir = \"temp\" if not os . path . exists ( temp_dir ): os . makedirs ( temp_dir ) zip_file . extractall ( path = temp_dir ) shapefile_path = os . path . join ( temp_dir , \"tl_2020_us_aiannh.shp\" ) # Read the Shapefile aiannh = gpd . read_file ( shapefile_path ) # Count the number of AIANNH per congressional district state_counts = aiannh . groupby ( \"LSAD\" ) . size () . reset_index ( name = \"count\" ) # Sort by descending count state_counts_sorted = state_counts . sort_values ( by = \"count\" , ascending = False ) print ( state_counts_sorted ) ## LSAD count ## 2 79 221 ## 9 86 206 ## 25 OT 155 ## 1 78 75 ## 8 85 46 ## 15 92 35 ## 11 88 25 ## 19 96 19 ## 7 84 16 ## 12 89 11 ## 5 82 8 ## 3 80 7 ## 4 81 6 ## 21 98 5 ## 20 97 5 ## 13 90 4 ## 18 95 3 ## 6 83 3 ## 17 94 2 ## 16 93 1 ## 14 91 1 ## 10 87 1 ## 22 99 1 ## 23 9C 1 ## 24 9D 1 ## 0 00 1 In conclusion, both R and Python offer efficient ways to download and process AIANNH TIGER/Line Shapefile data from the U.S. Census Bureau. The \u2018sf\u2019 package in R provides a simple way to read and manipulate spatial data, while the \u2018geopandas\u2019 library in Python offers similar functionality. The \u2018dplyr\u2019 package in R can be used for data manipulation and analysis, and Python\u2019s built-in functions like value_counts() can be used for aggregating data. Depending on your preferred programming language and environment, both options can be effective for working with AIANNH data. Indian Entities Recognized and Eligible To Receive Services by BIA \u00b6 The Bureau of Indian Affairs (BIA) provides a PDF document containing a list of Indian Entities Recognized and Eligible To Receive Services. To analyze the data, we\u2019ll first need to extract the information from the PDF. In this example, we\u2019ll extract the names of the recognized tribes and count the number of tribes per state. R: In R, we\u2019ll use the \u2018pdftools\u2019 package to extract text from the PDF and the \u2018stringr\u2019 package to process the text data. R code: # Install and load necessary libraries library ( pdftools ) library ( stringr ) library ( dplyr ) # Download the BIA PDF url <- \"https://www.govinfo.gov/content/pkg/FR-2022-01-28/pdf/2022-01789.pdf\" temp_file <- tempfile ( fileext = \".pdf\" ) download.file ( url , temp_file , mode = \"wb\" ) # Extract text from the PDF pdf_text <- pdf_text ( temp_file ) tribe_text <- pdf_text [ 4 : length ( pdf_text )] # Define helper functions tribe_state_extractor <- function ( text_line ) { regex_pattern <- \"(.*),\\\\s+([A-Z]{2})$\" tribe_state <- str_match ( text_line , regex_pattern ) return ( tribe_state ) } is_valid_tribe_line <- function ( text_line ) { regex_pattern <- \"^\\\\d+\\\\s+\" return ( ! is.na ( str_match ( text_line , regex_pattern ))) } # Process text data to extract tribes and states tribe_states <- sapply ( tribe_text , tribe_state_extractor ) valid_lines <- sapply ( tribe_text , is_valid_tribe_line ) tribe_states <- tribe_states [ valid_lines , 2 : 3 ] # Count the number of tribes per state tribe_data <- as.data.frame ( tribe_states ) colnames ( tribe_data ) <- c ( \"Tribe\" , \"State\" ) state_counts <- tribe_data %>% group_by ( State ) %>% summarise ( Count = n ()) print ( state_counts ) ## # A tibble: 0 \u00d7 2 ## # \u2139 2 variables: State <chr>, Count <int> Python: In Python, we\u2019ll use the \u2018PyPDF2\u2019 library to extract text from the PDF and the \u2018re\u2019 module to process the text data. Python code: # Install necessary libraries import requests import PyPDF2 import io import re from collections import Counter # Download the BIA PDF url = \"https://www.bia.gov/sites/bia.gov/files/assets/public/raca/online-tribal-leaders-directory/tribal_leaders_2021-12-27.pdf\" response = requests . get ( url ) # Extract text from the PDF pdf_reader = PyPDF2 . PdfFileReader ( io . BytesIO ( response . content )) tribe_text = [ pdf_reader . getPage ( i ) . extractText () for i in range ( 3 , pdf_reader . numPages )] # Process text data to extract tribes and states tribes = [ re . findall ( r '^\\d+\\s+(.+),\\s+([A-Z] {2} )' , line ) for text in tribe_text for line in text . split ( ' \\n ' ) if line ] tribe_states = [ state for tribe , state in tribes ] # Count the number of tribes per state state_counts = Counter ( tribe_states ) print ( state_counts ) In conclusion, both R and Python offer efficient ways to download and process the list of Indian Entities Recognized and Eligible To Receive Services from the BIA. The \u2018pdftools\u2019 package in R provides a simple way to extract text from PDF files, while the \u2018PyPDF2\u2019 library in Python offers similar functionality. The \u2018stringr\u2019 package in R and the \u2018re\u2019 module in Python can be used to process and analyze text data. Depending on your preferred programming language and environment, both options can be effective for working with BIA data. National Atlas - Indian Lands of the United States dataset \u00b6 In this example, we will download and analyze the National Atlas - Indian Lands of the United States dataset in both R and Python. We will read the dataset and count the number of Indian lands per state. R: In R, we\u2019ll use the \u2018sf\u2019 package to read the Shapefile and the \u2018dplyr\u2019 package to process the data. R code: # Install and load necessary libraries library ( sf ) library ( dplyr ) # Download the Indian Lands dataset url <- \"https://prd-tnm.s3.amazonaws.com/StagedProducts/Small-scale/data/Boundaries/indlanp010g.shp_nt00968.tar.gz\" temp_file <- tempfile ( fileext = \".tar.gz\" ) download.file ( url , temp_file , mode = \"wb\" ) untar ( temp_file , exdir = tempdir ()) # Read the Shapefile shapefile_path <- file.path ( tempdir (), \"indlanp010g.shp\" ) indian_lands <- read_sf ( shapefile_path ) # Count the number of Indian lands per state # state_counts <- indian_lands %>% # group_by(STATE) %>% # summarize(count = n()) plot ( indian_lands ) ## Warning: plotting the first 9 out of 23 attributes; use max.plot = 23 to plot ## all Python: In Python, we\u2019ll use the \u2018geopandas\u2019 and \u2018pandas\u2019 libraries to read the Shapefile and process the data. Python code: import geopandas as gpd import pandas as pd import requests import tarfile import os from io import BytesIO # Download the Indian Lands dataset url = \"https://prd-tnm.s3.amazonaws.com/StagedProducts/Small-scale/data/Boundaries/indlanp010g.shp_nt00966.tar.gz\" response = requests . get ( url ) tar_file = tarfile . open ( fileobj = BytesIO ( response . content ), mode = 'r:gz' ) # Extract Shapefile temp_dir = \"temp\" if not os . path . exists ( temp_dir ): os . makedirs ( temp_dir ) tar_file . extractall ( path = temp_dir ) shapefile_path = os . path . join ( temp_dir , \"indlanp010g.shp\" ) # Read the Shapefile indian_lands = gpd . read_file ( shapefile_path ) # Count the number of Indian lands per state state_counts = indian_lands . groupby ( \"STATE\" ) . size () . reset_index ( name = \"count\" ) print ( state_counts ) Both R and Python codes download the dataset and read the Shapefile using the respective packages. They then group the data by the \u2018STATE\u2019 attribute and calculate the count of Indian lands per state.","title":"R and Python bilingualism"},{"location":"additional-resources/bilingualism_md/#r-and-python-bilingualism","text":"Welcome to the R and Python bilingualism reference guide! If you\u2019re fluent in one of these languages but hesitant to learn the other, you\u2019re in the right place. The good news is that there are many similarities between R and Python that make it easy to switch between the two. Both R and Python are widely used in data science and are open-source, meaning that they are free to use and constantly being improved by the community. They both have extensive libraries for data analysis, visualization, and machine learning. In fact, many of the libraries in both languages have similar names and functions, such as Pandas in Python and data.table in R. While there are differences between the two languages, they can complement each other well. Python is versatile and scalable, making it ideal for large and complex projects such as web development and artificial intelligence. R, on the other hand, is known for its exceptional statistical capabilities and is often used in data analysis and modeling. Visualization is also easier in R, making it a popular choice for creating graphs and charts. By learning both R and Python, you\u2019ll be able to take advantage of the strengths of each language and create more efficient and robust data analysis workflows. Don\u2019t let the differences between the two languages intimidate you - once you become familiar with one, learning the other will be much easier. So, whether you\u2019re a Python enthusiast looking to expand your statistical analysis capabilities, or an R user interested in exploring the world of web development and artificial intelligence, this guide will help you become bilingual in R and Python.","title":"R and Python bilingualism"},{"location":"additional-resources/bilingualism_md/#install-packages","text":"In R, packages can be installed from CRAN repository by using the install.packages() function: R code: # Install the dplyr package from CRAN install.packages ( \"dplyr\" ) In Python, packages can be installed from the Anaconda repository by using the conda install command: Python code: # Install the pandas package from Anaconda ! conda install pandas Loading libraries in R and Python In R, libraries can be loaded in the same way as before, using the library() function: R code: # Load the dplyr library library ( dplyr ) In Python, libraries can be loaded in the same way as before, using the import statement. Here\u2019s an example: Python code: # Load the pandas library import pandas as pd Note that the package or library must be installed from the respective repository before it can be loaded. Also, make sure you have the correct repository specified in your system before installing packages. By default, R uses CRAN as its primary repository, whereas Anaconda uses its own repository by default.","title":"Install packages"},{"location":"additional-resources/bilingualism_md/#reticulate","text":"The reticulate package lets you run both R and Python together in the R environment. R libraries are stored and managed in a repository called CRAN. You can download R packages with the install.packages() function install.packages ( \"reticulate\" ) You only need to install packages once, but you need to mount those packages with the library() function each time you open R. library ( reticulate ) Python libraries are stored and managed in a few different libraries and their dependencies are not regulated as strictly as R libraries are in CRAN. It\u2019s easier to publish a python package but it can also be more cumbersome for users because you need to manage dependencies yourself. You can download python packages using both R and Python code py_install ( \"laspy\" ) ## + '/Users/ty/opt/miniconda3/bin/conda' 'install' '--yes' '--prefix' '/Users/ty/opt/miniconda3/envs/earth-analytics-python' '-c' 'conda-forge' 'laspy' Now, let\u2019s create a Python list and assign it to a variable py_list: R code: py_list <- r_to_py ( list ( 1 , 2 , 3 )) We can now print out the py_list variable in Python using the py_run_string() function: R code: py_run_string ( \"print(r.py_list)\" ) This will output [1, 2, 3] in the Python console. Now, let\u2019s create an R vector and assign it to a variable r_vec: R code: r_vec <- c ( 4 , 5 , 6 ) We can now print out the r_vec variable in R using the py$ syntax to access Python variables: R code: print ( py $ py_list ) This will output [1, 2, 3] in the R console. We can also call Python functions from R using the py_call() function. For example, let\u2019s call the Python sum() function on the py_list variable and assign the result to an R variable r_sum: R code: r_sum <- py_call ( \"sum\" , args = list ( py_list )) We can now print out the r_sum variable in R: R code: print ( r_sum ) This will output 6 in the R console.","title":"reticulate"},{"location":"additional-resources/bilingualism_md/#load-packages-and-change-settings","text":"options ( java.parameters = \"-Xmx5G\" ) library ( r5r ) library ( sf ) library ( data.table ) library ( ggplot2 ) library ( interp ) library ( dplyr ) library ( osmdata ) library ( ggthemes ) library ( sf ) library ( data.table ) library ( ggplot2 ) library ( akima ) library ( dplyr ) library ( raster ) library ( osmdata ) library ( mapview ) library ( cowplot ) library ( here ) library ( testthat ) import sys sys . argv . append ([ \"--max-memory\" , \"5G\" ]) import pandas as pd import geopandas import matplotlib.pyplot as plt import numpy as np import plotnine import contextily as cx import r5py import seaborn as sns R and Python are two popular programming languages used for data analysis, statistics, and machine learning. Although they share some similarities, there are some fundamental differences between them. Here\u2019s an example code snippet in R and Python to illustrate some of the differences: R Code: # Create a vector of numbers from 1 to 10 x <- 1 : 10 # Compute the mean of the vector mean_x <- mean ( x ) # Print the result print ( mean_x ) ## [1] 5.5 Python Code: # Import the numpy library for numerical operations import numpy as np # Create a numpy array of numbers from 1 to 10 x = np . array ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]) # Compute the mean of the array mean_x = np . mean ( x ) # Print the result print ( mean_x ) ## 5.5 In this example, we can see that there are several differences between R and Python: Syntax: R uses the assignment operator \\<- while Python uses the equals sign = for variable assignment. Libraries: Python relies heavily on external libraries such as numpy, pandas, and matplotlib for data analysis, while R has built-in functions for many data analysis tasks. Data types: R is designed to work with vectors and matrices, while Python uses lists and arrays. In the example above, we used the numpy library to create a numerical array in Python. Function names: Function names in R and Python can differ significantly. In the example above, we used the mean() function in R and the np.mean() function in Python to calculate the mean of the vector/array. These are just a few of the many differences between R and Python. Ultimately, the choice between the two languages will depend on your specific needs and preferences.","title":"Load packages and change settings"},{"location":"additional-resources/bilingualism_md/#load-saved-data","text":"R Code: data ( \"iris\" ) here () load ( file = here ( \"2_R_and_Py_bilingualism\" , \"data\" , \"iris_example_data.rdata\" )) objects () Python code:","title":"Load saved data"},{"location":"additional-resources/bilingualism_md/#save-data","text":"R Code: save ( iris , file = here ( \"2_R_and_Py_bilingualism\" , \"data\" , \"iris_example_data.rdata\" )) write.csv ( iris , file = here ( \"2_R_and_Py_bilingualism\" , \"data\" , \"iris_example_data.csv\" )) Python code:","title":"Save data"},{"location":"additional-resources/bilingualism_md/#functions","text":"Both R and Python are powerful languages for writing functions that can take input, perform a specific task, and return output. R Code: # Define a function that takes two arguments and returns their sum sum_r <- function ( a , b ) { return ( a + b ) } # Call the function with two arguments and print the result result_r <- sum_r ( 3 , 5 ) print ( result_r ) ## [1] 8 Python code: # Define a function that takes two arguments and returns their sum def sum_py ( a , b ): return a + b # Call the function with two arguments and print the result result_py = sum_py ( 3 , 5 ) print ( result_py ) ## 8 In both cases, we define a function that takes two arguments and returns their sum. In R, we use the function keyword to define a function, while in Python, we use the def keyword. The function body in R is enclosed in curly braces, while in Python it is indented. There are a few differences in the syntax and functionality between the two approaches: Function arguments: In R, function arguments are separated by commas, while in Python they are enclosed in parentheses. The syntax for specifying default arguments and variable-length argument lists can also differ between the two languages. Return statement: In R, we use the return keyword to specify the return value of a function, while in Python, we simply use the return statement. Function names: Function names in R and Python can differ significantly. In the example above, we used the sum_r() function in R and the sum_py() function in Python to calculate the sum of two numbers.","title":"functions"},{"location":"additional-resources/bilingualism_md/#data-plots","text":"R Code: # Load the \"ggplot2\" package for plotting library ( ggplot2 ) # Generate some sample data x <- seq ( 1 , 10 , 1 ) y <- x + rnorm ( 10 ) # Create a scatter plot ggplot ( data.frame ( x , y ), aes ( x = x , y = y )) + geom_point () Python code: # Load the \"matplotlib\" library import matplotlib.pyplot as plt # Generate some sample data import numpy as np x = np . arange ( 1 , 11 ) y = x + np . random . normal ( 0 , 1 , 10 ) #clear last plot plt . clf () # Create a scatter plot plt . scatter ( x , y ) plt . show () In both cases, we generate some sample data and create a scatter plot to visualize the relationship between the variables. There are a few differences in the syntax and functionality between the two approaches: Library and package names: In R, we use the ggplot2 package for plotting, while in Python, we use the matplotlib library. Data format: In R, we use a data frame to store the input data, while in Python, we use numpy arrays. Plotting functions: In R, we use the ggplot() function to create a new plot object, and then use the geom_point() function to create a scatter plot layer. In Python, we use the scatter() function from the matplotlib.pyplot module to create a scatter plot directly.","title":"Data Plots"},{"location":"additional-resources/bilingualism_md/#linear-regression","text":"R Code: # Load the \"ggplot2\" package for plotting library ( ggplot2 ) # Generate some sample data x <- seq ( 1 , 10 , 1 ) y <- x + rnorm ( 10 ) # Perform linear regression model_r <- lm ( y ~ x ) # Print the model summary summary ( model_r ) ## ## Call: ## lm(formula = y ~ x) ## ## Residuals: ## Min 1Q Median 3Q Max ## -1.69344 -0.42336 0.08961 0.34778 1.56728 ## ## Coefficients: ## Estimate Std. Error t value Pr(>|t|) ## (Intercept) -0.1676 0.6781 -0.247 0.811 ## x 0.9750 0.1093 8.921 1.98e-05 *** ## --- ## Signif. codes: 0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ## ## Residual standard error: 0.9926 on 8 degrees of freedom ## Multiple R-squared: 0.9087, Adjusted R-squared: 0.8972 ## F-statistic: 79.59 on 1 and 8 DF, p-value: 1.976e-05 # Plot the data and regression line ggplot ( data.frame ( x , y ), aes ( x = x , y = y )) + geom_point () + geom_smooth ( method = \"lm\" , se = FALSE ) ## `geom_smooth()` using formula = 'y ~ x' Python code: # Load the \"matplotlib\" and \"scikit-learn\" libraries import matplotlib.pyplot as plt from sklearn.linear_model import LinearRegression # Generate some sample data import numpy as np x = np . arange ( 1 , 11 ) y = x + np . random . normal ( 0 , 1 , 10 ) # Perform linear regression model_py = LinearRegression () . fit ( x . reshape ( - 1 , 1 ), y ) # Print the model coefficients print ( \"Coefficients: \" , model_py . coef_ ) ## Coefficients: [1.15539692] print ( \"Intercept: \" , model_py . intercept_ ) #clear last plot ## Intercept: -1.1291396173221218 plt . clf () # Plot the data and regression line plt . scatter ( x , y ) plt . plot ( x , model_py . predict ( x . reshape ( - 1 , 1 )), color = 'red' ) plt . show () In both cases, we generate some sample data with a linear relationship between x and y, and then perform a simple linear regression to estimate the slope and intercept of the line. We then plot the data and regression line to visualize the fit. There are a few differences in the syntax and functionality between the two approaches: Library and package names: In R, we use the lm() function from the base package to perform linear regression, while in Python, we use the LinearRegression() class from the scikit-learn library. Additionally, we use the ggplot2 package in R for plotting, while we use the matplotlib library in Python. Data format: In R, we can specify the dependent and independent variables in the formula used for regression. In Python, we need to reshape the input data to a two-dimensional array before fitting the model. Model summary: In R, we can use the summary() function to print a summary of the model, including the estimated coefficients, standard errors, and p-values. In Python, we need to print the coefficients and intercept separately.","title":"Linear regression"},{"location":"additional-resources/bilingualism_md/#random-forest","text":"R Code: # Load the \"randomForest\" package library ( randomForest ) # Load the \"iris\" dataset data ( iris ) # Split the data into training and testing sets set.seed ( 123 ) train_idx <- sample ( 1 : nrow ( iris ), nrow ( iris ) * 0.7 , replace = FALSE ) train_data <- iris [ train_idx , ] test_data <- iris [ - train_idx , ] # Build a random forest model rf_model <- randomForest ( Species ~ . , data = train_data , ntree = 500 ) # Make predictions on the testing set predictions <- predict ( rf_model , test_data ) # Calculate accuracy of the model accuracy <- sum ( predictions == test_data $ Species ) / nrow ( test_data ) print ( paste ( \"Accuracy:\" , accuracy )) ## [1] \"Accuracy: 0.977777777777778\" Python code: # Load the \"pandas\", \"numpy\", and \"sklearn\" libraries import pandas as pd import numpy as np from sklearn.ensemble import RandomForestClassifier from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split # Load the \"iris\" dataset iris = load_iris () # Split the data into training and testing sets X_train , X_test , y_train , y_test = train_test_split ( iris . data , iris . target , test_size = 0.3 , random_state = 123 ) # Build a random forest model rf_model = RandomForestClassifier ( n_estimators = 500 , random_state = 123 ) rf_model . fit ( X_train , y_train ) # Make predictions on the testing set ## RandomForestClassifier(n_estimators=500, random_state=123) predictions = rf_model . predict ( X_test ) # Calculate accuracy of the model accuracy = sum ( predictions == y_test ) / len ( y_test ) print ( \"Accuracy:\" , accuracy ) ## Accuracy: 0.9555555555555556 In both cases, we load the iris dataset and split it into training and testing sets. We then build a random forest model using the training data and evaluate its accuracy on the testing data. There are a few differences in the syntax and functionality between the two approaches: Library and package names: In R, we use the randomForest package to build random forest models, while in Python, we use the RandomForestClassifier class from the sklearn.ensemble module. We also use different libraries for loading and manipulating data (pandas and numpy in Python, and built-in datasets in R). Model parameters: The syntax for setting model parameters is slightly different in R and Python. For example, in R, we specify the number of trees using the ntree parameter, while in Python, we use the n_estimators parameter. Data format: In R, we use a data frame to store the input data, while in Python, we use numpy arrays.","title":"Random Forest"},{"location":"additional-resources/bilingualism_md/#basic-streetmap-from-open-street-map","text":"R Code: # Load the \"osmdata\" package for mapping library ( osmdata ) library ( tmap ) # Define the map location and zoom level bbox <- c ( left = -0.16 , bottom = 51.49 , right = -0.13 , top = 51.51 ) # Get the OpenStreetMap data osm_data <- opq ( bbox ) %>% add_osm_feature ( key = \"highway\" ) %>% osmdata_sf () # Plot the map using tmap tm_shape ( osm_data $ osm_lines ) + tm_lines () Python code: # Load the \"osmnx\" package for mapping import osmnx as ox # Define the map location and zoom level bbox = ( 51.49 , - 0.16 , 51.51 , - 0.13 ) # Get the OpenStreetMap data osm_data = ox . graph_from_bbox ( north = bbox [ 2 ], south = bbox [ 0 ], east = bbox [ 3 ], west = bbox [ 1 ], network_type = 'all' ) # Plot the map using osmnx ox . plot_graph ( osm_data ) ## (<Figure size 1600x1600 with 0 Axes>, <AxesSubplot:>) In both cases, we define the map location and zoom level, retrieve the OpenStreetMap data using the specified bounding box, and plot the map. The main differences between the two approaches are: Package names and syntax: In R, we use the osmdata package and its syntax to download and process the OpenStreetMap data, while in Python, we use the osmnx package and its syntax. Mapping libraries: In R, we use the tmap package to create a static map of the OpenStreetMap data, while in Python, we use the built-in ox.plot_graph function from the osmnx package to plot the map.","title":"Basic streetmap from Open Street Map"},{"location":"additional-resources/bilingualism_md/#cnn-on-raster-data","text":"R Code: # Load the \"keras\" package for building the CNN library ( tensorflow ) library ( keras ) # Load the \"raster\" package for working with raster data library ( raster ) # Load the \"magrittr\" package for pipe operator library ( magrittr ) # Load the data as a raster brick raster_data <- brick ( \"raster_data.tif\" ) # Split the data into training and testing sets split_data <- sample ( 1 : nlayers ( raster_data ), size = nlayers ( raster_data ) * 0.8 , replace = FALSE ) train_data <- raster_data [[ split_data ]] test_data <- raster_data [[ setdiff ( 1 : nlayers ( raster_data ), split_data )]] # Define the CNN model model <- keras_model_sequential () %>% layer_conv_2d ( filters = 32 , kernel_size = c ( 3 , 3 ), activation = \"relu\" , input_shape = c ( ncol ( train_data ), nrow ( train_data ), ncell ( train_data ))) %>% layer_max_pooling_2d ( pool_size = c ( 2 , 2 )) %>% layer_dropout ( rate = 0.25 ) %>% layer_flatten () %>% layer_dense ( units = 128 , activation = \"relu\" ) %>% layer_dropout ( rate = 0.5 ) %>% layer_dense ( units = nlayers ( train_data ), activation = \"softmax\" ) # Compile the model model %>% compile ( loss = \"categorical_crossentropy\" , optimizer = \"adam\" , metrics = \"accuracy\" ) # Train the model history <- model %>% fit ( x = array ( train_data ), y = to_categorical ( 1 : nlayers ( train_data )), epochs = 10 , validation_split = 0.2 ) # Evaluate the model model %>% evaluate ( x = array ( test_data ), y = to_categorical ( 1 : nlayers ( test_data ))) # Plot the model accuracy over time plot ( history )","title":"CNN on Raster data"},{"location":"additional-resources/bilingualism_md/#piping","text":"Piping is a powerful feature in both R and Python that allows for a more streamlined and readable code. However, the syntax for piping is slightly different between the two languages. In R, piping is done using the %>% operator from the magrittr package, while in Python, it is done using the | operator from the pandas package. Let\u2019s compare and contrast piping in R and Python with some examples: Piping in R In R, we can use the %>% operator to pipe output from one function to another, which can make our code more readable and easier to follow. Here\u2019s an example: R code: library ( dplyr ) # create a data frame df <- data.frame ( x = c ( 1 , 2 , 3 ), y = c ( 4 , 5 , 6 )) # calculate the sum of column x and y df %>% mutate ( z = x + y ) %>% summarize ( sum_z = sum ( z )) ## sum_z ## 1 21 In this example, we first create a data frame df with two columns x and y. We then pipe the output of df to mutate, which adds a new column z to the data frame that is the sum of x and y. Finally, we pipe the output to summarize, which calculates the sum of z and returns the result. Piping in Python In Python, we can use the | operator to pipe output from one function to another. However, instead of piping output from one function to another, we pipe a DataFrame to a method of the DataFrame. Here\u2019s an example: Python code: import pandas as pd # create a DataFrame df = pd . DataFrame ({ 'x' : [ 1 , 2 , 3 ], 'y' : [ 4 , 5 , 6 ]}) # calculate the sum of column x and y ( df . assign ( z = df [ 'x' ] + df [ 'y' ]) . agg ( sum_z = ( 'z' , 'sum' ))) ## z ## sum_z 21 In this example, we first create a DataFrame df with two columns x and y. We then use the assign() method to add a new column z to the DataFrame that is the sum of x and y. Finally, we use the agg() method to calculate the sum of z and return the result. As we can see, the syntax for piping is slightly different between R and Python, but the concept remains the same. Piping can make our code more readable and easier to follow, which is an important aspect of creating efficient and effective code. R code: library ( dplyr ) library ( ggplot2 ) iris %>% filter ( Species == \"setosa\" ) %>% group_by ( Sepal.Width ) %>% summarise ( mean.Petal.Length = mean ( Petal.Length )) %>% mutate ( Sepal.Width = as.factor ( Sepal.Width )) %>% ggplot ( aes ( x = Sepal.Width , y = mean.Petal.Length )) + geom_bar ( stat = \"identity\" , fill = \"dodgerblue\" ) + labs ( title = \"Mean Petal Length of Setosa by Sepal Width\" , x = \"Sepal Width\" , y = \"Mean Petal Length\" ) In this example, we start with the iris dataset and filter it to only include rows where the Species column is \u201csetosa\u201d. We then group the remaining rows by the Sepal.Width column and calculate the mean Petal.Length for each group. Next, we convert Sepal.Width to a factor variable to ensure that it is treated as a categorical variable in the visualization. Finally, we create a bar plot using ggplot2, with Sepal.Width on the x-axis and mean.Petal.Length on the y-axis. The resulting plot shows the mean petal length of setosa flowers for each sepal width category. Python code: import pandas as pd # Load the iris dataset and pipe it into the next function ( pd . read_csv ( \"https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data\" , header = None , names = [ 'sepal_length' , 'sepal_width' , 'petal_length' , 'petal_width' , 'class' ]) # Select columns and pivot the dataset . loc [:, [ 'sepal_length' , 'sepal_width' , 'petal_length' ]] . melt ( var_name = 'variable' , value_name = 'value' ) # Group by variable and calculate mean . groupby ( 'variable' , as_index = False ) . mean () # Filter for mean greater than 3.5 and sort by descending mean . query ( 'value > 3.5' ) . sort_values ( 'value' , ascending = False ) ) ## variable value ## 1 sepal_length 5.843333 ## 0 petal_length 3.758667","title":"Piping"},{"location":"additional-resources/bilingualism_md/#for-loops","text":"Here is an example of a for loop in R: R code # Create a vector of numbers numbers <- c ( 1 , 2 , 3 , 4 , 5 ) # Use a for loop to print out each number in the vector for ( i in numbers ) { print ( i ) } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 In this example, the for loop iterates over each element in the numbers vector, assigning the current element to the variable i. The print(i) statement is then executed for each iteration, outputting the value of i. Here is the equivalent example in Python: Python code # Create a list of numbers numbers = [ 1 , 2 , 3 , 4 , 5 ] # Use a for loop to print out each number in the list for i in numbers : print ( i ) ## 1 ## 2 ## 3 ## 4 ## 5 In Python, the for loop iterates over each element in the numbers list, assigning the current element to the variable i. The print(i) statement is then executed for each iteration, outputting the value of i. Both languages also support nested for loops, which can be used to perform iterations over multiple dimensions, such as looping through a 2D array.","title":"for loops"},{"location":"additional-resources/bilingualism_md/#parallel","text":"Parallel computing is a technique used to execute multiple computational tasks simultaneously, which can significantly reduce the time required to complete a task. Both R and Python have built-in support for parallel computing, although the approaches are slightly different. In this answer, we will compare and contrast the parallel computing capabilities of R and Python, and provide working examples in code. Parallel computing in R In R, there are several packages that support parallel computing, such as parallel, foreach, and doParallel. The parallel package provides basic functionality for parallel computing, while foreach and doParallel provide higher-level abstractions that make it easier to write parallel code. Here is an example of using the foreach package to execute a loop in parallel: R code: library ( foreach ) library ( doParallel ) # Set up a parallel backend with 4 workers cl <- makeCluster ( 4 ) registerDoParallel ( cl ) # Define a function to apply in parallel myfunc <- function ( x ) { # some computation here return ( x ^ 2 ) } # Generate some data mydata <- 1 : 1000 # Apply the function to the data in parallel result <- foreach ( i = mydata ) %dopar% { myfunc ( i ) } # Stop the cluster stopCluster ( cl ) In this example, we use the makeCluster() function to set up a cluster with 4 workers, and the registerDoParallel() function to register the cluster as the parallel backend for foreach. We then define a function myfunc() that takes an input x and returns x^2. We generate some data mydata and use foreach to apply myfunc() to each element of mydata in parallel, using the %dopar% operator. R Tidyverse parallel In R Tidyverse, we can use the furrr package for parallel computing. Here\u2019s an example of using furrr to parallelize a map function: R Tidy code: library ( tidyverse ) library ( furrr ) # Generate a list of numbers numbers <- 1 : 10 # Use the future_map function from furrr to parallelize the map function plan ( multisession ) squares <- future_map ( numbers , function ( x ) x ^ 2 ) In this example, we first load the Tidyverse and furrr libraries. We then generate a list of numbers from 1 to 10. We then use the plan function to set the parallelization strategy to \u201cmultisession\u201d, which will use multiple CPU cores to execute the code. Finally, we use the future_map function from furrr to apply the function x^2 to each number in the list in parallel. Parallel computing in Python In Python, the standard library includes the multiprocessing module, which provides basic support for parallel computing. Additionally, there are several third-party packages that provide higher-level abstractions, such as joblib and dask. Here is an example of using the multiprocessing module to execute a loop in parallel: Python code: def square ( x ): return x ** 2 from multiprocessing import Pool # Generate a list of numbers numbers = list ( range ( 1 , 11 )) # Use the map function and a pool of workers to parallelize the square function with Pool () as pool : squares = pool . map ( square , numbers ) print ( squares ) In this example, we define a function myfunc() that takes an input x and returns x^2. We generate some data mydata and use the Pool class from the multiprocessing module to set up a pool of 4 workers. We then use the map() method of the Pool class to apply myfunc() to each element of mydata in parallel. Comparison and contrast Both R and Python have built-in support for parallel computing, with similar basic functionality for creating and managing parallel processes. However, the higher-level abstractions differ between the two languages. In R, the foreach package provides a high-level interface that makes it easy to write parallel code, while in Python, the multiprocessing module provides a basic interface that can be extended using third-party packages like joblib and dask. Additionally, Python has better support for distributed computing using frameworks like Apache Spark, while R has better support for shared-memory parallelism using tools like data.table and ff.","title":"Parallel"},{"location":"additional-resources/bilingualism_md/#data-wrangling","text":"Data wrangling is an important part of any data analysis project, and both R and Python provide tools and libraries for performing this task. In this answer, we will compare and contrast data wrangling in R\u2019s tidyverse and Python\u2019s pandas library, with working examples in code. Data Wrangling in R Tidyverse The tidyverse is a collection of R packages designed for data science, and it includes several packages that are useful for data wrangling. One of the most popular packages is dplyr, which provides a grammar of data manipulation for data frames. Here is an example of using dplyr to filter, mutate, and summarize a data frame: R code library ( dplyr ) # Load data data ( mtcars ) # Filter for cars with more than 100 horsepower mtcars %>% filter ( hp > 100 ) %>% # Add a new column with fuel efficiency in km per liter mutate ( kmpl = 0.425 * mpg ) %>% # Group by number of cylinders and summarize group_by ( cyl ) %>% summarize ( mean_hp = mean ( hp ), mean_kmpl = mean ( kmpl )) ## # A tibble: 3 \u00d7 3 ## cyl mean_hp mean_kmpl ## <dbl> <dbl> <dbl> ## 1 4 111 11.0 ## 2 6 122. 8.39 ## 3 8 209. 6.42 In this example, we first filter the mtcars data frame to only include cars with more than 100 horsepower. We then use mutate to create a new column with fuel efficiency in kilometers per liter. Finally, we group the data by the number of cylinders and calculate the mean horsepower and fuel efficiency. Data Wrangling in Python Pandas Pandas is a popular library for data manipulation in Python. It provides a data frame object similar to R\u2019s data frames, along with a wide range of functions for data wrangling. Here is an example of using pandas to filter, transform, and group a data frame: Python code: import pandas as pd # Load data mtcars = pd . read_csv ( 'https://raw.githubusercontent.com/mwaskom/seaborn-data/master/mtcars.csv' ) # Filter for cars with more than 100 horsepower filtered_mtcars = mtcars [ mtcars [ 'hp' ] > 100 ] # Add a new column with fuel efficiency in km per liter filtered_mtcars [ 'kmpl' ] = 0.425 * filtered_mtcars [ 'mpg' ] # Group by number of cylinders and calculate mean horsepower and fuel efficiency grouped_mtcars = filtered_mtcars . groupby ( 'cyl' ) . agg ({ 'hp' : 'mean' , 'kmpl' : 'mean' }) In this example, we first load the mtcars data from a CSV file. We then filter the data to only include cars with more than 100 horsepower, using boolean indexing. We use the assign function to create a new column with fuel efficiency in kilometers per liter. Finally, we group the data by the number of cylinders and calculate the mean horsepower and fuel efficiency. Comparison Overall, both R\u2019s tidyverse and Python\u2019s pandas provide similar functionality for data wrangling. Both allow for filtering, transforming, and aggregating data frames. The syntax for performing these operations is slightly different between the two languages, with R using the %>% operator for chaining operations and Python using method chaining or the apply family of functions. One key difference between the two languages is that R\u2019s tidyverse provides a consistent grammar for data manipulation across its various packages, making it easier to learn and use. However, Python\u2019s pandas library has a larger developer community and is more versatile for use in other applications, such as web development or machine learning. In conclusion, both R and Python provide powerful tools for data wrangling, and the choice between the two ultimately depends on the specific needs of the user and their familiarity","title":"Data wrangling"},{"location":"additional-resources/bilingualism_md/#data-from-api","text":"Retrieving data from an API is a common task in both R and Python. Here are examples of how to retrieve data from an API in both languages: Python To retrieve data from an API in Python, we can use the requests library. Here\u2019s an example of how to retrieve weather data from the OpenWeatherMap API: Python code: import requests url = 'https://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=API_KEY' response = requests . get ( url ) data = response . json () print ( data ) This code retrieves the current weather data for London from the OpenWeatherMap API. We first construct the API URL with the location and API key, then use the requests.get() function to make a request to the API. We then extract the JSON data from the response using the .json() method and print the resulting data. R In R, we can use the httr package to retrieve data from an API. Here\u2019s an example of how to retrieve weather data from the OpenWeatherMap API in R: R code: library ( httr ) url <- 'https://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=API_KEY' response <- GET ( url ) data <- content ( response , 'text' ) print ( data ) This code is similar to the Python code above. We first load the httr library, then construct the API URL and use the GET() function to make a request to the API. We then extract the data from the response using the content() function and print the resulting data. Retrieving Data from an API in R Tidyverse In R Tidyverse, we can use the httr and jsonlite packages to retrieve and process data from an API. R code: # Load required packages library ( httr ) library ( jsonlite ) # Define API endpoint endpoint <- \"https://jsonplaceholder.typicode.com/posts\" # Retrieve data from API response <- GET ( endpoint ) # Extract content from response content <- content ( response , \"text\" ) # Convert content to JSON json <- fromJSON ( content ) # Convert JSON to a data frame df <- as.data.frame ( json ) In the above example, we use the GET() function from the httr package to retrieve data from an API endpoint, and the content() function to extract the content of the response. We then use the fromJSON() function from the jsonlite package to convert the JSON content to a list, and the as.data.frame() function to convert the list to a data frame. Retrieving Data from an API in Python In Python, we can use the requests library to retrieve data from an API, and the json library to process the JSON data. Python code: # Load required libraries import requests import json # Define API endpoint endpoint = \"https://jsonplaceholder.typicode.com/posts\" # Retrieve data from API response = requests . get ( endpoint ) # Extract content from response content = response . content # Convert content to JSON json_data = json . loads ( content ) # Convert JSON to a list of dictionaries data = [ dict ( row ) for row in json_data ] In the above example, we use the get() function from the requests library to retrieve data from an API endpoint, and the content attribute to extract the content of the response. We then use the loads() function from the json library to convert the JSON content to a list of dictionaries. Comparison Both R Tidyverse and Python provide powerful tools for retrieving and processing data from an API. In terms of syntax, the two languages are somewhat similar. In both cases, we use a library to retrieve data from the API, extract the content of the response, and then process the JSON data. However, there are some differences in the specific functions and methods used. For example, in R Tidyverse, we use the content() function to extract the content of the response, whereas in Python, we use the content attribute. Additionally, in R Tidyverse, we use the fromJSON() function to convert the JSON data to a list, whereas in Python, we use the loads() function.","title":"Data from API"},{"location":"additional-resources/bilingualism_md/#census-data","text":"Retrieving USA census data in R, R Tidy, and Python can be done using different packages and libraries. Here are some working examples in code for each language: R: To retrieve census data in R, we can use the tidycensus package. Here\u2019s an example of how to retrieve the total population for the state of California: R code: library ( tidycensus ) library ( tidyverse ) # Set your Census API key census_api_key ( \"your_api_key\" ) # Get the total population for the state of California ca_pop <- get_acs ( geography = \"state\" , variables = \"B01003_001\" , state = \"CA\" ) %>% rename ( total_population = estimate ) %>% select ( total_population ) # View the result ca_pop R Tidy: To retrieve census data in R Tidy, we can also use the tidycensus package. Here\u2019s an example of how to retrieve the total population for the state of California using pipes and dplyr functions: R tidy code: library ( tidycensus ) library ( tidyverse ) # Set your Census API key census_api_key ( \"your_api_key\" ) # Get the total population for the state of California ca_pop <- get_acs ( geography = \"state\" , variables = \"B01003_001\" , state = \"CA\" ) %>% rename ( total_population = estimate ) %>% select ( total_population ) # View the result ca_pop Python: To retrieve census data in Python, we can use the census library. Here\u2019s an example of how to retrieve the total population for the state of California: Python code: from census import Census from us import states import pandas as pd # Set your Census API key c = Census ( \"your_api_key\" ) # Get the total population for the state of California ca_pop = c . acs5 . state (( \"B01003_001\" ), states . CA . fips , year = 2019 ) # Convert the result to a Pandas DataFrame ca_pop_df = pd . DataFrame ( ca_pop ) # Rename the column ca_pop_df = ca_pop_df . rename ( columns = { \"B01003_001E\" : \"total_population\" }) # Select only the total population column ca_pop_df = ca_pop_df [[ \"total_population\" ]] # View the result ca_pop_df","title":"Census data"},{"location":"additional-resources/bilingualism_md/#lidar-data","text":"To find Lidar data in R and Python, you typically need to start by identifying sources of Lidar data and then accessing them using appropriate packages and functions. Here are some examples of how to find Lidar data in R and Python: R: Identify sources of Lidar data: The USGS National Map Viewer provides access to Lidar data for the United States. You can also find Lidar data on state and local government websites, as well as on commercial data providers\u2019 websites. Access the data: You can use the lidR package in R to download and read Lidar data in the LAS format. For example, the following code downloads and reads Lidar data for a specific area: R code: library ( lidR ) # Download Lidar data LASfile <- system.file ( \"extdata\" , \"Megaplot.laz\" , package = \"lidR\" ) lidar <- readLAS ( LASfile ) # Visualize the data plot ( lidar ) Python: Identify sources of Lidar data: The USGS 3DEP program provides access to Lidar data for the United States. You can also find Lidar data on state and local government websites, as well as on commercial data providers\u2019 websites. Access the data: You can use the pylastools package in Python to download and read Lidar data in the LAS format. For example, the following code downloads and reads Lidar data for a specific area: Python code: py_install ( \"requests\" ) py_install ( \"pylas\" ) py_install ( \"laspy\" ) import requests from pylas import read import laspy import numpy as np # Download Lidar data url = \"https://s3-us-west-2.amazonaws.com/usgs-lidar-public/USGS_LPC_CA_SanFrancisco_2016_LAS_2018.zip\" lasfile = \"USGS_LPC_CA_SanFrancisco_2016_LAS_2018.las\" r = requests . get ( url , allow_redirects = True ) open ( lasfile , 'wb' ) . write ( r . content ) # Read the data lidar = read ( lasfile ) # Visualize the data laspy . plot . plot ( lidar )","title":"Lidar data"},{"location":"additional-resources/bilingualism_md/#data-for-black-lives","text":"Data for Black Lives ( https://d4bl.org/ ) is a movement that uses data science to create measurable change in the lives of Black people. While the Data for Black Lives website provides resources, reports, articles, and datasets related to racial equity, it doesn\u2019t provide a direct API for downloading data. Instead, you can access the Data for Black Lives GitHub repository ( https://github.com/Data4BlackLives ) to find datasets and resources to work with. In this example, we\u2019ll use a sample dataset available at https://github.com/Data4BlackLives/covid-19/tree/master/data . The dataset \u201cCOVID19_race_data.csv\u201d contains COVID-19 race-related data. R: In R, we\u2019ll use the \u2018readr\u2019 and \u2018dplyr\u2019 packages to read, process, and analyze the dataset. R code: # Install and load necessary libraries library ( readr ) library ( dplyr ) # Read the CSV file url <- \"https://raw.githubusercontent.com/Data4BlackLives/covid-19/master/data/COVID19_race_data.csv\" data <- read_csv ( url ) # Basic information about the dataset print ( dim ( data )) print ( head ( data )) # Example analysis: calculate the mean of 'cases_total' by 'state' data %>% group_by ( state ) %>% summarize ( mean_cases_total = mean ( cases_total , na.rm = TRUE )) %>% arrange ( desc ( mean_cases_total )) Python: In Python, we\u2019ll use the \u2018pandas\u2019 library to read, process, and analyze the dataset. Python code: import pandas as pd # Read the CSV file url = \"https://raw.githubusercontent.com/Data4BlackLives/covid-19/master/data/COVID19_race_data.csv\" data = pd . read_csv ( url ) # Basic information about the dataset print ( data . shape ) print ( data . head ()) # Example analysis: calculate the mean of 'cases_total' by 'state' mean_cases_total = data . groupby ( \"state\" )[ \"cases_total\" ] . mean () . sort_values ( ascending = False ) print ( mean_cases_total ) In conclusion, both R and Python provide powerful libraries and tools for downloading, processing, and analyzing datasets, such as those found in the Data for Black Lives repository. The \u2018readr\u2019 and \u2018dplyr\u2019 libraries in R offer a simple and intuitive way to read and manipulate data, while the \u2018pandas\u2019 library in Python offers similar functionality with a different syntax. Depending on your preferred programming language and environment, both options can be effective in working with social justice datasets.","title":"Data for black lives"},{"location":"additional-resources/bilingualism_md/#propublica-congress-api","text":"The ProPublica Congress API provides information about the U.S. Congress members and their voting records. In this example, we\u2019ll fetch data about the current Senate members and calculate the number of members in each party. R: In R, we\u2019ll use the \u2018httr\u2019 and \u2018jsonlite\u2019 packages to fetch and process data from the ProPublica Congress API. R code: # load necessary libraries library ( httr ) library ( jsonlite ) # Replace 'your_api_key' with your ProPublica API key # # Fetch data about the current Senate members url <- \"https://api.propublica.org/congress/v1/117/senate/members.json\" response <- GET ( url , add_headers ( `X-API-Key` = api_key )) # Check if the request was successful if ( http_status ( response ) $ category == \"Success\" ) { data <- content ( response , \"parsed\" ) members <- data $ results [[ 1 ]] $ members # Calculate the number of members in each party party_counts <- table ( sapply ( members , function ( x ) x $ party )) print ( party_counts ) } else { print ( http_status ( response ) $ message ) } ## ## D I ID R ## 49 1 2 51 Python: In Python, we\u2019ll use the \u2018requests\u2019 library to fetch data from the ProPublica Congress API and \u2018pandas\u2019 library to process the data. python code: # Install necessary libraries import requests import pandas as pd # Replace 'your_api_key' with your ProPublica API key api_key = \"your_api_key\" headers = { \"X-API-Key\" : api_key } # Fetch data about the current Senate members url = \"https://api.propublica.org/congress/v1/117/senate/members.json\" response = requests . get ( url , headers = headers ) # Check if the request was successful if response . status_code == 200 : data = response . json () members = data [ \"results\" ][ 0 ][ \"members\" ] # Calculate the number of members in each party party_counts = pd . DataFrame ( members )[ \"party\" ] . value_counts () print ( party_counts ) else : print ( f \"Error: { response . status_code } \" ) In conclusion, both R and Python offer efficient ways to fetch and process data from APIs like the ProPublica Congress API. The \u2018httr\u2019 and \u2018jsonlite\u2019 libraries in R provide a straightforward way to make HTTP requests and parse JSON data, while the \u2018requests\u2019 library in Python offers similar functionality. The \u2018pandas\u2019 library in Python can be used for data manipulation and analysis, and R provides built-in functions like table() for aggregating data. Depending on your preferred programming language and environment, both options can be effective for working with the ProPublica Congress API.","title":"Propublica Congress API"},{"location":"additional-resources/bilingualism_md/#nonprofit-explorer-api-by-propublica","text":"The Nonprofit Explorer API by ProPublica provides data on tax-exempt organizations in the United States. In this example, we\u2019ll search for organizations with the keyword \u201ceducation\u201d and analyze the results. R: In R, we\u2019ll use the \u2018httr\u2019 and \u2018jsonlite\u2019 packages to fetch and process data from the Nonprofit Explorer API. R code: # Install and load necessary libraries library ( httr ) library ( jsonlite ) # Fetch data for organizations with the keyword \"education\" url <- \"https://projects.propublica.org/nonprofits/api/v2/search.json?q=education\" response <- GET ( url ) # Check if the request was successful if ( http_status ( response ) $ category == \"Success\" ) { data <- content ( response , \"parsed\" ) organizations <- data $ organizations # Count the number of organizations per state state_counts <- table ( sapply ( organizations , function ( x ) x $ state )) print ( state_counts ) } else { print ( http_status ( response ) $ message ) } ## ## AZ CA CO DC FL GA HI IL Indiana LA ## 3 22 6 5 3 2 1 2 1 1 ## MD MI MN MO MP MS NC NE NJ NM ## 1 2 5 3 1 1 2 2 2 1 ## NY OH OK Oregon PA TX UT VA WA WV ## 1 5 1 2 2 12 1 4 3 1 ## ZZ ## 2 Python: In Python, we\u2019ll use the \u2018requests\u2019 library to fetch data from the Nonprofit Explorer API and \u2018pandas\u2019 library to process the data. Python code: # Install necessary libraries import requests import pandas as pd # Fetch data for organizations with the keyword \"education\" url = \"https://projects.propublica.org/nonprofits/api/v2/search.json?q=education\" response = requests . get ( url ) # Check if the request was successful if response . status_code == 200 : data = response . json () organizations = data [ \"organizations\" ] # Count the number of organizations per state state_counts = pd . DataFrame ( organizations )[ \"state\" ] . value_counts () print ( state_counts ) else : print ( f \"Error: { response . status_code } \" ) ## CA 22 ## TX 12 ## CO 6 ## MN 5 ## OH 5 ## DC 5 ## VA 4 ## AZ 3 ## WA 3 ## MO 3 ## FL 3 ## IL 2 ## GA 2 ## NC 2 ## MI 2 ## Oregon 2 ## NE 2 ## ZZ 2 ## PA 2 ## NJ 2 ## HI 1 ## MS 1 ## NY 1 ## Indiana 1 ## NM 1 ## LA 1 ## UT 1 ## MD 1 ## MP 1 ## WV 1 ## OK 1 ## Name: state, dtype: int64 In conclusion, both R and Python offer efficient ways to fetch and process data from APIs like the Nonprofit Explorer API. The \u2018httr\u2019 and \u2018jsonlite\u2019 libraries in R provide a straightforward way to make HTTP requests and parse JSON data, while the \u2018requests\u2019 library in Python offers similar functionality. The \u2018pandas\u2019 library in Python can be used for data manipulation and analysis, and R provides built-in functions like table() for aggregating data. Depending on your preferred programming language and environment, both options can be effective for working with the Nonprofit Explorer API.","title":"Nonprofit Explorer API by ProPublica"},{"location":"additional-resources/bilingualism_md/#campaign-finance-api-by-propublica","text":"The Campaign Finance API by the Federal Election Commission (FEC) provides data on campaign finance in U.S. federal elections. In this example, we\u2019ll fetch data about individual contributions for the 2020 election cycle and analyze the results. R: In R, we\u2019ll use the \u2018httr\u2019 and \u2018jsonlite\u2019 packages to fetch and process data from the Campaign Finance API. R code: # Install and load necessary libraries library ( httr ) library ( jsonlite ) # Fetch data about individual contributions for the 2020 election cycle url <- \"https://api.open.fec.gov/v1/schedules/schedule_a/?api_key='OGwpkX7tH5Jihs1qQcisKfVAMddJzmzouWKtKoby'&two_year_transaction_period=2020&sort_hide_null=false&sort_null_only=false&per_page=20&page=1\" response <- GET ( url ) # Check if the request was successful if ( http_status ( response ) $ category == \"Success\" ) { data <- content ( response , \"parsed\" ) contributions <- data $ results # Calculate the total contributions per state state_totals <- aggregate ( contributions $ contributor_state , by = list ( contributions $ contributor_state ), FUN = sum ) colnames ( state_totals ) <- c ( \"State\" , \"Total_Contributions\" ) print ( state_totals ) } else { print ( http_status ( response ) $ message ) } ## [1] \"Client error: (403) Forbidden\" Python: In Python, we\u2019ll use the \u2018requests\u2019 library to fetch data from the Campaign Finance API and \u2018pandas\u2019 library to process the data. Python code: # Install necessary libraries import requests import pandas as pd # Fetch data about individual contributions for the 2020 election cycle url = \"https://api.open.fec.gov/v1/schedules/schedule_a/?api_key=your_api_key&two_year_transaction_period=2020&sort_hide_null=false&sort_null_only=false&per_page=20&page=1\" response = requests . get ( url ) # Check if the request was successful if response . status_code == 200 : data = response . json () contributions = data [ \"results\" ] # Calculate the total contributions per state df = pd . DataFrame ( contributions ) state_totals = df . groupby ( \"contributor_state\" )[ \"contribution_receipt_amount\" ] . sum () print ( state_totals ) else : print ( f \"Error: { response . status_code } \" ) ## Error: 403 In conclusion, both R and Python offer efficient ways to fetch and process data from APIs like the Campaign Finance API. The \u2018httr\u2019 and \u2018jsonlite\u2019 libraries in R provide a straightforward way to make HTTP requests and parse JSON data, while the \u2018requests\u2019 library in Python offers similar functionality. The \u2018pandas\u2019 library in Python can be used for data manipulation and analysis, and R provides built-in functions like aggregate() for aggregating data. Depending on your preferred programming language and environment, both options can be effective for working with the Campaign Finance API. Note: Remember to replace your_api_key with your actual FEC API key in the code examples above.","title":"Campaign Finance API by ProPublica"},{"location":"additional-resources/bilingualism_md/#historic-redlining","text":"Historic redlining data refers to data from the Home Owners\u2019 Loan Corporation (HOLC) that created residential security maps in the 1930s, which contributed to racial segregation and disinvestment in minority neighborhoods. One popular source for this data is the Mapping Inequality project ( https://dsl.richmond.edu/panorama/redlining/ ). In this example, we\u2019ll download historic redlining data for Philadelphia in the form of a GeoJSON file and analyze the data in R and Python. R: In R, we\u2019ll use the \u2018sf\u2019 and \u2018dplyr\u2019 packages to read and process the GeoJSON data. R code: # Install and load necessary libraries library ( sf ) library ( dplyr ) # Download historic redlining data for Philadelphia url <- \"https://dsl.richmond.edu/panorama/redlining/static/downloads/geojson/PAPhiladelphia1937.geojson\" philly_geojson <- read_sf ( url ) # Count the number of areas per HOLC grade grade_counts <- philly_geojson %>% group_by ( holc_grade ) %>% summarize ( count = n ()) plot ( grade_counts ) Python: In Python, we\u2019ll use the \u2018geopandas\u2019 library to read and process the GeoJSON data. Python code: # Install necessary libraries import geopandas as gpd # Download historic redlining data for Philadelphia url = \"https://dsl.richmond.edu/panorama/redlining/static/downloads/geojson/PAPhiladelphia1937.geojson\" philly_geojson = gpd . read_file ( url ) # Count the number of areas per HOLC grade grade_counts = philly_geojson [ \"holc_grade\" ] . value_counts () print ( grade_counts ) ## B 28 ## D 26 ## C 18 ## A 10 ## Name: holc_grade, dtype: int64 In conclusion, both R and Python offer efficient ways to download and process historic redlining data in the form of GeoJSON files. The \u2018sf\u2019 package in R provides a simple way to read and manipulate spatial data, while the \u2018geopandas\u2019 library in Python offers similar functionality. The \u2018dplyr\u2019 package in R can be used for data manipulation and analysis, and Python\u2019s built-in functions like value_counts() can be used for aggregating data. Depending on your preferred programming language and environment, both options can be effective for working with historic redlining data.","title":"Historic Redlining"},{"location":"additional-resources/bilingualism_md/#american-indian-and-alaska-native-areas-aiannh","text":"In this example, we\u2019ll download and analyze the American Indian and Alaska Native Areas (AIANNH) TIGER/Line Shapefile from the U.S. Census Bureau. We\u2019ll download the data for the year 2020, and analyze the number of AIANNH per congressional district R: In R, we\u2019ll use the \u2018sf\u2019 and \u2018dplyr\u2019 packages to read and process the Shapefile data. R code: # Install and load necessary libraries library ( sf ) library ( dplyr ) # Download historic redlining data for Philadelphia url <- \"https://www2.census.gov/geo/tiger/TIGER2020/AIANNH/tl_2020_us_aiannh.zip\" temp_file <- tempfile ( fileext = \".zip\" ) download.file ( url , temp_file , mode = \"wb\" ) unzip ( temp_file , exdir = tempdir ()) # Read the Shapefile shapefile_path <- file.path ( tempdir (), \"tl_2020_us_aiannh.shp\" ) aiannh <- read_sf ( shapefile_path ) # Count the number of AIANNH per congressional district state_counts <- aiannh %>% group_by ( LSAD ) %>% summarize ( count = n ()) print ( state_counts [ order ( - state_counts $ count ),]) ## Simple feature collection with 26 features and 2 fields ## Geometry type: GEOMETRY ## Dimension: XY ## Bounding box: xmin: -174.236 ymin: 18.91069 xmax: -67.03552 ymax: 71.34019 ## Geodetic CRS: NAD83 ## # A tibble: 26 \u00d7 3 ## LSAD count geometry ## <chr> <int> <MULTIPOLYGON [\u00b0]> ## 1 79 221 (((-166.5331 65.33918, -166.5331 65.33906, -166.533 65.33699, -1\u2026 ## 2 86 206 (((-83.38811 35.46645, -83.38342 35.46596, -83.38316 35.46593, -\u2026 ## 3 OT 155 (((-92.32972 47.81374, -92.3297 47.81305, -92.32967 47.81196, -9\u2026 ## 4 78 75 (((-155.729 20.02457, -155.7288 20.02428, -155.7288 20.02427, -1\u2026 ## 5 85 46 (((-122.3355 37.95215, -122.3354 37.95206, -122.3352 37.95199, -\u2026 ## 6 92 35 (((-93.01356 31.56287, -93.01354 31.56251, -93.01316 31.56019, -\u2026 ## 7 88 25 (((-97.35299 36.908, -97.35291 36.90801, -97.35287 36.908, -97.3\u2026 ## 8 96 19 (((-116.48 32.63814, -116.48 32.63718, -116.4794 32.63716, -116.\u2026 ## 9 84 16 (((-105.5937 36.40379, -105.5937 36.40324, -105.5937 36.40251, -\u2026 ## 10 89 11 (((-95.91705 41.28037, -95.91653 41.28036, -95.91653 41.28125, -\u2026 ## # \u2139 16 more rows Python: In Python, we\u2019ll use the \u2018geopandas\u2019 library to read and process the Shapefile data. Python code: import geopandas as gpd import pandas as pd import requests import zipfile import os from io import BytesIO # Download historic redlining data for Philadelphia url = \"https://www2.census.gov/geo/tiger/TIGER2020/AIANNH/tl_2020_us_aiannh.zip\" response = requests . get ( url ) zip_file = zipfile . ZipFile ( BytesIO ( response . content )) # Extract Shapefile temp_dir = \"temp\" if not os . path . exists ( temp_dir ): os . makedirs ( temp_dir ) zip_file . extractall ( path = temp_dir ) shapefile_path = os . path . join ( temp_dir , \"tl_2020_us_aiannh.shp\" ) # Read the Shapefile aiannh = gpd . read_file ( shapefile_path ) # Count the number of AIANNH per congressional district state_counts = aiannh . groupby ( \"LSAD\" ) . size () . reset_index ( name = \"count\" ) # Sort by descending count state_counts_sorted = state_counts . sort_values ( by = \"count\" , ascending = False ) print ( state_counts_sorted ) ## LSAD count ## 2 79 221 ## 9 86 206 ## 25 OT 155 ## 1 78 75 ## 8 85 46 ## 15 92 35 ## 11 88 25 ## 19 96 19 ## 7 84 16 ## 12 89 11 ## 5 82 8 ## 3 80 7 ## 4 81 6 ## 21 98 5 ## 20 97 5 ## 13 90 4 ## 18 95 3 ## 6 83 3 ## 17 94 2 ## 16 93 1 ## 14 91 1 ## 10 87 1 ## 22 99 1 ## 23 9C 1 ## 24 9D 1 ## 0 00 1 In conclusion, both R and Python offer efficient ways to download and process AIANNH TIGER/Line Shapefile data from the U.S. Census Bureau. The \u2018sf\u2019 package in R provides a simple way to read and manipulate spatial data, while the \u2018geopandas\u2019 library in Python offers similar functionality. The \u2018dplyr\u2019 package in R can be used for data manipulation and analysis, and Python\u2019s built-in functions like value_counts() can be used for aggregating data. Depending on your preferred programming language and environment, both options can be effective for working with AIANNH data.","title":"American Indian and Alaska Native Areas (AIANNH)"},{"location":"additional-resources/bilingualism_md/#indian-entities-recognized-and-eligible-to-receive-services-by-bia","text":"The Bureau of Indian Affairs (BIA) provides a PDF document containing a list of Indian Entities Recognized and Eligible To Receive Services. To analyze the data, we\u2019ll first need to extract the information from the PDF. In this example, we\u2019ll extract the names of the recognized tribes and count the number of tribes per state. R: In R, we\u2019ll use the \u2018pdftools\u2019 package to extract text from the PDF and the \u2018stringr\u2019 package to process the text data. R code: # Install and load necessary libraries library ( pdftools ) library ( stringr ) library ( dplyr ) # Download the BIA PDF url <- \"https://www.govinfo.gov/content/pkg/FR-2022-01-28/pdf/2022-01789.pdf\" temp_file <- tempfile ( fileext = \".pdf\" ) download.file ( url , temp_file , mode = \"wb\" ) # Extract text from the PDF pdf_text <- pdf_text ( temp_file ) tribe_text <- pdf_text [ 4 : length ( pdf_text )] # Define helper functions tribe_state_extractor <- function ( text_line ) { regex_pattern <- \"(.*),\\\\s+([A-Z]{2})$\" tribe_state <- str_match ( text_line , regex_pattern ) return ( tribe_state ) } is_valid_tribe_line <- function ( text_line ) { regex_pattern <- \"^\\\\d+\\\\s+\" return ( ! is.na ( str_match ( text_line , regex_pattern ))) } # Process text data to extract tribes and states tribe_states <- sapply ( tribe_text , tribe_state_extractor ) valid_lines <- sapply ( tribe_text , is_valid_tribe_line ) tribe_states <- tribe_states [ valid_lines , 2 : 3 ] # Count the number of tribes per state tribe_data <- as.data.frame ( tribe_states ) colnames ( tribe_data ) <- c ( \"Tribe\" , \"State\" ) state_counts <- tribe_data %>% group_by ( State ) %>% summarise ( Count = n ()) print ( state_counts ) ## # A tibble: 0 \u00d7 2 ## # \u2139 2 variables: State <chr>, Count <int> Python: In Python, we\u2019ll use the \u2018PyPDF2\u2019 library to extract text from the PDF and the \u2018re\u2019 module to process the text data. Python code: # Install necessary libraries import requests import PyPDF2 import io import re from collections import Counter # Download the BIA PDF url = \"https://www.bia.gov/sites/bia.gov/files/assets/public/raca/online-tribal-leaders-directory/tribal_leaders_2021-12-27.pdf\" response = requests . get ( url ) # Extract text from the PDF pdf_reader = PyPDF2 . PdfFileReader ( io . BytesIO ( response . content )) tribe_text = [ pdf_reader . getPage ( i ) . extractText () for i in range ( 3 , pdf_reader . numPages )] # Process text data to extract tribes and states tribes = [ re . findall ( r '^\\d+\\s+(.+),\\s+([A-Z] {2} )' , line ) for text in tribe_text for line in text . split ( ' \\n ' ) if line ] tribe_states = [ state for tribe , state in tribes ] # Count the number of tribes per state state_counts = Counter ( tribe_states ) print ( state_counts ) In conclusion, both R and Python offer efficient ways to download and process the list of Indian Entities Recognized and Eligible To Receive Services from the BIA. The \u2018pdftools\u2019 package in R provides a simple way to extract text from PDF files, while the \u2018PyPDF2\u2019 library in Python offers similar functionality. The \u2018stringr\u2019 package in R and the \u2018re\u2019 module in Python can be used to process and analyze text data. Depending on your preferred programming language and environment, both options can be effective for working with BIA data.","title":"Indian Entities Recognized and Eligible To Receive Services by BIA"},{"location":"additional-resources/bilingualism_md/#national-atlas-indian-lands-of-the-united-states-dataset","text":"In this example, we will download and analyze the National Atlas - Indian Lands of the United States dataset in both R and Python. We will read the dataset and count the number of Indian lands per state. R: In R, we\u2019ll use the \u2018sf\u2019 package to read the Shapefile and the \u2018dplyr\u2019 package to process the data. R code: # Install and load necessary libraries library ( sf ) library ( dplyr ) # Download the Indian Lands dataset url <- \"https://prd-tnm.s3.amazonaws.com/StagedProducts/Small-scale/data/Boundaries/indlanp010g.shp_nt00968.tar.gz\" temp_file <- tempfile ( fileext = \".tar.gz\" ) download.file ( url , temp_file , mode = \"wb\" ) untar ( temp_file , exdir = tempdir ()) # Read the Shapefile shapefile_path <- file.path ( tempdir (), \"indlanp010g.shp\" ) indian_lands <- read_sf ( shapefile_path ) # Count the number of Indian lands per state # state_counts <- indian_lands %>% # group_by(STATE) %>% # summarize(count = n()) plot ( indian_lands ) ## Warning: plotting the first 9 out of 23 attributes; use max.plot = 23 to plot ## all Python: In Python, we\u2019ll use the \u2018geopandas\u2019 and \u2018pandas\u2019 libraries to read the Shapefile and process the data. Python code: import geopandas as gpd import pandas as pd import requests import tarfile import os from io import BytesIO # Download the Indian Lands dataset url = \"https://prd-tnm.s3.amazonaws.com/StagedProducts/Small-scale/data/Boundaries/indlanp010g.shp_nt00966.tar.gz\" response = requests . get ( url ) tar_file = tarfile . open ( fileobj = BytesIO ( response . content ), mode = 'r:gz' ) # Extract Shapefile temp_dir = \"temp\" if not os . path . exists ( temp_dir ): os . makedirs ( temp_dir ) tar_file . extractall ( path = temp_dir ) shapefile_path = os . path . join ( temp_dir , \"indlanp010g.shp\" ) # Read the Shapefile indian_lands = gpd . read_file ( shapefile_path ) # Count the number of Indian lands per state state_counts = indian_lands . groupby ( \"STATE\" ) . size () . reset_index ( name = \"count\" ) print ( state_counts ) Both R and Python codes download the dataset and read the Shapefile using the respective packages. They then group the data by the \u2018STATE\u2019 attribute and calculate the count of Indian lands per state.","title":"National Atlas - Indian Lands of the United States dataset"},{"location":"additional-resources/code-of-conduct/","text":"Code of Conduct and Respectful Inclusive Collaboration Guidelines \u00b6 Environmental Data Science Innovation & Inclusion Lab (ESIIL) is committed to building, maintaining, and fostering an inclusive, kind, collaborative, and diverse transdisciplinary environmental data science community, whose members feel welcome, supported, and safe to contribute ideas and knowledge. The 2024 ESIIL Innovation Summit will follow all aspects of the ESIIL Code of Conduct (below). All community members are responsible for creating this culture, embodying our values, welcoming diverse perspectives and ways of knowing, creating safe inclusive spaces, and conducting ethical science as guided by FAIR (Findable, Accessible, Interoperable, Reusable) and CARE (Collective Benefit, Authority to Control, Responsibility, and Ethics) principles for scientific and Indigenous data management, governance, and stewardship. Our values \u00b6 ESIIL\u2019s vision is grounded in the conviction that innovation and breakthroughs in environmental data science will be precipitated by a diverse, collaborative, curious, and inclusive research community empowered by open data and infrastructure, cross-sector and community partnerships, team science, and engaged learning. As such, our core values center people through inclusion, kindness, respect, collaboration, and genuine relationships. They also center innovation, driven by collaborative, cross-sector science and synthesis, open, accessible data and tools, and fun, diverse teams. Finally, they center learning, propelled by curiosity and accessible, inclusive training, and education opportunities. When and how to use these guidelines \u00b6 These guidelines outline behavior expectations for ESIIL community members. Your participation in the ESIIL network is contingent upon following these guidelines in all ESIIL activities, including, but not limited to, participating in meetings, webinars, hackathons, working groups, hosted or funded by ESIIL, as well as email lists and online forums such as GutHub, Slack, and Twitter. These guidelines have been adapted from those of the International Arctic Research Policy Committee, the Geological Society of America, the American Geophysical Union, the University Corporation for Atmospheric Research, The Carpentries, and others. We encourage other organizations to adapt these guidelines for use in their own meetings. Note: Working groups and hackathon/codefest teams are encouraged to discuss these guidelines and what they mean to them, and will have the opportunity to add to them to specifically support and empower their team. Collaborative and behavior commitments complement data use, management, authorship, and access plans that commit to CARE and FAIR principles. Behavior Agreements \u00b6 ESIIL community members are expected to act professionally and respectfully in all activities, such that each person, regardless of gender, gender identity or expression, sexual orientation, disability, physical appearance, age, body size, race, religion, national origin, ethnicity, level of experience, language fluency, political affiliation, veteran status, pregnancy, country of origin, and any other characteristic protected under state or federal law, feels safe and welcome in our activities and community. We gain strength from diversity and actively seek participation from those who enhance it. In order to garner the benefits of a diverse community and to reach the full potential of our mission and charge, ESIIL participants must be allowed to develop a sense of belonging and trust within a respectful, inclusive, and collaborative culture. Guiding behaviors that contribute to this culture include, but are not limited to: Showing Respect \u00b6 Listen carefully \u2013 we each bring our own styles of communication, language, and ideas, and we must do our best to accept and accommodate differences. Do not interrupt when someone is speaking and maintain an open mind when others have different ideas than yours. Be present \u2013 when engaging with others, give them your full attention. If you need to respond to outside needs, please step away from the group quietly. Be kind \u2013 offer positive, supportive comments and constructive feedback. Critique ideas, not people. Harassment, discrimination, bullying, aggression, including offensive comments, jokes, and imagery, are unacceptable, regardless of intent, and will not be tolerated. Be punctual - adhere to the schedule provided by the organizers and avoid disruptive behavior during presentations, trainings, or working sessions. Respect privacy - be mindful of the confidentiality of others. Always obtain explicit consent before recording, sharing, or using someone else\u2019s personal information, photos, or recordings. Practice good digital etiquette (netiquette) when communicating online, whether in emails, messages, or social media - think before posting online and consider the potential impact on others. Do not share or distribute content generated by or involving others without their explicit consent. Being Inclusive \u00b6 Create space for everyone to participate \u2013 be thoughtful about who is at the table; openly address accessibility needs, and provide multiple ways to contribute. Be welcoming \u2013 ESIIL participants come from a wide range of skill levels and career stages, backgrounds, and cultures. Demonstrate that you value these different perspectives and identities through your words and actions, including through correct use of names, titles, and pronouns. Be self-aware \u2013 recognize that positionality, identity, unconscious biases, and upbringing can all affect how words and behaviors are perceived. Ensure that your words and behavior make others feel welcome. Commit to ongoing learning \u2013 the move toward inclusive, equitable, and just environmental data science is a collective journey. Continue to learn about and apply practices of inclusion, anti-racism, bystander intervention, and cultural sensitivity. None of us is perfect; all of us will, from time to time, fail to live up to our own high standards. Being perfect is not what matters; owning our mistakes and committing to clear and persistent efforts to grow and improve is. Being Curious \u00b6 Check your presumptions \u2013 we each bring our own ideas and assumptions about how the world should and does work \u2013 what are yours, and how do they affect how you interact with others? How do they shape your perception of new ideas? Ask questions \u2013 one of the strengths of interdisciplinary and diverse teams is that we all bring different knowledge and viewpoints; no one person is expected to know everything. So don\u2019t be afraid to ask, to learn, and to share. Be bold \u2013 significant innovations don\u2019t come from incremental efforts. Be brave in proposing and testing new ideas. When things don\u2019t work, learn from the experience. Invite feedback \u2013 new ideas and improvements can emerge from many places when we\u2019re open to hearing them. Check your defensiveness and listen; accept feedback as a gift toward improving our work and ourselves. Being Collaborative \u00b6 Recognize that everyone is bringing something different to the table \u2013 take the time to get to know each other. Keep an open mind, encourage ideas that are different from yours, and learn from each other\u2019s expertise and experience. Be accountable - great team science depends on trust, communication, respect, and delivering on your commitments. Be clear about your needs, as both a requester and a responder, realistic about your time and capacity commitments, and communicate timelines and standards in advance. Make assumptions explicit and provide context wherever possible - misunderstandings are common on transdisciplinary and cross-cultural teams and can best be managed with intentionality. Check in about assumptions, and be willing to share and correct misunderstandings or mistakes when they happen. Make use of collaboration agreements, communicate clearly and avoid jargon wherever possible. Respect intellectual property and Indigenous data sovereignty \u2013 ESIIL recognizes the extractive and abusive history of scientific engagement with Native peoples, and is committed to doing better. Indigenous knowledge holders are under no obligation to share their data, stories or knowledge. Their work should always be credited, and only shared with permission. Follow guidelines for authorship, Indigenous data sovereignty, and CARE principles. Acknowledge and credit the ideas and work of others. Use the resources that we provide - take advantage of the cyberinfrastructure and data cube at your disposal, but do not use them for unrelated tasks, as it could disrupt the event, introduce security risks, undermine the spirit of collaboration and fair play, and erode trust within the event community. Be safe - never share sensitive personal information; use strong passwords for your Cyverse and GitHub accounts and do not share them with other participants; be cautious of unsolicited emails, messages, or links; and verify online contacts. If you encounter any illegal or harmful activities online related to this event, report them to Tyler McIntosh or Susan Sullivan. Finally, speak up if you experience or notice a dangerous situation, or someone in distress! Code of Conduct: Unacceptable behaviors \u00b6 We adopt the full Code of Conduct of our home institution, the University of Colorado, details of which are found here . To summarize, examples of unacceptable and reportable behaviors include, but are not limited to: Harassment, intimidation, or discrimination in any form Physical or verbal abuse by anyone to anyone, including but not limited to a participant, member of the public, guest, member of any institution or sponsor Unwelcome sexual attention or advances Personal attacks directed at other guests, members, participants, etc. Alarming, intimidating, threatening, or hostile comments or conduct Inappropriate use of nudity and/or sexual images in public spaces or in presentations Threatening or stalking anyone Unauthorized use or sharing of personal or confidential information or private communication Continuing interactions, including but not limited to conversations, photographies, recordings, instant messages, and emails, after being asked to stop Ethical and scientific misconduct, including failing to credit contributions or respect intellectual property Engaging in any illegal activities, including hacking, cheating, or unauthorized access to systems or data Using the cyberinfrastructure provided by the organizers for activities unrelated to this event. Other conduct which could reasonably be considered inappropriate in a professional setting. The University of Colorado recognizes all Federal and State protected classes, which include the following: race, color, national origin, sex, pregnancy, age, marital status, disability, creed, religion, sexual orientation, gender identity, gender expression, veteran status, political affiliation or political philosophy. Mistreatment or harassment not related to protected class also has a negative impact and will be addressed by the ESIIL team. Anyone requested to stop unacceptable behavior is expected to comply immediately. If there is a clear violation of the code of conduct during an ESIIL event\u2014for example, a meeting is Zoom bombed or a team member is verbally abusing another participant during a workshop\u2014 ESIIL leaders, facilitators (or their designee) or campus/local police may take any action deemed necessary and appropriate, including expelling the violator, or immediate removal of the violator from any online or in-person event or platform without warning or refund. If such actions are necessary, there will be follow up with the ESIIL Diversity Equity and Inclusion (DEI) team to determine what further action is needed (see Reporting Process and Consequences below). Addressing Behavior Directly \u00b6 For smaller incidents that might be settled with a brief conversation, you may choose to contact the person in question or set up a (video) conversation to discuss how the behavior affected you. Please use this approach only if you feel comfortable; you do not have to carry the weight of addressing these issues yourself. If you are interested in this option but unsure how to go about it, please contact the ESIIL DEI lead, Susan Sullivan, first\u2014she will have advice on how to make the conversation happen and is available to join you in a conversation as requested. Reporting Process and Consequences \u00b6 We take any reports of Code of Conduct violations seriously, and aim to support those who are impacted and ensure that problematic behavior doesn\u2019t happen again. Making a Report \u00b6 If you believe you\u2019re experiencing or have experienced unacceptable behavior that is counter to this code of conduct, or you are witness to this behavior happening to someone else, we encourage you to contact our DEI lead: Susan Sullivan, CIRES Email: susan.sullivan@colorado.edu You may also choose to anonymously report behavior to ESIIL using this form . The DEI team will keep reports as confidential as possible. However, as mandatory reporters, we have an obligation to report alleged protected class violations to our home institution or to law enforcement. Specifically: \u00b6 Cases of potential protected-class harassment will be reported to the CU Office of Institutional Equity and Compliance. If the violation is made by a member of another institution, that information may also be shared with that member\u2019s home institution by the CU Office of Institutional Equity and Compliance under Title IX. In some instances, harassment information may be shared with the National Science Foundation, who are the funding organization of ESIIL. When we discuss incidents with people who are accused of misconduct (the respondent), we will anonymize details as much as possible to protect the privacy of the reporter and the person who was impacted (the complainant). In some cases, even when the details are anonymized, the respondent may guess at the identities of the reporter and complainants. If you have concerns about retaliation or your personal safety, please let us know (or note that in your report). We encourage you to report in any case, so that we can support you while keeping ESIIL members safe. In some cases, we are able to compile several anonymized reports into a pattern of behavior, and take action based on that pattern. If you prefer to speak with someone who is not on the ESIIL leadership team, or who can maintain confidentiality, you may contact: CU Ombuds Phone: 303-492-5077 (for guidance and support navigating difficult conversations) CU Office of Victim Assistance Phone: 303-492-8855 If you want more information about when to report, or how to help someone who needs to report, please review the resources at Don\u2019t Ignore It . Note: The reporting party does not need to be directly involved in a code of conduct violation incident. Please make a bystander report if you observe a potentially dangerous situation, someone in distress, or violations of these guidelines, even if the situation is not happening to you. What Happens After a Report Is Filed \u00b6 After a member of the ESIIL DEI team takes your report, they will (if necessary) consult with the appropriate support people at CU. The ESIIL DEI team will respond with a status update within 5 business days. During this time, they, or members of the CU Office of Institutional Equity and Compliance, will: Meet with you or review report documentation to determine what happened Consult documentation of past incidents for patterns of behavior Discuss appropriate response(s) to the incident Connect with the appropriate offices and/or make those response(s) Determine the follow-up actions for any impacted people and/or the reporter Follow up with the impacted people, including connecting them with support and resources. As a result of this process, in minor cases ESIIL DEI may communicate with the respondent to: \u00b6 Explain what happened and the impact of their behavior Offer concrete examples of how to improve their behavior Explain consequences of their behavior, or future consequences if the behavior is repeated. For significant infractions, follow up to the report may be turned over to the CU Office of Institutional Equity and Compliance and/or campus police. Possible Consequences to Code of Conduct Violations \u00b6 What follows are examples of possible responses to an incident report. This list is not inclusive, and ESIIL reserves the right to take any action it deems necessary. Generally speaking, the strongest response ESIIL may take is to completely ban a user from further engagement with ESIIL activities and, as is required, report a person to the CU Office of Institutional Equity and Compliance and/or their home institution and NSF. If law enforcement should be involved, they will recommend that the complainant make that contact. Employees of CU Boulder may also be subject to consequences as determined by the institution. In addition to the responses above, ESIIL responses may include but are not limited to the following: A verbal discussion in person or via phone/Zoom followed by documentation of the conversation via email Not publishing the video or slides of a talk that violated the code of conduct Not allowing a speaker who violated the code of conduct to give (further) talks Immediately ending any team leadership, membership, or other responsibilities and privileges that a person holds Temporarily banning a person from ESIIL activities Permanently banning a person from ESIIL activities Nothing, if the behavior is determined to not be a code of conduct violation Do you need more resources? Please don\u2019t hesitate to contact the ESIIL DEI lead, Susan Sullivan, if you have questions or concerns. The CU Office of Institutional Equity and Compliance is a resource for all of us in navigating this space. They also offer resource materials that can assist you in exploring various topics and skills here. If you have questions about what, when or how to report, or how to help someone else with concerns, Don\u2019t Ignore It. CU Ombud\u2019s Office: Confidential support to navigate university situations. (Most universities have these resources) The CU Office of Victims Assistance (counseling limited to CU students/staff/faculty, though advocacy is open to everyone engaged with a CU-sponsored activity. Please look for a similar resource on your campus if you are from another institution). National Crisis Hotlines How are we doing? Despite our best intentions, in some cases we may not be living up to our ideals of a positive, supportive, inclusive, respectful and collaborative community. If you feel we could do better, we welcome your feedback. Comments, suggestions and praise are also very welcome! Acknowledgment By participating in this event, you agree to abide by this code of conduct and understand the consequences of violating it. We believe that a respectful and inclusive environment benefits all participants and leads to more creative and successful outcomes. Thank you for your cooperation in making the this event a welcoming event for all. Have fun!","title":"Code of Conduct"},{"location":"additional-resources/code-of-conduct/#code-of-conduct-and-respectful-inclusive-collaboration-guidelines","text":"Environmental Data Science Innovation & Inclusion Lab (ESIIL) is committed to building, maintaining, and fostering an inclusive, kind, collaborative, and diverse transdisciplinary environmental data science community, whose members feel welcome, supported, and safe to contribute ideas and knowledge. The 2024 ESIIL Innovation Summit will follow all aspects of the ESIIL Code of Conduct (below). All community members are responsible for creating this culture, embodying our values, welcoming diverse perspectives and ways of knowing, creating safe inclusive spaces, and conducting ethical science as guided by FAIR (Findable, Accessible, Interoperable, Reusable) and CARE (Collective Benefit, Authority to Control, Responsibility, and Ethics) principles for scientific and Indigenous data management, governance, and stewardship.","title":"Code of Conduct and Respectful Inclusive Collaboration Guidelines"},{"location":"additional-resources/code-of-conduct/#our-values","text":"ESIIL\u2019s vision is grounded in the conviction that innovation and breakthroughs in environmental data science will be precipitated by a diverse, collaborative, curious, and inclusive research community empowered by open data and infrastructure, cross-sector and community partnerships, team science, and engaged learning. As such, our core values center people through inclusion, kindness, respect, collaboration, and genuine relationships. They also center innovation, driven by collaborative, cross-sector science and synthesis, open, accessible data and tools, and fun, diverse teams. Finally, they center learning, propelled by curiosity and accessible, inclusive training, and education opportunities.","title":"Our values"},{"location":"additional-resources/code-of-conduct/#when-and-how-to-use-these-guidelines","text":"These guidelines outline behavior expectations for ESIIL community members. Your participation in the ESIIL network is contingent upon following these guidelines in all ESIIL activities, including, but not limited to, participating in meetings, webinars, hackathons, working groups, hosted or funded by ESIIL, as well as email lists and online forums such as GutHub, Slack, and Twitter. These guidelines have been adapted from those of the International Arctic Research Policy Committee, the Geological Society of America, the American Geophysical Union, the University Corporation for Atmospheric Research, The Carpentries, and others. We encourage other organizations to adapt these guidelines for use in their own meetings. Note: Working groups and hackathon/codefest teams are encouraged to discuss these guidelines and what they mean to them, and will have the opportunity to add to them to specifically support and empower their team. Collaborative and behavior commitments complement data use, management, authorship, and access plans that commit to CARE and FAIR principles.","title":"When and how to use these guidelines"},{"location":"additional-resources/code-of-conduct/#behavior-agreements","text":"ESIIL community members are expected to act professionally and respectfully in all activities, such that each person, regardless of gender, gender identity or expression, sexual orientation, disability, physical appearance, age, body size, race, religion, national origin, ethnicity, level of experience, language fluency, political affiliation, veteran status, pregnancy, country of origin, and any other characteristic protected under state or federal law, feels safe and welcome in our activities and community. We gain strength from diversity and actively seek participation from those who enhance it. In order to garner the benefits of a diverse community and to reach the full potential of our mission and charge, ESIIL participants must be allowed to develop a sense of belonging and trust within a respectful, inclusive, and collaborative culture. Guiding behaviors that contribute to this culture include, but are not limited to:","title":"Behavior Agreements"},{"location":"additional-resources/code-of-conduct/#showing-respect","text":"Listen carefully \u2013 we each bring our own styles of communication, language, and ideas, and we must do our best to accept and accommodate differences. Do not interrupt when someone is speaking and maintain an open mind when others have different ideas than yours. Be present \u2013 when engaging with others, give them your full attention. If you need to respond to outside needs, please step away from the group quietly. Be kind \u2013 offer positive, supportive comments and constructive feedback. Critique ideas, not people. Harassment, discrimination, bullying, aggression, including offensive comments, jokes, and imagery, are unacceptable, regardless of intent, and will not be tolerated. Be punctual - adhere to the schedule provided by the organizers and avoid disruptive behavior during presentations, trainings, or working sessions. Respect privacy - be mindful of the confidentiality of others. Always obtain explicit consent before recording, sharing, or using someone else\u2019s personal information, photos, or recordings. Practice good digital etiquette (netiquette) when communicating online, whether in emails, messages, or social media - think before posting online and consider the potential impact on others. Do not share or distribute content generated by or involving others without their explicit consent.","title":"Showing Respect"},{"location":"additional-resources/code-of-conduct/#being-inclusive","text":"Create space for everyone to participate \u2013 be thoughtful about who is at the table; openly address accessibility needs, and provide multiple ways to contribute. Be welcoming \u2013 ESIIL participants come from a wide range of skill levels and career stages, backgrounds, and cultures. Demonstrate that you value these different perspectives and identities through your words and actions, including through correct use of names, titles, and pronouns. Be self-aware \u2013 recognize that positionality, identity, unconscious biases, and upbringing can all affect how words and behaviors are perceived. Ensure that your words and behavior make others feel welcome. Commit to ongoing learning \u2013 the move toward inclusive, equitable, and just environmental data science is a collective journey. Continue to learn about and apply practices of inclusion, anti-racism, bystander intervention, and cultural sensitivity. None of us is perfect; all of us will, from time to time, fail to live up to our own high standards. Being perfect is not what matters; owning our mistakes and committing to clear and persistent efforts to grow and improve is.","title":"Being Inclusive"},{"location":"additional-resources/code-of-conduct/#being-curious","text":"Check your presumptions \u2013 we each bring our own ideas and assumptions about how the world should and does work \u2013 what are yours, and how do they affect how you interact with others? How do they shape your perception of new ideas? Ask questions \u2013 one of the strengths of interdisciplinary and diverse teams is that we all bring different knowledge and viewpoints; no one person is expected to know everything. So don\u2019t be afraid to ask, to learn, and to share. Be bold \u2013 significant innovations don\u2019t come from incremental efforts. Be brave in proposing and testing new ideas. When things don\u2019t work, learn from the experience. Invite feedback \u2013 new ideas and improvements can emerge from many places when we\u2019re open to hearing them. Check your defensiveness and listen; accept feedback as a gift toward improving our work and ourselves.","title":"Being Curious"},{"location":"additional-resources/code-of-conduct/#being-collaborative","text":"Recognize that everyone is bringing something different to the table \u2013 take the time to get to know each other. Keep an open mind, encourage ideas that are different from yours, and learn from each other\u2019s expertise and experience. Be accountable - great team science depends on trust, communication, respect, and delivering on your commitments. Be clear about your needs, as both a requester and a responder, realistic about your time and capacity commitments, and communicate timelines and standards in advance. Make assumptions explicit and provide context wherever possible - misunderstandings are common on transdisciplinary and cross-cultural teams and can best be managed with intentionality. Check in about assumptions, and be willing to share and correct misunderstandings or mistakes when they happen. Make use of collaboration agreements, communicate clearly and avoid jargon wherever possible. Respect intellectual property and Indigenous data sovereignty \u2013 ESIIL recognizes the extractive and abusive history of scientific engagement with Native peoples, and is committed to doing better. Indigenous knowledge holders are under no obligation to share their data, stories or knowledge. Their work should always be credited, and only shared with permission. Follow guidelines for authorship, Indigenous data sovereignty, and CARE principles. Acknowledge and credit the ideas and work of others. Use the resources that we provide - take advantage of the cyberinfrastructure and data cube at your disposal, but do not use them for unrelated tasks, as it could disrupt the event, introduce security risks, undermine the spirit of collaboration and fair play, and erode trust within the event community. Be safe - never share sensitive personal information; use strong passwords for your Cyverse and GitHub accounts and do not share them with other participants; be cautious of unsolicited emails, messages, or links; and verify online contacts. If you encounter any illegal or harmful activities online related to this event, report them to Tyler McIntosh or Susan Sullivan. Finally, speak up if you experience or notice a dangerous situation, or someone in distress!","title":"Being Collaborative"},{"location":"additional-resources/code-of-conduct/#code-of-conduct-unacceptable-behaviors","text":"We adopt the full Code of Conduct of our home institution, the University of Colorado, details of which are found here . To summarize, examples of unacceptable and reportable behaviors include, but are not limited to: Harassment, intimidation, or discrimination in any form Physical or verbal abuse by anyone to anyone, including but not limited to a participant, member of the public, guest, member of any institution or sponsor Unwelcome sexual attention or advances Personal attacks directed at other guests, members, participants, etc. Alarming, intimidating, threatening, or hostile comments or conduct Inappropriate use of nudity and/or sexual images in public spaces or in presentations Threatening or stalking anyone Unauthorized use or sharing of personal or confidential information or private communication Continuing interactions, including but not limited to conversations, photographies, recordings, instant messages, and emails, after being asked to stop Ethical and scientific misconduct, including failing to credit contributions or respect intellectual property Engaging in any illegal activities, including hacking, cheating, or unauthorized access to systems or data Using the cyberinfrastructure provided by the organizers for activities unrelated to this event. Other conduct which could reasonably be considered inappropriate in a professional setting. The University of Colorado recognizes all Federal and State protected classes, which include the following: race, color, national origin, sex, pregnancy, age, marital status, disability, creed, religion, sexual orientation, gender identity, gender expression, veteran status, political affiliation or political philosophy. Mistreatment or harassment not related to protected class also has a negative impact and will be addressed by the ESIIL team. Anyone requested to stop unacceptable behavior is expected to comply immediately. If there is a clear violation of the code of conduct during an ESIIL event\u2014for example, a meeting is Zoom bombed or a team member is verbally abusing another participant during a workshop\u2014 ESIIL leaders, facilitators (or their designee) or campus/local police may take any action deemed necessary and appropriate, including expelling the violator, or immediate removal of the violator from any online or in-person event or platform without warning or refund. If such actions are necessary, there will be follow up with the ESIIL Diversity Equity and Inclusion (DEI) team to determine what further action is needed (see Reporting Process and Consequences below).","title":"Code of Conduct: Unacceptable behaviors"},{"location":"additional-resources/code-of-conduct/#addressing-behavior-directly","text":"For smaller incidents that might be settled with a brief conversation, you may choose to contact the person in question or set up a (video) conversation to discuss how the behavior affected you. Please use this approach only if you feel comfortable; you do not have to carry the weight of addressing these issues yourself. If you are interested in this option but unsure how to go about it, please contact the ESIIL DEI lead, Susan Sullivan, first\u2014she will have advice on how to make the conversation happen and is available to join you in a conversation as requested.","title":"Addressing Behavior Directly"},{"location":"additional-resources/code-of-conduct/#reporting-process-and-consequences","text":"We take any reports of Code of Conduct violations seriously, and aim to support those who are impacted and ensure that problematic behavior doesn\u2019t happen again.","title":"Reporting Process and Consequences"},{"location":"additional-resources/code-of-conduct/#making-a-report","text":"If you believe you\u2019re experiencing or have experienced unacceptable behavior that is counter to this code of conduct, or you are witness to this behavior happening to someone else, we encourage you to contact our DEI lead: Susan Sullivan, CIRES Email: susan.sullivan@colorado.edu You may also choose to anonymously report behavior to ESIIL using this form . The DEI team will keep reports as confidential as possible. However, as mandatory reporters, we have an obligation to report alleged protected class violations to our home institution or to law enforcement.","title":"Making a Report"},{"location":"additional-resources/code-of-conduct/#specifically","text":"Cases of potential protected-class harassment will be reported to the CU Office of Institutional Equity and Compliance. If the violation is made by a member of another institution, that information may also be shared with that member\u2019s home institution by the CU Office of Institutional Equity and Compliance under Title IX. In some instances, harassment information may be shared with the National Science Foundation, who are the funding organization of ESIIL. When we discuss incidents with people who are accused of misconduct (the respondent), we will anonymize details as much as possible to protect the privacy of the reporter and the person who was impacted (the complainant). In some cases, even when the details are anonymized, the respondent may guess at the identities of the reporter and complainants. If you have concerns about retaliation or your personal safety, please let us know (or note that in your report). We encourage you to report in any case, so that we can support you while keeping ESIIL members safe. In some cases, we are able to compile several anonymized reports into a pattern of behavior, and take action based on that pattern. If you prefer to speak with someone who is not on the ESIIL leadership team, or who can maintain confidentiality, you may contact: CU Ombuds Phone: 303-492-5077 (for guidance and support navigating difficult conversations) CU Office of Victim Assistance Phone: 303-492-8855 If you want more information about when to report, or how to help someone who needs to report, please review the resources at Don\u2019t Ignore It . Note: The reporting party does not need to be directly involved in a code of conduct violation incident. Please make a bystander report if you observe a potentially dangerous situation, someone in distress, or violations of these guidelines, even if the situation is not happening to you.","title":"Specifically:"},{"location":"additional-resources/code-of-conduct/#what-happens-after-a-report-is-filed","text":"After a member of the ESIIL DEI team takes your report, they will (if necessary) consult with the appropriate support people at CU. The ESIIL DEI team will respond with a status update within 5 business days. During this time, they, or members of the CU Office of Institutional Equity and Compliance, will: Meet with you or review report documentation to determine what happened Consult documentation of past incidents for patterns of behavior Discuss appropriate response(s) to the incident Connect with the appropriate offices and/or make those response(s) Determine the follow-up actions for any impacted people and/or the reporter Follow up with the impacted people, including connecting them with support and resources.","title":"What Happens After a Report Is Filed"},{"location":"additional-resources/code-of-conduct/#as-a-result-of-this-process-in-minor-cases-esiil-dei-may-communicate-with-the-respondent-to","text":"Explain what happened and the impact of their behavior Offer concrete examples of how to improve their behavior Explain consequences of their behavior, or future consequences if the behavior is repeated. For significant infractions, follow up to the report may be turned over to the CU Office of Institutional Equity and Compliance and/or campus police.","title":"As a result of this process, in minor cases ESIIL DEI may communicate with the respondent to:"},{"location":"additional-resources/code-of-conduct/#possible-consequences-to-code-of-conduct-violations","text":"What follows are examples of possible responses to an incident report. This list is not inclusive, and ESIIL reserves the right to take any action it deems necessary. Generally speaking, the strongest response ESIIL may take is to completely ban a user from further engagement with ESIIL activities and, as is required, report a person to the CU Office of Institutional Equity and Compliance and/or their home institution and NSF. If law enforcement should be involved, they will recommend that the complainant make that contact. Employees of CU Boulder may also be subject to consequences as determined by the institution. In addition to the responses above, ESIIL responses may include but are not limited to the following: A verbal discussion in person or via phone/Zoom followed by documentation of the conversation via email Not publishing the video or slides of a talk that violated the code of conduct Not allowing a speaker who violated the code of conduct to give (further) talks Immediately ending any team leadership, membership, or other responsibilities and privileges that a person holds Temporarily banning a person from ESIIL activities Permanently banning a person from ESIIL activities Nothing, if the behavior is determined to not be a code of conduct violation Do you need more resources? Please don\u2019t hesitate to contact the ESIIL DEI lead, Susan Sullivan, if you have questions or concerns. The CU Office of Institutional Equity and Compliance is a resource for all of us in navigating this space. They also offer resource materials that can assist you in exploring various topics and skills here. If you have questions about what, when or how to report, or how to help someone else with concerns, Don\u2019t Ignore It. CU Ombud\u2019s Office: Confidential support to navigate university situations. (Most universities have these resources) The CU Office of Victims Assistance (counseling limited to CU students/staff/faculty, though advocacy is open to everyone engaged with a CU-sponsored activity. Please look for a similar resource on your campus if you are from another institution). National Crisis Hotlines How are we doing? Despite our best intentions, in some cases we may not be living up to our ideals of a positive, supportive, inclusive, respectful and collaborative community. If you feel we could do better, we welcome your feedback. Comments, suggestions and praise are also very welcome! Acknowledgment By participating in this event, you agree to abide by this code of conduct and understand the consequences of violating it. We believe that a respectful and inclusive environment benefits all participants and leads to more creative and successful outcomes. Thank you for your cooperation in making the this event a welcoming event for all. Have fun!","title":"Possible Consequences to Code of Conduct Violations"},{"location":"additional-resources/cyverse_hacks/","text":"Transitioning Workflows to CyVerse: Tips & Tricks \u00b6 Forest Carbon Codefest Data Storage \u00b6 Path: ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/ Your team has a subdirectory within the Team_outputs directory. Setup \u00b6 CyVerse Account: Create an account if not already owned. Contact Tyson for account upgrades after maximizing current limits. GitHub Connection \u00b6 Follow the guide for connecting GitHub to CyVerse Select \u201cJupyterLab ESIIL\u201d and choose \u201cmacrosystems\u201d in the version dropdown. Clone into /home/jovyan/data-store . Clone innovation-summit-utils for SSH connection to GitHub. Run conda install -c conda-forge openssh in the terminal if encountering errors. GitHub authentication is session-specific. RStudio in Discovery Environment \u00b6 Copy your instance ID. It can be found in your analyis URL in form https:// .cyverse.run/lab. Use your ID in these links and run them each, in sequence, in the same browser window: https://<id>.cyverse.run/rstudio/auth-sign-in https://<id>.cyverse.run/rstudio/ Data Transfer to CyVerse \u00b6 Use GoCommands for HPC/CyVerse transfers. Installation: Linux: GOCMD_VER= \\((curl -L -s https://raw.githubusercontent.com/cyverse/gocommands/main/VERSION.txt); \\ curl -L -s https://github.com/cyverse/gocommands/releases/download/\\) -linux-amd64.tar.gz | tar zxvf -}/gocmd-${GOCMD_VER Windows Powershell: curl -o gocmdv.txt https://raw.githubusercontent.com/cyverse/gocommands/main/VERSION.txt ; \\(env:GOCMD_VER = (Get-Content gocmdv.txt) curl -o gocmd.zip https://github.com/cyverse/gocommands/releases/download/\\) env:GOCMD_VER/gocmd-$env:GOCMD_VER-windows-amd64.zip ; tar zxvf gocmd.zip ; del gocmd.zip ; del gocmdv.txt Usage: ./gocmd init Hit enter until you are asked for your iRODS Username (which is your cyverse username) Use put for upload and get for download. Ensure correct CyVerse directory path. Note that the CyVerse directory path should start from \u201c/iplant/home/\u2026\u201d (i.e. if you start from \u2018/home/jovyan/\u2026\u2019 GoCommands will not find the directory and throw an error)","title":"Cyverse hacks"},{"location":"additional-resources/cyverse_hacks/#transitioning-workflows-to-cyverse-tips-tricks","text":"","title":"Transitioning Workflows to CyVerse: Tips &amp; Tricks"},{"location":"additional-resources/cyverse_hacks/#forest-carbon-codefest-data-storage","text":"Path: ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/ Your team has a subdirectory within the Team_outputs directory.","title":"Forest Carbon Codefest Data Storage"},{"location":"additional-resources/cyverse_hacks/#setup","text":"CyVerse Account: Create an account if not already owned. Contact Tyson for account upgrades after maximizing current limits.","title":"Setup"},{"location":"additional-resources/cyverse_hacks/#github-connection","text":"Follow the guide for connecting GitHub to CyVerse Select \u201cJupyterLab ESIIL\u201d and choose \u201cmacrosystems\u201d in the version dropdown. Clone into /home/jovyan/data-store . Clone innovation-summit-utils for SSH connection to GitHub. Run conda install -c conda-forge openssh in the terminal if encountering errors. GitHub authentication is session-specific.","title":"GitHub Connection"},{"location":"additional-resources/cyverse_hacks/#rstudio-in-discovery-environment","text":"Copy your instance ID. It can be found in your analyis URL in form https:// .cyverse.run/lab. Use your ID in these links and run them each, in sequence, in the same browser window: https://<id>.cyverse.run/rstudio/auth-sign-in https://<id>.cyverse.run/rstudio/","title":"RStudio in Discovery Environment"},{"location":"additional-resources/cyverse_hacks/#data-transfer-to-cyverse","text":"Use GoCommands for HPC/CyVerse transfers. Installation: Linux: GOCMD_VER= \\((curl -L -s https://raw.githubusercontent.com/cyverse/gocommands/main/VERSION.txt); \\ curl -L -s https://github.com/cyverse/gocommands/releases/download/\\) -linux-amd64.tar.gz | tar zxvf -}/gocmd-${GOCMD_VER Windows Powershell: curl -o gocmdv.txt https://raw.githubusercontent.com/cyverse/gocommands/main/VERSION.txt ; \\(env:GOCMD_VER = (Get-Content gocmdv.txt) curl -o gocmd.zip https://github.com/cyverse/gocommands/releases/download/\\) env:GOCMD_VER/gocmd-$env:GOCMD_VER-windows-amd64.zip ; tar zxvf gocmd.zip ; del gocmd.zip ; del gocmdv.txt Usage: ./gocmd init Hit enter until you are asked for your iRODS Username (which is your cyverse username) Use put for upload and get for download. Ensure correct CyVerse directory path. Note that the CyVerse directory path should start from \u201c/iplant/home/\u2026\u201d (i.e. if you start from \u2018/home/jovyan/\u2026\u2019 GoCommands will not find the directory and throw an error)","title":"Data Transfer to CyVerse"},{"location":"additional-resources/participant_agreement/","text":"Participant Agreement \u00b6 This Participant Agreement (\u201cAgreement\u201d) is a contract between you (\u201cYou/Your\u201d or \u201cParticipant\u201d) and THE REGENTS OF THE UNIVERSITY OF COLORADO, a body corporate, acting on behalf of the University of Colorado Boulder, a public institution of higher education created under the Constitution and the Law of the State of Colorado (the \u201cUniversity\u201d), having offices located at 3100 Marine Street, Boulder, CO 80309. In consideration of Your participation in the 2024 ESIIL Innovation Summit, the sufficiency of which is hereby acknowledged, You agree as follows: Environmental Data Science Innovation & Inclusion Lab (\u201cESIIL\u201d) is a National Science Foundation (\u201cNSF\u201d) funded data synthesis center led by the University. Earth Lab is part of the Cooperative Institute for Research in Environmental Sciences (CIRES) specializing in data-intensive open, reproducible environmental science. ESIIL will host the Summit in person from May 13 through May 16, 2024. Innovation Summit Description \u00b6 ESIIL's 2024 Innovation Summit will offer an opportunity to use big data to understand resilience across genes, species, ecosystems and societies, advance ecological forecasting with solutions in mind, and inform adaptive management and natural climate solutions. The Summit will support attendees to advance data-informed courses of action for resilience and adaptation in the face of our changing environment. It will be an in-person \u2018unconference\u2019, enabling participants to dynamically work on themes that most inspire them, with inclusive physical and intellectual spaces for working together. Over two and a half days participants will work in teams to explore research questions using open science approaches, including: data infrastructure, artificial intelligence (AI) and novel analytics, and cloud computing. Participants will be encouraged to work across and respect different perspectives, with the aim of co-developing resilience solutions. ESIIL will provide participants with opportunities to learn more about cultural intelligence, ethical and open science practices, and leadership in the rapidly evolving field of environmental data science. Overall, the Summit will capitalize on the combination of open data and analytics opportunities to develop innovative or impactful approaches that improve environmental resilience and adaptation. How to Participate \u00b6 You will join a team of environmental scientists, data experts, and coders to explore curated data, consider the objectivity of the data, propose a scientific question that can be addressed with all or some of the data sets, and analyze the data in an attempt to answer your scientific question. You will present your Work to the event community. ESIIL will provide environmental data, cyberinfrastructure, cyberinfrastructure and data analytics training, and technical support. Representations and Warranties \u00b6 By and through Your participation in the Summit, You represent and warrant the following: You have read, understand, and agree to abide by the Code of Conduct and Respectful Inclusive Collaboration Guidelines for the 2024 ESIIL Innovation Summit (\u201cCode of Conduct\u201d). Any decisions concerning the Code of Conduct, Official Rules, or any other matter relating to this Summit by the University is final and binding on all Participants. Summit Assets \u00b6 5.1 Access and Use \u00b6 By participating in the Innovation Summit, You may receive access to certain datasets, webinars, and/or other copyrighted materials (collectively, the \u201cSummit Assets\u201d). You agree to follow all licenses, restrictions, and other instructions provided to You with the Summit Assets. 5.2 Disclaimer \u00b6 The Summit Assets are provided \u201cas is\u201d without warranty of any kind, either express or implied, including, without limitation, any implied warranties of merchantability and fitness for a particular purpose. Without limiting the foregoing, the University does not warrant that the Materials will be suitable for Your Solution or that the operation or supply of the Summit Assets will be uninterrupted or error free. 5.3 Restrictions \u00b6 You agree not to access or use the Summit Assets in a manner that may interfere with any other participants\u2019 or users\u2019 use of such assets, unless provided with express written consent by the University. Your access to and use of the Summit Assets may be limited, throttled, or terminated at any time at the sole discretion of the University. 5.4 Originality and Third-Party Materials \u00b6 You represent that Your Work is Your original creation. If you obtain permission to include third-party materials, You represent that Your Work includes complete details of any third-party license or other restriction (including, but not limited to, related patents and trademarks) of which You are aware and which are associated with any part of Your Work. You represent and warrant that You will not submit any materials to the University that You know or believe to have components that are malicious or harmful. You represent that You will perform a reasonable amount of due diligence in order to be properly informed of third-party licenses, infringing materials, or harmful content associated with any part of Your Work. 5.5 Work Publication \u00b6 You agree to make Your Work publicly available in GitHub under the MIT open-source license within five (5) months from the end of the Summit. Limitation of Liability \u00b6 TO THE EXTENT ALLOWED BY LAW, IN NO EVENT SHALL THE UNIVERSITY, ITS PARTNERS, LICENSORS, SERVICE PROVIDERS, OR ANY OF THEIR RESPECTIVE OFFICERS, DIRECTORS, AGENTS, EMPLOYEES OR REPRESENTATIVES, BE LIABLE FOR DIRECT, INCIDENTAL, CONSEQUENTIAL, EXEMPLARY OR PUNITIVE DAMAGES ARISING OUT OF OR IN CONNECTION WITH THE SUMMIT OR THIS AGREEMENT (HOWEVER ARISING, INCLUDING NEGLIGENCE). IF YOU HAVE A DISPUTE WITH ANY PARTICIPANT OR ANY OTHER THIRD PARTY, YOU RELEASE THE UNIVERSITY, ITS, PARTNERS, LICENSORS, AND SERVICE PROVIDERS, AND EACH OF THEIR RESPECTIVE OFFICERS, DIRECTORS, AGENTS, EMPLOYEES AND REPRESENTATIVES FROM ANY AND ALL CLAIMS, DEMANDS AND DAMAGES (ACTUAL AND CONSEQUENTIAL) OF EVERY KIND AND NATURE ARISING OUT OF OR IN ANY WAY CONNECTED WITH SUCH DISPUTES. YOU AGREE THAT ANY CLAIMS AGAINST UNIVERSITY ARISING OUT OF THE SUMMIT OR THIS AGREEMENT MUST BE FILED WITHIN ONE YEAR AFTER SUCH CLAIM AROSE; OTHERWISE, YOUR CLAIM IS PERMANENTLY BARRED. Not an Offer or Contract of Employment \u00b6 Under no circumstances will Your participation in the Summit or anything in this Agreement be construed as an offer or contract of employment with the University. Additional Terms \u00b6 You must be at least eighteen (18) years of age to participate in the Summit. The Summit is subject to applicable federal, state, and local laws. The University reserves the right to permanently disqualify any person from the Summit that it reasonably believes has violated this Agreement, the Code of Conduct, and/or the Official Rules. Any attempt to deliberately damage the Summit or the operation thereof is unlawful and subject to legal action by the University, which may seek damages to the fullest extent permitted by law. The University assumes no responsibility for any injury or damage to Your or any other person\u2019s computer relating to or resulting from entering or downloading materials or software in connection with the Summit. The University is not responsible for telecommunications, network, electronic, technical, or computer failures of any kind; for inaccurate transcription of entry information; for any human or electronic error; or for Solutions that are stolen, misdirected, garbled, delayed, lost, late, damaged, or returned. The University reserves the right to cancel, modify, or suspend the Summit or any element thereof (including, without limitation, this Agreement) without notice in any manner and for any reason (including, without limitation, in the event of any unanticipated occurrence that is not fully addressed in this Agreement). The University may prohibit any person from participating in the Summit, if such person shows a disregard for this Agreement; acts with an intent to annoy, abuse, threaten, or harass any other entrant or any agents or representatives of the University (or any associated, partners, licensors, or service providers for the University); or behaves in any other disruptive manner (as determined by the University in its sole discretion). Nothing contained in this Agreement shall be construed as an express or implied waiver by University of its governmental immunity or of the governmental immunity of the State of Colorado. Your Work shall not contain any item(s) that are either export-controlled under the International Traffic in Arms Regulations, or that appear on the Commerce Control List (except as EAR99) of the Export Administration Regulations. Dispute Resolution \u00b6 This Agreement and the Summit shall be governed and construed in accordance with and governed by the laws of the state of Colorado without giving effect to conflict of law provisions. Entire Agreement \u00b6 This Agreement and the Event Code of Conduct, constitutes the entire agreement between the University and You with respect to the Summit and supersedes all previous or contemporaneous oral or written agreements concerning the Summit. In the event of a conflict between this Agreement and/or the Event Code of Conduct, the conflict shall be resolved with the following order of precedence: This Agreement The Event Code of Conduct Severability \u00b6 The invalidity, illegality, or unenforceability of any one or more phrases, sentences, clauses, or sections in this Agreement does not affect the remaining portions of this Agreement. If you have questions about the Summit, please contact ESIIL at esiil@colorado.edu . Guidelines for Intellectual Contributions and Credit \u00b6 ESIIL Guidelines for Intellectual Contributions and Credit","title":"Participant Agreement"},{"location":"additional-resources/participant_agreement/#participant-agreement","text":"This Participant Agreement (\u201cAgreement\u201d) is a contract between you (\u201cYou/Your\u201d or \u201cParticipant\u201d) and THE REGENTS OF THE UNIVERSITY OF COLORADO, a body corporate, acting on behalf of the University of Colorado Boulder, a public institution of higher education created under the Constitution and the Law of the State of Colorado (the \u201cUniversity\u201d), having offices located at 3100 Marine Street, Boulder, CO 80309. In consideration of Your participation in the 2024 ESIIL Innovation Summit, the sufficiency of which is hereby acknowledged, You agree as follows: Environmental Data Science Innovation & Inclusion Lab (\u201cESIIL\u201d) is a National Science Foundation (\u201cNSF\u201d) funded data synthesis center led by the University. Earth Lab is part of the Cooperative Institute for Research in Environmental Sciences (CIRES) specializing in data-intensive open, reproducible environmental science. ESIIL will host the Summit in person from May 13 through May 16, 2024.","title":"Participant Agreement"},{"location":"additional-resources/participant_agreement/#innovation-summit-description","text":"ESIIL's 2024 Innovation Summit will offer an opportunity to use big data to understand resilience across genes, species, ecosystems and societies, advance ecological forecasting with solutions in mind, and inform adaptive management and natural climate solutions. The Summit will support attendees to advance data-informed courses of action for resilience and adaptation in the face of our changing environment. It will be an in-person \u2018unconference\u2019, enabling participants to dynamically work on themes that most inspire them, with inclusive physical and intellectual spaces for working together. Over two and a half days participants will work in teams to explore research questions using open science approaches, including: data infrastructure, artificial intelligence (AI) and novel analytics, and cloud computing. Participants will be encouraged to work across and respect different perspectives, with the aim of co-developing resilience solutions. ESIIL will provide participants with opportunities to learn more about cultural intelligence, ethical and open science practices, and leadership in the rapidly evolving field of environmental data science. Overall, the Summit will capitalize on the combination of open data and analytics opportunities to develop innovative or impactful approaches that improve environmental resilience and adaptation.","title":"Innovation Summit Description"},{"location":"additional-resources/participant_agreement/#how-to-participate","text":"You will join a team of environmental scientists, data experts, and coders to explore curated data, consider the objectivity of the data, propose a scientific question that can be addressed with all or some of the data sets, and analyze the data in an attempt to answer your scientific question. You will present your Work to the event community. ESIIL will provide environmental data, cyberinfrastructure, cyberinfrastructure and data analytics training, and technical support.","title":"How to Participate"},{"location":"additional-resources/participant_agreement/#representations-and-warranties","text":"By and through Your participation in the Summit, You represent and warrant the following: You have read, understand, and agree to abide by the Code of Conduct and Respectful Inclusive Collaboration Guidelines for the 2024 ESIIL Innovation Summit (\u201cCode of Conduct\u201d). Any decisions concerning the Code of Conduct, Official Rules, or any other matter relating to this Summit by the University is final and binding on all Participants.","title":"Representations and Warranties"},{"location":"additional-resources/participant_agreement/#summit-assets","text":"","title":"Summit Assets"},{"location":"additional-resources/participant_agreement/#51-access-and-use","text":"By participating in the Innovation Summit, You may receive access to certain datasets, webinars, and/or other copyrighted materials (collectively, the \u201cSummit Assets\u201d). You agree to follow all licenses, restrictions, and other instructions provided to You with the Summit Assets.","title":"5.1 Access and Use"},{"location":"additional-resources/participant_agreement/#52-disclaimer","text":"The Summit Assets are provided \u201cas is\u201d without warranty of any kind, either express or implied, including, without limitation, any implied warranties of merchantability and fitness for a particular purpose. Without limiting the foregoing, the University does not warrant that the Materials will be suitable for Your Solution or that the operation or supply of the Summit Assets will be uninterrupted or error free.","title":"5.2 Disclaimer"},{"location":"additional-resources/participant_agreement/#53-restrictions","text":"You agree not to access or use the Summit Assets in a manner that may interfere with any other participants\u2019 or users\u2019 use of such assets, unless provided with express written consent by the University. Your access to and use of the Summit Assets may be limited, throttled, or terminated at any time at the sole discretion of the University.","title":"5.3 Restrictions"},{"location":"additional-resources/participant_agreement/#54-originality-and-third-party-materials","text":"You represent that Your Work is Your original creation. If you obtain permission to include third-party materials, You represent that Your Work includes complete details of any third-party license or other restriction (including, but not limited to, related patents and trademarks) of which You are aware and which are associated with any part of Your Work. You represent and warrant that You will not submit any materials to the University that You know or believe to have components that are malicious or harmful. You represent that You will perform a reasonable amount of due diligence in order to be properly informed of third-party licenses, infringing materials, or harmful content associated with any part of Your Work.","title":"5.4 Originality and Third-Party Materials"},{"location":"additional-resources/participant_agreement/#55-work-publication","text":"You agree to make Your Work publicly available in GitHub under the MIT open-source license within five (5) months from the end of the Summit.","title":"5.5 Work Publication"},{"location":"additional-resources/participant_agreement/#limitation-of-liability","text":"TO THE EXTENT ALLOWED BY LAW, IN NO EVENT SHALL THE UNIVERSITY, ITS PARTNERS, LICENSORS, SERVICE PROVIDERS, OR ANY OF THEIR RESPECTIVE OFFICERS, DIRECTORS, AGENTS, EMPLOYEES OR REPRESENTATIVES, BE LIABLE FOR DIRECT, INCIDENTAL, CONSEQUENTIAL, EXEMPLARY OR PUNITIVE DAMAGES ARISING OUT OF OR IN CONNECTION WITH THE SUMMIT OR THIS AGREEMENT (HOWEVER ARISING, INCLUDING NEGLIGENCE). IF YOU HAVE A DISPUTE WITH ANY PARTICIPANT OR ANY OTHER THIRD PARTY, YOU RELEASE THE UNIVERSITY, ITS, PARTNERS, LICENSORS, AND SERVICE PROVIDERS, AND EACH OF THEIR RESPECTIVE OFFICERS, DIRECTORS, AGENTS, EMPLOYEES AND REPRESENTATIVES FROM ANY AND ALL CLAIMS, DEMANDS AND DAMAGES (ACTUAL AND CONSEQUENTIAL) OF EVERY KIND AND NATURE ARISING OUT OF OR IN ANY WAY CONNECTED WITH SUCH DISPUTES. YOU AGREE THAT ANY CLAIMS AGAINST UNIVERSITY ARISING OUT OF THE SUMMIT OR THIS AGREEMENT MUST BE FILED WITHIN ONE YEAR AFTER SUCH CLAIM AROSE; OTHERWISE, YOUR CLAIM IS PERMANENTLY BARRED.","title":"Limitation of Liability"},{"location":"additional-resources/participant_agreement/#not-an-offer-or-contract-of-employment","text":"Under no circumstances will Your participation in the Summit or anything in this Agreement be construed as an offer or contract of employment with the University.","title":"Not an Offer or Contract of Employment"},{"location":"additional-resources/participant_agreement/#additional-terms","text":"You must be at least eighteen (18) years of age to participate in the Summit. The Summit is subject to applicable federal, state, and local laws. The University reserves the right to permanently disqualify any person from the Summit that it reasonably believes has violated this Agreement, the Code of Conduct, and/or the Official Rules. Any attempt to deliberately damage the Summit or the operation thereof is unlawful and subject to legal action by the University, which may seek damages to the fullest extent permitted by law. The University assumes no responsibility for any injury or damage to Your or any other person\u2019s computer relating to or resulting from entering or downloading materials or software in connection with the Summit. The University is not responsible for telecommunications, network, electronic, technical, or computer failures of any kind; for inaccurate transcription of entry information; for any human or electronic error; or for Solutions that are stolen, misdirected, garbled, delayed, lost, late, damaged, or returned. The University reserves the right to cancel, modify, or suspend the Summit or any element thereof (including, without limitation, this Agreement) without notice in any manner and for any reason (including, without limitation, in the event of any unanticipated occurrence that is not fully addressed in this Agreement). The University may prohibit any person from participating in the Summit, if such person shows a disregard for this Agreement; acts with an intent to annoy, abuse, threaten, or harass any other entrant or any agents or representatives of the University (or any associated, partners, licensors, or service providers for the University); or behaves in any other disruptive manner (as determined by the University in its sole discretion). Nothing contained in this Agreement shall be construed as an express or implied waiver by University of its governmental immunity or of the governmental immunity of the State of Colorado. Your Work shall not contain any item(s) that are either export-controlled under the International Traffic in Arms Regulations, or that appear on the Commerce Control List (except as EAR99) of the Export Administration Regulations.","title":"Additional Terms"},{"location":"additional-resources/participant_agreement/#dispute-resolution","text":"This Agreement and the Summit shall be governed and construed in accordance with and governed by the laws of the state of Colorado without giving effect to conflict of law provisions.","title":"Dispute Resolution"},{"location":"additional-resources/participant_agreement/#entire-agreement","text":"This Agreement and the Event Code of Conduct, constitutes the entire agreement between the University and You with respect to the Summit and supersedes all previous or contemporaneous oral or written agreements concerning the Summit. In the event of a conflict between this Agreement and/or the Event Code of Conduct, the conflict shall be resolved with the following order of precedence: This Agreement The Event Code of Conduct","title":"Entire Agreement"},{"location":"additional-resources/participant_agreement/#severability","text":"The invalidity, illegality, or unenforceability of any one or more phrases, sentences, clauses, or sections in this Agreement does not affect the remaining portions of this Agreement. If you have questions about the Summit, please contact ESIIL at esiil@colorado.edu .","title":"Severability"},{"location":"additional-resources/participant_agreement/#guidelines-for-intellectual-contributions-and-credit","text":"ESIIL Guidelines for Intellectual Contributions and Credit","title":"Guidelines for Intellectual Contributions and Credit"},{"location":"additional-resources/useful_links/","text":"Useful links \u00b6 CyVerse User Portal GitHub ESIIL Website 2024 Summit Slack","title":"Useful links"},{"location":"additional-resources/useful_links/#useful-links","text":"CyVerse User Portal GitHub ESIIL Website 2024 Summit Slack","title":"Useful links"},{"location":"collaborating-on-the-cloud/cyverse-instructions/","text":"Connecting to Cyverse and GitHub \u00b6 Log in to Cyverse \u00b6 Go to the Cyverse user account website https://user.cyverse.org/ Click Sign up (if you do not already have an account). When you make this account, please use the email that you have been using to communicate with our team regarding the event. That email is attached to our CyVerse workshop. Log in to Cyverse https://user.cyverse.org/ with your new account. From your account, go to the navigation bar at left and select 'Workshops' From the workshop page, find the workshop titled \"Forest Carbon Codefest\". It should look like this: Click on the tile, and then on the page for the workshop, click, \"Enroll\" at upper right. You should be enrolled automatically if you are using the email you have given our team. Head over to the Cyverse Discovery Environment by clicking on 'Services' at the upper right and then 'Discovery Environment' under 'My Services'. You should now see the Discovery Environment: Open up an analysis with the hackathon environment (Jupyter Lab) \u00b6 From the Cyverse Discovery Environment, click on Apps in the left menu Select JupyterLab ESIIL Configure and launch your analysis - the defaults are fine for now: Click Go to analysis : Now you should see Jupyter Lab! Set up your GitHub credentials \u00b6 If you would prefer to follow a video instead of a written outline, we have prepared a video here: \u00b6 From Jupyter Lab, click on the GitHub icon on the left menu: Click Clone a Repository : Paste the link to the innovation-summit-utils https://github.com/CU-ESIIL/innovation-summit-utils.git and click Clone : You should now see the innovation-summit-utils folder in your directory tree (provided you haven't changed directories from the default /home/jovyan/data-store Go into the innovation-summit-utils folder: open up the create_github_keypair.ipynb notebook by double-clicking: Select the default kernel Now you should see the notebook open. Click the play button at the top. You will be prompted to enter your GitHub username and email: You should now see your Public Key. Copy the WHOLE LINE including ssh-ed25519 at the beginning and the jovyan@... at the end Go to your GitHub settings page (you may need to log in to GitHub first): Select SSH and GPG keys Select New SSH key Give your key a descriptive name, paste your ENTIRE public key in the Key input box, and click Add SSH Key . You may need to re-authenticate with your password or two-factor authentication.: You should now see your new SSH key in your Authentication Keys list! Now you will be able to clone private repositories and push changes to GitHub from your Cyverse analysis! NOTE! Your GitHub authentication is ONLY for the analysis you're working with right now. You will be able to use it as long as you want there, but once you start a new analysis you will need to go through this process again. Feel free to delete keys from old analyses that have been shut down.","title":"Connecting to Cyverse and GitHub"},{"location":"collaborating-on-the-cloud/cyverse-instructions/#connecting-to-cyverse-and-github","text":"","title":"Connecting to Cyverse and GitHub"},{"location":"collaborating-on-the-cloud/cyverse-instructions/#log-in-to-cyverse","text":"Go to the Cyverse user account website https://user.cyverse.org/ Click Sign up (if you do not already have an account). When you make this account, please use the email that you have been using to communicate with our team regarding the event. That email is attached to our CyVerse workshop. Log in to Cyverse https://user.cyverse.org/ with your new account. From your account, go to the navigation bar at left and select 'Workshops' From the workshop page, find the workshop titled \"Forest Carbon Codefest\". It should look like this: Click on the tile, and then on the page for the workshop, click, \"Enroll\" at upper right. You should be enrolled automatically if you are using the email you have given our team. Head over to the Cyverse Discovery Environment by clicking on 'Services' at the upper right and then 'Discovery Environment' under 'My Services'. You should now see the Discovery Environment:","title":"Log in to Cyverse"},{"location":"collaborating-on-the-cloud/cyverse-instructions/#open-up-an-analysis-with-the-hackathon-environment-jupyter-lab","text":"From the Cyverse Discovery Environment, click on Apps in the left menu Select JupyterLab ESIIL Configure and launch your analysis - the defaults are fine for now: Click Go to analysis : Now you should see Jupyter Lab!","title":"Open up an analysis with the hackathon environment (Jupyter Lab)"},{"location":"collaborating-on-the-cloud/cyverse-instructions/#set-up-your-github-credentials","text":"","title":"Set up your GitHub credentials"},{"location":"collaborating-on-the-cloud/cyverse-instructions/#if-you-would-prefer-to-follow-a-video-instead-of-a-written-outline-we-have-prepared-a-video-here","text":"From Jupyter Lab, click on the GitHub icon on the left menu: Click Clone a Repository : Paste the link to the innovation-summit-utils https://github.com/CU-ESIIL/innovation-summit-utils.git and click Clone : You should now see the innovation-summit-utils folder in your directory tree (provided you haven't changed directories from the default /home/jovyan/data-store Go into the innovation-summit-utils folder: open up the create_github_keypair.ipynb notebook by double-clicking: Select the default kernel Now you should see the notebook open. Click the play button at the top. You will be prompted to enter your GitHub username and email: You should now see your Public Key. Copy the WHOLE LINE including ssh-ed25519 at the beginning and the jovyan@... at the end Go to your GitHub settings page (you may need to log in to GitHub first): Select SSH and GPG keys Select New SSH key Give your key a descriptive name, paste your ENTIRE public key in the Key input box, and click Add SSH Key . You may need to re-authenticate with your password or two-factor authentication.: You should now see your new SSH key in your Authentication Keys list! Now you will be able to clone private repositories and push changes to GitHub from your Cyverse analysis! NOTE! Your GitHub authentication is ONLY for the analysis you're working with right now. You will be able to use it as long as you want there, but once you start a new analysis you will need to go through this process again. Feel free to delete keys from old analyses that have been shut down.","title":"If you would prefer to follow a video instead of a written outline, we have prepared a video here:"},{"location":"collaborating-on-the-cloud/cyverse_data_management/","text":"Cyverse data management \u00b6 Cloud-to-instance data access \u00b6 The best and most efficient way to access most data from within your Cyverse instance is via APIs, VSI, or STAC. Examples of such data access can be found throughout the data library. This is the preferred method of data access since it keeps data on the cloud, puts it directly on your instance, and then the data is removed upon instance termination. Note that any data you want to keep must be moved off the instance and to the Cyverse data store prior to instance termination (see below, \"Saving data from your instance to the data store\"). Pre-downloaded data on Cyverse data store \u00b6 Some data can be time consuming or frustrating to access. Or, you or one of your teammates may just be much more comfortable working with data that has effectively been 'downloaded locally'. In an attempt to streamline your projects, the ESIIL and Earth Lab teams have loaded a set of data onto the Cyverse data store, which can be read from your Cyverse instance. Pre-downloaded data for the Forest Carbon Codefest can be found in the Cyverse data store at this link. The path directory to this location from within a Cyverse instance is: ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest Note that, while data CAN be read on your instance directly from the data store, it is usually best to move the data to your instance prior to reading and processing the data. Having the data directly on your instance will dramatically improve processing time and performance. (see below, \"Moving data from the data store to your instance\") Moving data from the data store to your instance \u00b6 Use the terminal command line interface on your instance to move data from the data store to your instance (whether that is pre-downloaded data or data that you have saved to your team folder). The home directory of your instance is: /home/jovyan To do so, open the Terminal from your launcher Then, use the 'cp' command to copy data from the data store to your instance. Use the flag -r if you are moving an entire directory or directory structure. The command is in the form: cp -r data-store-location new-location-on-instance For example, the below command will move the entire LCMAP_SR_1985-2021 directory to a new data directory on your instance: cp -r ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/LCMAP_SR_1985_2021 /home/jovyan/data/ Saving data from your instance to the data store \u00b6 Any data or outputs that you want to keep, such as newly derived datasets or figures, must be moved off the instance and to the Cyverse data store prior to instance termination. To do so, you will follow the same steps as in \"Moving data from the data store to your instance\" (see above), but with the directories in the command reversed. All team outputs should be stored in the subdirectories named TeamX in this directory: ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/Team_outputs Each team has their own directory; make sure you are saving to the correct one! For example, if you were on Team1 and wanted to save a figures directory, you could use the below command: cp -r /home/jovyan/figures ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/Team_outputs/Team1/","title":"Cyverse data management"},{"location":"collaborating-on-the-cloud/cyverse_data_management/#cyverse-data-management","text":"","title":"Cyverse data management"},{"location":"collaborating-on-the-cloud/cyverse_data_management/#cloud-to-instance-data-access","text":"The best and most efficient way to access most data from within your Cyverse instance is via APIs, VSI, or STAC. Examples of such data access can be found throughout the data library. This is the preferred method of data access since it keeps data on the cloud, puts it directly on your instance, and then the data is removed upon instance termination. Note that any data you want to keep must be moved off the instance and to the Cyverse data store prior to instance termination (see below, \"Saving data from your instance to the data store\").","title":"Cloud-to-instance data access"},{"location":"collaborating-on-the-cloud/cyverse_data_management/#pre-downloaded-data-on-cyverse-data-store","text":"Some data can be time consuming or frustrating to access. Or, you or one of your teammates may just be much more comfortable working with data that has effectively been 'downloaded locally'. In an attempt to streamline your projects, the ESIIL and Earth Lab teams have loaded a set of data onto the Cyverse data store, which can be read from your Cyverse instance. Pre-downloaded data for the Forest Carbon Codefest can be found in the Cyverse data store at this link. The path directory to this location from within a Cyverse instance is: ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest Note that, while data CAN be read on your instance directly from the data store, it is usually best to move the data to your instance prior to reading and processing the data. Having the data directly on your instance will dramatically improve processing time and performance. (see below, \"Moving data from the data store to your instance\")","title":"Pre-downloaded data on Cyverse data store"},{"location":"collaborating-on-the-cloud/cyverse_data_management/#moving-data-from-the-data-store-to-your-instance","text":"Use the terminal command line interface on your instance to move data from the data store to your instance (whether that is pre-downloaded data or data that you have saved to your team folder). The home directory of your instance is: /home/jovyan To do so, open the Terminal from your launcher Then, use the 'cp' command to copy data from the data store to your instance. Use the flag -r if you are moving an entire directory or directory structure. The command is in the form: cp -r data-store-location new-location-on-instance For example, the below command will move the entire LCMAP_SR_1985-2021 directory to a new data directory on your instance: cp -r ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/LCMAP_SR_1985_2021 /home/jovyan/data/","title":"Moving data from the data store to your instance"},{"location":"collaborating-on-the-cloud/cyverse_data_management/#saving-data-from-your-instance-to-the-data-store","text":"Any data or outputs that you want to keep, such as newly derived datasets or figures, must be moved off the instance and to the Cyverse data store prior to instance termination. To do so, you will follow the same steps as in \"Moving data from the data store to your instance\" (see above), but with the directories in the command reversed. All team outputs should be stored in the subdirectories named TeamX in this directory: ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/Team_outputs Each team has their own directory; make sure you are saving to the correct one! For example, if you were on Team1 and wanted to save a figures directory, you could use the below command: cp -r /home/jovyan/figures ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/Team_outputs/Team1/","title":"Saving data from your instance to the data store"},{"location":"collaborating-on-the-cloud/github-basics/","text":"Github essentials \u00b6 I. Introduction (2 minutes) \u00b6 A. Brief overview of GitHub: \u00b6 GitHub is a web-based platform that provides version control and collaboration features using Git, a distributed version control system. It enables developers to work together on projects, track changes to code, and efficiently manage different versions of the project. GitHub is widely used in the software development industry and is an essential tool for collaborative projects and maintaining code quality. B. Introduce GitHub Desktop and JupyterHub GitHub widget: \u00b6 GitHub Desktop is a graphical user interface (GUI) application that simplifies working with Git and GitHub by providing a more visual and intuitive way to manage repositories, branches, commits, and other Git features. JupyterHub GitHub widget, on the other hand, is a built-in widget that integrates Git and GitHub functionality directly into Jupyter notebooks, allowing users to perform version control and collaboration tasks within the Jupyter environment. Both tools help streamline the process of working with GitHub and make it more accessible to users with varying levels of experience with Git and version control. 1. Download GitHub Desktop \u00b6 Step 1: Download GitHub Desktop \u00b6 Go to the GitHub Desktop download page: https://desktop.github.com/ Click on the \u201cDownload for Windows\u201d or \u201cDownload for macOS\u201d button, depending on your operating system. The download should start automatically. Step 2: Install GitHub Desktop \u00b6 For Windows: Locate the downloaded installer file (usually in the Downloads folder) and double-click on it to run the installer. Follow the installation instructions that appear on the screen, accepting the default settings or customizing them as desired. Once the installation is complete, GitHub Desktop will launch automatically. For macOS: Locate the downloaded .zip file (usually in the Downloads folder) and double-click on it to extract the GitHub Desktop application. Drag the extracted \u201cGitHub Desktop\u201d application into the \u201cApplications\u201d folder. Open the \u201cApplications\u201d folder and double-click on \u201cGitHub Desktop\u201d to launch the application. Step 3: Set up GitHub Desktop \u00b6 When GitHub Desktop launches for the first time, you will be prompted to sign in with your GitHub account. If you don\u2019t have one, you can create one at https://github.com/join . Enter your GitHub username (or email) and password, and click on \u201cSign in.\u201d You will then be prompted to configure Git. Enter your name and email address, which will be used for your commit messages. Click \u201cContinue\u201d when you\u2019re done. Choose whether you want to submit usage data to help improve GitHub Desktop. Click \u201cFinish\u201d to complete the setup. Now, you have successfully installed and set up GitHub Desktop. You can start using it to clone repositories, make changes, commit, and sync with the remote repositories on GitHub. 1. Download GitHub for JupyterHub cloud service \u00b6 Step 1: Accessing JupyterHub on the cloud \u00b6 Visit the JupyterHub cloud service you want to use (e.g., Binder, Google Colab, or a custom JupyterHub deployment provided by your organization). Sign in with your credentials or authenticate using a third-party service if required. Step 2: Launch a new Jupyter Notebook or open an existing one \u00b6 Click on the \u201cNew\u201d button (usually located in the top right corner) and select \u201cPython\u201d to create a new Jupyter Notebook or open an existing one from the file browser. Once the notebook is open, you will see the Jupyter Notebook interface with the familiar cells for writing and executing code. Step 3: Install and enable the JupyterLab Git extension \u00b6 In your Jupyter Notebook, create a new code cell and run the following command to install the JupyterLab Git extension: !pip install jupyterlab-git Restart the Jupyter Notebook server for the changes to take effect. Step 4: Using the JupyterHub GitHub widget \u00b6 In the Jupyter Notebook interface, you should now see a Git icon on the left sidebar. Click on it to open the GitHub widget. To clone a repository, click on the \u201c+\u201d icon in the GitHub widget and enter the repository URL. This will clone the repository into your JupyterHub workspace. You can now navigate through the cloned repository, make changes, and use the GitHub widget to stage, commit, and push your changes back to the remote repository. To create and manage branches, use the branch icon in the GitHub widget. You can create new branches, switch between branches, and merge branches using this interface. To sync your local repository with the remote repository, use the \u201cPull\u201d and \u201cPush\u201d buttons in the GitHub widget. Now, you know how to access and use the JupyterHub GitHub widget running on the cloud. This allows you to work with Git and GitHub directly from your Jupyter Notebook interface, streamlining your workflow and making collaboration easier. C. GitHub in Rstudio: \u00b6 Integrating GitHub with RStudio allows users to manage their Git repositories and collaborate on projects directly within the RStudio environment. It offers similar functionality to GitHub Desktop but caters specifically to R users working within RStudio. By configuring RStudio to work with Git, creating or opening RStudio projects, and linking projects to GitHub repositories, users can enjoy a seamless workflow for version control and collaboration. RStudio\u2019s Git pane enables users to stage, commit, and push changes to remote repositories, as well as manage branches and sync local repositories with remote ones, providing a comprehensive solution for R developers working with GitHub. Step 1: Install Git \u00b6 Before integrating GitHub with RStudio, you need to have Git installed on your computer. Visit the official Git website ( https://git-scm.com/ ) to download and install the latest version of Git for your operating system. Step 2: Configure RStudio to work with Git \u00b6 Open RStudio. Go to \u201cTools\u201d > \u201cGlobal Options\u201d in the top menu. In the \u201cGlobal Options\u201d window, click on the \u201cGit/SVN\u201d tab. Check that the \u201cGit executable\u201d field is pointing to the correct location of the installed Git. If not, click \u201cBrowse\u201d and navigate to the location of the Git executable file (usually found in the \u201cbin\u201d folder of the Git installation directory). Click \u201cOK\u201d to save the changes. Step 3: Create or open an RStudio project \u00b6 To create a new RStudio project, go to \u201cFile\u201d > \u201cNew Project\u201d in the top menu. You can either create a new directory or choose an existing one for your project. To open an existing RStudio project, go to \u201cFile\u201d > \u201cOpen Project\u201d and navigate to the project\u2019s \u201c.Rproj\u201d file. Step 4: Link your RStudio project to a GitHub repository \u00b6 In the RStudio project, go to the \u201cTools\u201d menu and select \u201cVersion Control\u201d > \u201cProject Setup.\u201d In the \u201cProject Setup\u201d window, select \u201cGit\u201d as the version control system and click \u201cOK.\u201d A new \u201c.git\u201d folder will be created in your project directory, initializing it as a Git repository. Commit any changes you have made so far by clicking on the \u201cCommit\u201d button in the \u201cGit\u201d pane in RStudio. To link your local repository to a remote GitHub repository, go to your GitHub account and create a new repository. Copy the remote repository\u2019s URL (e.g., \u201c https://github.com/username/repository.git \u201d). In RStudio, open the \u201cShell\u201d by going to \u201cTools\u201d > \u201cShell.\u201d In the shell, run the following command to add the remote repository: git remote add origin https://github.com/username/repository.git Replace the URL with the one you copied from your GitHub repository. Push your changes to the remote repository by running the following command in the shell: git push -u origin master Now, your RStudio project is linked to a GitHub repository. You can use the \u201cGit\u201d pane in RStudio to stage, commit, and push changes to the remote repository, as well as manage branches and sync your local repository with the remote one. By integrating GitHub with RStudio, you can streamline your workflow, collaborate more effectively with your team, and manage your Git repositories directly from the RStudio interface. II. GitHub Basics (4 minutes) \u00b6 A. Repository: \u00b6 A repository, often abbreviated as \u201crepo,\u201d is the fundamental building block of GitHub. It is a storage space for your project files, including the code, documentation, and other related resources. Each repository also contains the complete history of all changes made to the project files, which is crucial for effective version control. Repositories can be public, allowing anyone to access and contribute, or private, restricting access to specific collaborators. B. Fork and Clone: \u00b6 Forking and cloning are two essential operations for working with repositories on GitHub. Forking creates a personal copy of someone else\u2019s repository under your GitHub account, enabling you to make changes to the project without affecting the original repo. Cloning, on the other hand, is the process of downloading a remote repository to your local machine for offline development. In GitHub Desktop, you can clone a repository by selecting \u201cClone a repository from the Internet\u201d and entering the repository URL. In JupyterHub GitHub widget, you can clone a repository by entering the repo URL in the \u201cClone Repository\u201d section of the widget. C. Branches: \u00b6 Branches are a critical aspect of Git version control, as they allow you to create multiple parallel versions of your project within a single repository. This is particularly useful when working on new features or bug fixes, as it prevents changes from interfering with the main (or \u201cmaster\u201d) branch until they are ready to be merged. Creating a new branch in GitHub Desktop can be done by clicking the \u201cCurrent Branch\u201d dropdown and selecting \u201cNew Branch.\u201d In JupyterHub GitHub widget, you can create a new branch by clicking the \u201cNew Branch\u201d button in the \u201cBranches\u201d section of the widget. D. Replace \u2018master\u2019 with \u2018main\u2019: \u00b6 In recent years, there has been a growing awareness of the importance of inclusive language in technology. One such example is the use of the term \u201cmaster\u201d in the context of the default branch in a GitHub repository. The term \u201cmaster\u201d has historical connections to the \u201cmaster/slave\u201d file structure, which evokes an unsavory colonial past associated with slavery. In light of this, many developers and organizations have begun to replace the term \u201cmaster\u201d with more neutral terms, such as \u201cmain.\u201d We encourage you to follow this practice and change the default branch name in your repositories from \u201cmaster\u201d to \u201cmain\u201d or another suitable alternative. This small change can help promote a more inclusive and welcoming environment within the technology community. III. Collaboration and Version Control (5 minutes) \u00b6 A. Commits: \u00b6 Commits are snapshots of your project\u2019s changes at a specific point in time, serving as the fundamental building blocks of Git\u2019s version control system. Commits make it possible to track changes, revert to previous versions, and collaborate with others. In GitHub Desktop, you can make a commit by staging the changes you want to include, adding a descriptive commit message, and clicking \u201cCommit to [branch_name].\u201d In JupyterHub GitHub widget, you can create a commit by selecting the files with changes, entering a commit message, and clicking the \u201cCommit\u201d button. B. Push: \u00b6 In GitHub, \u201cpush\u201d is a fundamental operation in the version control process that transfers commits from your local repository to a remote repository, such as the one hosted on GitHub. When you push changes, you synchronize the remote repository with the latest updates made to your local repository, making those changes accessible to other collaborators working on the same project. This operation ensures that the remote repository reflects the most recent state of your work and allows your team members to stay up to date with your changes. Pushing is an essential step in distributed version control systems like Git, as it promotes efficient collaboration among multiple contributors and provides a centralized location for tracking the project\u2019s history and progress. In GitHub, the concepts of \u201ccommit\u201d and \u201cpush\u201d represent two distinct steps in the version control process. A \u201ccommit\u201d is the action of saving changes to your local repository. When you commit changes, you create a snapshot of your work, accompanied by a unique identifier and an optional descriptive message. Commits allow you to track the progress of your work over time and make it easy to revert to a previous state if necessary. On the other hand, \u201cpush\u201d is the action of transferring your local commits to a remote repository, such as the one hosted on GitHub. Pushing makes your changes accessible to others collaborating on the same project and ensures that the remote repository stays up to date with your local repository. In summary, committing saves changes locally, while pushing synchronizes those changes with a remote repository, allowing for seamless collaboration among multiple contributors. C. Pull Requests: \u00b6 Pull requests are a collaboration feature on GitHub that enables developers to propose changes to a repository, discuss those changes, and ultimately merge them into the main branch. To create a pull request, you must first push your changes to a branch on your fork of the repository. Then, using either GitHub Desktop or JupyterHub GitHub widget, you can navigate to the original repository, click the \u201cPull Request\u201d tab, and create a new pull request. After the pull request is reviewed and approved, it can be merged into the main branch. D. Merging and Resolving Conflicts: \u00b6 Merging is the process of combining changes from one branch into another. This is typically done when a feature or bugfix has been completed and is ready to be integrated into the main branch. Conflicts can arise during the merging process if the same lines of code have been modified in both branches. To resolve conflicts, you must manually review the changes and decide which version to keep. In GitHub Desktop, you can merge branches by selecting the target branch and choosing \u201cMerge into Current Branch.\u201d Conflicts will be highlighted, and you can edit the files to resolve them before committing the changes. In JupyterHub GitHub widget, you can merge branches by selecting the target branch in the \u201cBranches\u201d section and clicking the \u201cMerge\u201d button. If conflicts occur, the widget will prompt you to resolve them before completing the merge. IV. Additional Features (2 minutes) \u00b6 A. Issues and Project Management: \u00b6 Issues are a powerful feature in GitHub that allows developers to track and manage bugs, enhancements, and other tasks within a project. Issues can be assigned to collaborators, labeled for easy organization, and linked to specific commits or pull requests. They provide a centralized location for discussing and addressing project-related concerns, fostering collaboration and transparent communication among team members. Using issues effectively can significantly improve the overall management and organization of your projects. B. GitHub Pages: \u00b6 GitHub Pages is a service offered by GitHub that allows you to host static websites directly from a repository. By creating a new branch named \u201cgh-pages\u201d in your repository and adding the necessary files (HTML, CSS, JavaScript, etc.), GitHub will automatically build and deploy your website to a publicly accessible URL. This is particularly useful for showcasing project documentation, creating personal portfolios, or hosting project demos. With GitHub Pages, you can take advantage of the version control and collaboration features of GitHub while easily sharing your work with others. V. Conclusion (2 minutes) \u00b6 A. Recap of the essentials of GitHub: \u00b6 In this brief introduction, we have covered the essentials of GitHub, including the basics of repositories, forking, cloning, branching, commits, pull requests, merging, and resolving conflicts. We have also discussed additional features like issues for project management and GitHub Pages for hosting websites directly from a repository. B. Encourage further exploration and learning: \u00b6 While this introduction provides a solid foundation for understanding and using GitHub, there is still much more to learn and explore. As you continue to use GitHub in your projects, you will discover new features and workflows that can enhance your productivity and collaboration. We encourage you to dive deeper into the platform and experiment with different tools and techniques. C. Share resources for learning more about GitHub: \u00b6 There are many resources available for learning more about GitHub and expanding your skills. Some popular resources include GitHub Guides ( https://guides.github.com/ ), which offers a collection of tutorials and best practices, the official GitHub documentation ( https://docs.github.com/ ), and various online tutorials and courses. By engaging with these resources and participating in the GitHub community, you can further develop your understanding of the platform and become a more proficient user. V. Conclusion (2 minutes) \u00b6 A. Recap of the essentials of GitHub: \u00b6 In this brief introduction, we have covered the essentials of GitHub, including the basics of repositories, forking, cloning, branching, commits, pull requests, merging, and resolving conflicts. We have also discussed additional features like issues for project management and GitHub Pages for hosting websites directly from a repository. B. Encourage further exploration and learning: \u00b6 While this introduction provides a solid foundation for understanding and using GitHub, there is still much more to learn and explore. As you continue to use GitHub in your projects, you will discover new features and workflows that can enhance your productivity and collaboration. We encourage you to dive deeper into the platform and experiment with different tools and techniques. C. Share resources for learning more about GitHub: \u00b6 There are many resources available for learning more about GitHub and expanding your skills. Some popular resources include GitHub Guides ( https://guides.github.com/ ), which offers a collection of tutorials and best practices, the official GitHub documentation ( https://docs.github.com/ ), and various online tutorials and courses. By engaging with these resources and participating in the GitHub community, you can further develop your understanding of the platform and become a more proficient user. By Ty Tuff, ESIIL","title":"Github essentials"},{"location":"collaborating-on-the-cloud/github-basics/#github-essentials","text":"","title":"Github essentials"},{"location":"collaborating-on-the-cloud/github-basics/#i-introduction-2-minutes","text":"","title":"I. Introduction (2 minutes)"},{"location":"collaborating-on-the-cloud/github-basics/#a-brief-overview-of-github","text":"GitHub is a web-based platform that provides version control and collaboration features using Git, a distributed version control system. It enables developers to work together on projects, track changes to code, and efficiently manage different versions of the project. GitHub is widely used in the software development industry and is an essential tool for collaborative projects and maintaining code quality.","title":"A. Brief overview of GitHub:"},{"location":"collaborating-on-the-cloud/github-basics/#b-introduce-github-desktop-and-jupyterhub-github-widget","text":"GitHub Desktop is a graphical user interface (GUI) application that simplifies working with Git and GitHub by providing a more visual and intuitive way to manage repositories, branches, commits, and other Git features. JupyterHub GitHub widget, on the other hand, is a built-in widget that integrates Git and GitHub functionality directly into Jupyter notebooks, allowing users to perform version control and collaboration tasks within the Jupyter environment. Both tools help streamline the process of working with GitHub and make it more accessible to users with varying levels of experience with Git and version control.","title":"B. Introduce GitHub Desktop and JupyterHub GitHub widget:"},{"location":"collaborating-on-the-cloud/github-basics/#1-download-github-desktop","text":"","title":"1. Download GitHub Desktop"},{"location":"collaborating-on-the-cloud/github-basics/#step-1-download-github-desktop","text":"Go to the GitHub Desktop download page: https://desktop.github.com/ Click on the \u201cDownload for Windows\u201d or \u201cDownload for macOS\u201d button, depending on your operating system. The download should start automatically.","title":"Step 1: Download GitHub Desktop"},{"location":"collaborating-on-the-cloud/github-basics/#step-2-install-github-desktop","text":"For Windows: Locate the downloaded installer file (usually in the Downloads folder) and double-click on it to run the installer. Follow the installation instructions that appear on the screen, accepting the default settings or customizing them as desired. Once the installation is complete, GitHub Desktop will launch automatically. For macOS: Locate the downloaded .zip file (usually in the Downloads folder) and double-click on it to extract the GitHub Desktop application. Drag the extracted \u201cGitHub Desktop\u201d application into the \u201cApplications\u201d folder. Open the \u201cApplications\u201d folder and double-click on \u201cGitHub Desktop\u201d to launch the application.","title":"Step 2: Install GitHub Desktop"},{"location":"collaborating-on-the-cloud/github-basics/#step-3-set-up-github-desktop","text":"When GitHub Desktop launches for the first time, you will be prompted to sign in with your GitHub account. If you don\u2019t have one, you can create one at https://github.com/join . Enter your GitHub username (or email) and password, and click on \u201cSign in.\u201d You will then be prompted to configure Git. Enter your name and email address, which will be used for your commit messages. Click \u201cContinue\u201d when you\u2019re done. Choose whether you want to submit usage data to help improve GitHub Desktop. Click \u201cFinish\u201d to complete the setup. Now, you have successfully installed and set up GitHub Desktop. You can start using it to clone repositories, make changes, commit, and sync with the remote repositories on GitHub.","title":"Step 3: Set up GitHub Desktop"},{"location":"collaborating-on-the-cloud/github-basics/#1-download-github-for-jupyterhub-cloud-service","text":"","title":"1. Download GitHub for JupyterHub cloud service"},{"location":"collaborating-on-the-cloud/github-basics/#step-1-accessing-jupyterhub-on-the-cloud","text":"Visit the JupyterHub cloud service you want to use (e.g., Binder, Google Colab, or a custom JupyterHub deployment provided by your organization). Sign in with your credentials or authenticate using a third-party service if required.","title":"Step 1: Accessing JupyterHub on the cloud"},{"location":"collaborating-on-the-cloud/github-basics/#step-2-launch-a-new-jupyter-notebook-or-open-an-existing-one","text":"Click on the \u201cNew\u201d button (usually located in the top right corner) and select \u201cPython\u201d to create a new Jupyter Notebook or open an existing one from the file browser. Once the notebook is open, you will see the Jupyter Notebook interface with the familiar cells for writing and executing code.","title":"Step 2: Launch a new Jupyter Notebook or open an existing one"},{"location":"collaborating-on-the-cloud/github-basics/#step-3-install-and-enable-the-jupyterlab-git-extension","text":"In your Jupyter Notebook, create a new code cell and run the following command to install the JupyterLab Git extension: !pip install jupyterlab-git Restart the Jupyter Notebook server for the changes to take effect.","title":"Step 3: Install and enable the JupyterLab Git extension"},{"location":"collaborating-on-the-cloud/github-basics/#step-4-using-the-jupyterhub-github-widget","text":"In the Jupyter Notebook interface, you should now see a Git icon on the left sidebar. Click on it to open the GitHub widget. To clone a repository, click on the \u201c+\u201d icon in the GitHub widget and enter the repository URL. This will clone the repository into your JupyterHub workspace. You can now navigate through the cloned repository, make changes, and use the GitHub widget to stage, commit, and push your changes back to the remote repository. To create and manage branches, use the branch icon in the GitHub widget. You can create new branches, switch between branches, and merge branches using this interface. To sync your local repository with the remote repository, use the \u201cPull\u201d and \u201cPush\u201d buttons in the GitHub widget. Now, you know how to access and use the JupyterHub GitHub widget running on the cloud. This allows you to work with Git and GitHub directly from your Jupyter Notebook interface, streamlining your workflow and making collaboration easier.","title":"Step 4: Using the JupyterHub GitHub widget"},{"location":"collaborating-on-the-cloud/github-basics/#c-github-in-rstudio","text":"Integrating GitHub with RStudio allows users to manage their Git repositories and collaborate on projects directly within the RStudio environment. It offers similar functionality to GitHub Desktop but caters specifically to R users working within RStudio. By configuring RStudio to work with Git, creating or opening RStudio projects, and linking projects to GitHub repositories, users can enjoy a seamless workflow for version control and collaboration. RStudio\u2019s Git pane enables users to stage, commit, and push changes to remote repositories, as well as manage branches and sync local repositories with remote ones, providing a comprehensive solution for R developers working with GitHub.","title":"C. GitHub in Rstudio:"},{"location":"collaborating-on-the-cloud/github-basics/#step-1-install-git","text":"Before integrating GitHub with RStudio, you need to have Git installed on your computer. Visit the official Git website ( https://git-scm.com/ ) to download and install the latest version of Git for your operating system.","title":"Step 1: Install Git"},{"location":"collaborating-on-the-cloud/github-basics/#step-2-configure-rstudio-to-work-with-git","text":"Open RStudio. Go to \u201cTools\u201d > \u201cGlobal Options\u201d in the top menu. In the \u201cGlobal Options\u201d window, click on the \u201cGit/SVN\u201d tab. Check that the \u201cGit executable\u201d field is pointing to the correct location of the installed Git. If not, click \u201cBrowse\u201d and navigate to the location of the Git executable file (usually found in the \u201cbin\u201d folder of the Git installation directory). Click \u201cOK\u201d to save the changes.","title":"Step 2: Configure RStudio to work with Git"},{"location":"collaborating-on-the-cloud/github-basics/#step-3-create-or-open-an-rstudio-project","text":"To create a new RStudio project, go to \u201cFile\u201d > \u201cNew Project\u201d in the top menu. You can either create a new directory or choose an existing one for your project. To open an existing RStudio project, go to \u201cFile\u201d > \u201cOpen Project\u201d and navigate to the project\u2019s \u201c.Rproj\u201d file.","title":"Step 3: Create or open an RStudio project"},{"location":"collaborating-on-the-cloud/github-basics/#step-4-link-your-rstudio-project-to-a-github-repository","text":"In the RStudio project, go to the \u201cTools\u201d menu and select \u201cVersion Control\u201d > \u201cProject Setup.\u201d In the \u201cProject Setup\u201d window, select \u201cGit\u201d as the version control system and click \u201cOK.\u201d A new \u201c.git\u201d folder will be created in your project directory, initializing it as a Git repository. Commit any changes you have made so far by clicking on the \u201cCommit\u201d button in the \u201cGit\u201d pane in RStudio. To link your local repository to a remote GitHub repository, go to your GitHub account and create a new repository. Copy the remote repository\u2019s URL (e.g., \u201c https://github.com/username/repository.git \u201d). In RStudio, open the \u201cShell\u201d by going to \u201cTools\u201d > \u201cShell.\u201d In the shell, run the following command to add the remote repository: git remote add origin https://github.com/username/repository.git Replace the URL with the one you copied from your GitHub repository. Push your changes to the remote repository by running the following command in the shell: git push -u origin master Now, your RStudio project is linked to a GitHub repository. You can use the \u201cGit\u201d pane in RStudio to stage, commit, and push changes to the remote repository, as well as manage branches and sync your local repository with the remote one. By integrating GitHub with RStudio, you can streamline your workflow, collaborate more effectively with your team, and manage your Git repositories directly from the RStudio interface.","title":"Step 4: Link your RStudio project to a GitHub repository"},{"location":"collaborating-on-the-cloud/github-basics/#ii-github-basics-4-minutes","text":"","title":"II. GitHub Basics (4 minutes)"},{"location":"collaborating-on-the-cloud/github-basics/#a-repository","text":"A repository, often abbreviated as \u201crepo,\u201d is the fundamental building block of GitHub. It is a storage space for your project files, including the code, documentation, and other related resources. Each repository also contains the complete history of all changes made to the project files, which is crucial for effective version control. Repositories can be public, allowing anyone to access and contribute, or private, restricting access to specific collaborators.","title":"A. Repository:"},{"location":"collaborating-on-the-cloud/github-basics/#b-fork-and-clone","text":"Forking and cloning are two essential operations for working with repositories on GitHub. Forking creates a personal copy of someone else\u2019s repository under your GitHub account, enabling you to make changes to the project without affecting the original repo. Cloning, on the other hand, is the process of downloading a remote repository to your local machine for offline development. In GitHub Desktop, you can clone a repository by selecting \u201cClone a repository from the Internet\u201d and entering the repository URL. In JupyterHub GitHub widget, you can clone a repository by entering the repo URL in the \u201cClone Repository\u201d section of the widget.","title":"B. Fork and Clone:"},{"location":"collaborating-on-the-cloud/github-basics/#c-branches","text":"Branches are a critical aspect of Git version control, as they allow you to create multiple parallel versions of your project within a single repository. This is particularly useful when working on new features or bug fixes, as it prevents changes from interfering with the main (or \u201cmaster\u201d) branch until they are ready to be merged. Creating a new branch in GitHub Desktop can be done by clicking the \u201cCurrent Branch\u201d dropdown and selecting \u201cNew Branch.\u201d In JupyterHub GitHub widget, you can create a new branch by clicking the \u201cNew Branch\u201d button in the \u201cBranches\u201d section of the widget.","title":"C. Branches:"},{"location":"collaborating-on-the-cloud/github-basics/#d-replace-master-with-main","text":"In recent years, there has been a growing awareness of the importance of inclusive language in technology. One such example is the use of the term \u201cmaster\u201d in the context of the default branch in a GitHub repository. The term \u201cmaster\u201d has historical connections to the \u201cmaster/slave\u201d file structure, which evokes an unsavory colonial past associated with slavery. In light of this, many developers and organizations have begun to replace the term \u201cmaster\u201d with more neutral terms, such as \u201cmain.\u201d We encourage you to follow this practice and change the default branch name in your repositories from \u201cmaster\u201d to \u201cmain\u201d or another suitable alternative. This small change can help promote a more inclusive and welcoming environment within the technology community.","title":"D. Replace \u2018master\u2019 with \u2018main\u2019:"},{"location":"collaborating-on-the-cloud/github-basics/#iii-collaboration-and-version-control-5-minutes","text":"","title":"III. Collaboration and Version Control (5 minutes)"},{"location":"collaborating-on-the-cloud/github-basics/#a-commits","text":"Commits are snapshots of your project\u2019s changes at a specific point in time, serving as the fundamental building blocks of Git\u2019s version control system. Commits make it possible to track changes, revert to previous versions, and collaborate with others. In GitHub Desktop, you can make a commit by staging the changes you want to include, adding a descriptive commit message, and clicking \u201cCommit to [branch_name].\u201d In JupyterHub GitHub widget, you can create a commit by selecting the files with changes, entering a commit message, and clicking the \u201cCommit\u201d button.","title":"A. Commits:"},{"location":"collaborating-on-the-cloud/github-basics/#b-push","text":"In GitHub, \u201cpush\u201d is a fundamental operation in the version control process that transfers commits from your local repository to a remote repository, such as the one hosted on GitHub. When you push changes, you synchronize the remote repository with the latest updates made to your local repository, making those changes accessible to other collaborators working on the same project. This operation ensures that the remote repository reflects the most recent state of your work and allows your team members to stay up to date with your changes. Pushing is an essential step in distributed version control systems like Git, as it promotes efficient collaboration among multiple contributors and provides a centralized location for tracking the project\u2019s history and progress. In GitHub, the concepts of \u201ccommit\u201d and \u201cpush\u201d represent two distinct steps in the version control process. A \u201ccommit\u201d is the action of saving changes to your local repository. When you commit changes, you create a snapshot of your work, accompanied by a unique identifier and an optional descriptive message. Commits allow you to track the progress of your work over time and make it easy to revert to a previous state if necessary. On the other hand, \u201cpush\u201d is the action of transferring your local commits to a remote repository, such as the one hosted on GitHub. Pushing makes your changes accessible to others collaborating on the same project and ensures that the remote repository stays up to date with your local repository. In summary, committing saves changes locally, while pushing synchronizes those changes with a remote repository, allowing for seamless collaboration among multiple contributors.","title":"B. Push:"},{"location":"collaborating-on-the-cloud/github-basics/#c-pull-requests","text":"Pull requests are a collaboration feature on GitHub that enables developers to propose changes to a repository, discuss those changes, and ultimately merge them into the main branch. To create a pull request, you must first push your changes to a branch on your fork of the repository. Then, using either GitHub Desktop or JupyterHub GitHub widget, you can navigate to the original repository, click the \u201cPull Request\u201d tab, and create a new pull request. After the pull request is reviewed and approved, it can be merged into the main branch.","title":"C. Pull Requests:"},{"location":"collaborating-on-the-cloud/github-basics/#d-merging-and-resolving-conflicts","text":"Merging is the process of combining changes from one branch into another. This is typically done when a feature or bugfix has been completed and is ready to be integrated into the main branch. Conflicts can arise during the merging process if the same lines of code have been modified in both branches. To resolve conflicts, you must manually review the changes and decide which version to keep. In GitHub Desktop, you can merge branches by selecting the target branch and choosing \u201cMerge into Current Branch.\u201d Conflicts will be highlighted, and you can edit the files to resolve them before committing the changes. In JupyterHub GitHub widget, you can merge branches by selecting the target branch in the \u201cBranches\u201d section and clicking the \u201cMerge\u201d button. If conflicts occur, the widget will prompt you to resolve them before completing the merge.","title":"D. Merging and Resolving Conflicts:"},{"location":"collaborating-on-the-cloud/github-basics/#iv-additional-features-2-minutes","text":"","title":"IV. Additional Features (2 minutes)"},{"location":"collaborating-on-the-cloud/github-basics/#a-issues-and-project-management","text":"Issues are a powerful feature in GitHub that allows developers to track and manage bugs, enhancements, and other tasks within a project. Issues can be assigned to collaborators, labeled for easy organization, and linked to specific commits or pull requests. They provide a centralized location for discussing and addressing project-related concerns, fostering collaboration and transparent communication among team members. Using issues effectively can significantly improve the overall management and organization of your projects.","title":"A. Issues and Project Management:"},{"location":"collaborating-on-the-cloud/github-basics/#b-github-pages","text":"GitHub Pages is a service offered by GitHub that allows you to host static websites directly from a repository. By creating a new branch named \u201cgh-pages\u201d in your repository and adding the necessary files (HTML, CSS, JavaScript, etc.), GitHub will automatically build and deploy your website to a publicly accessible URL. This is particularly useful for showcasing project documentation, creating personal portfolios, or hosting project demos. With GitHub Pages, you can take advantage of the version control and collaboration features of GitHub while easily sharing your work with others.","title":"B. GitHub Pages:"},{"location":"collaborating-on-the-cloud/github-basics/#v-conclusion-2-minutes","text":"","title":"V. Conclusion (2 minutes)"},{"location":"collaborating-on-the-cloud/github-basics/#a-recap-of-the-essentials-of-github","text":"In this brief introduction, we have covered the essentials of GitHub, including the basics of repositories, forking, cloning, branching, commits, pull requests, merging, and resolving conflicts. We have also discussed additional features like issues for project management and GitHub Pages for hosting websites directly from a repository.","title":"A. Recap of the essentials of GitHub:"},{"location":"collaborating-on-the-cloud/github-basics/#b-encourage-further-exploration-and-learning","text":"While this introduction provides a solid foundation for understanding and using GitHub, there is still much more to learn and explore. As you continue to use GitHub in your projects, you will discover new features and workflows that can enhance your productivity and collaboration. We encourage you to dive deeper into the platform and experiment with different tools and techniques.","title":"B. Encourage further exploration and learning:"},{"location":"collaborating-on-the-cloud/github-basics/#c-share-resources-for-learning-more-about-github","text":"There are many resources available for learning more about GitHub and expanding your skills. Some popular resources include GitHub Guides ( https://guides.github.com/ ), which offers a collection of tutorials and best practices, the official GitHub documentation ( https://docs.github.com/ ), and various online tutorials and courses. By engaging with these resources and participating in the GitHub community, you can further develop your understanding of the platform and become a more proficient user.","title":"C. Share resources for learning more about GitHub:"},{"location":"collaborating-on-the-cloud/github-basics/#v-conclusion-2-minutes_1","text":"","title":"V. Conclusion (2 minutes)"},{"location":"collaborating-on-the-cloud/github-basics/#a-recap-of-the-essentials-of-github_1","text":"In this brief introduction, we have covered the essentials of GitHub, including the basics of repositories, forking, cloning, branching, commits, pull requests, merging, and resolving conflicts. We have also discussed additional features like issues for project management and GitHub Pages for hosting websites directly from a repository.","title":"A. Recap of the essentials of GitHub:"},{"location":"collaborating-on-the-cloud/github-basics/#b-encourage-further-exploration-and-learning_1","text":"While this introduction provides a solid foundation for understanding and using GitHub, there is still much more to learn and explore. As you continue to use GitHub in your projects, you will discover new features and workflows that can enhance your productivity and collaboration. We encourage you to dive deeper into the platform and experiment with different tools and techniques.","title":"B. Encourage further exploration and learning:"},{"location":"collaborating-on-the-cloud/github-basics/#c-share-resources-for-learning-more-about-github_1","text":"There are many resources available for learning more about GitHub and expanding your skills. Some popular resources include GitHub Guides ( https://guides.github.com/ ), which offers a collection of tutorials and best practices, the official GitHub documentation ( https://docs.github.com/ ), and various online tutorials and courses. By engaging with these resources and participating in the GitHub community, you can further develop your understanding of the platform and become a more proficient user. By Ty Tuff, ESIIL","title":"C. Share resources for learning more about GitHub:"},{"location":"collaborating-on-the-cloud/markdown_basics/","text":"Markdown for the Modern Researcher at ESIIL \u00b6 Introduction \u00b6 Overview of Markdown's relevance and utility in modern research. How Markdown streamlines documentation in diverse scientific and coding environments. Section 1: Mastering Markdown Syntax \u00b6 Objective: Equip researchers with a thorough understanding of Markdown syntax and its diverse applications. Topics Covered: Fundamentals of Text Formatting (headings, lists, bold, italics) Advanced Structures (tables, blockquotes) Integrating Multimedia (image and video links) Diagrams with Mermaid (creating flowcharts, mind maps, timelines) Interactive Elements (hyperlinks, embedding interactive content) Activities: Crafting a Markdown document with various formatting elements. Developing diagrams using Mermaid for research presentations. Embedding multimedia elements in a Markdown document for enhanced communication. Section 2: Markdown in Research Tools \u00b6 Objective: Showcase the integration of Markdown in RStudio and Jupyter Notebooks for scientific documentation. Topics Covered: Implementing Markdown in RStudio (R Markdown, knitting to HTML/PDF) Utilizing Markdown in Jupyter Notebooks (code and Markdown cells) Best practices for documenting research code Including code outputs and visualizations in documentation Activities: Creating and sharing an R Markdown document with annotated research data. Building a comprehensive Jupyter Notebook with integrated Markdown annotations. Section 3: Disseminating Research with Markdown and GitHub Pages \u00b6 Objective: Teach researchers how to publish and manage Markdown-based documentation as web pages. Topics Covered: Setting up a GitHub repository for hosting documentation Transforming Markdown files into web-friendly formats Customizing web page layouts and themes Advanced features using Jekyll Version control and content management for documentation Activities: Publishing a research project documentation on GitHub Pages. Applying custom themes and layouts to enhance online documentation. Conclusion \u00b6 Review of Markdown's role in enhancing research efficiency and clarity. Encouraging the integration of Markdown into daily research activities for improved documentation and dissemination. Additional Resources \u00b6 Curated list of advanced Markdown tutorials, guides for GitHub Pages, and Jekyll resources for researchers. Section 1: Mastering Markdown Syntax \u00b6 1. Fundamentals of Text Formatting \u00b6 Headings : Use # for different levels of headings. Heading Level 1 \u00b6 Heading Level 2 \u00b6 Heading Level 3 \u00b6 Lists : Bulleted lists use asterisks, numbers for ordered lists. Item 1 Item 2 Subitem 2.1 Subitem 2.2 First item Second item Bold and Italics : Use asterisks or underscores. Bold Text Italic Text 2. Advanced Structures \u00b6 Tables : Create tables using dashes and pipes. Header 1 Header 2 Header 3 Row 1 Data Data Row 2 Data Data Add a \":\"\" to change text justification. Here the : is added on the left for left justification. | Header 1 | Header 2 | Header 3 | |---------:|--------- |----------| | Row 1 | Data | Data | | Row 2 | Data | Data | A N A L Y T I C S E N R E I N V I R O N M E N T V E L O P M O C O M U N E G A G E L L A H C N E R A T A D E V E L O P W E I T S I T N E I C S R S O I G O L O I B H T L A H T L A E W E G N E L T I T S I T N E I C S N I E E S R E H T O E N I C S L L A H C E G L A N E G A L L E H C N E I C If you hit the boundaries of Markdown's capabilities, you can start to add html directly. Remember, this entire exercisse is to translate to html. Sudoku Puzzle Fill in the blank cells with numbers from 1 to 9, such that each row, column, and 3x3 subgrid contains all the numbers from 1 to 9 without repetition. 5 3 7 6 1 9 5 9 8 6 8 6 3 4 8 3 1 7 2 6 6 2 8 4 1 9 5 8 7 9 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 Blockquotes : Use > for blockquotes. This is a blockquote. It can span multiple lines. 3. Integrating Multimedia \u00b6 Images : Add images using the format ![alt text](image_url) . Videos : Embed videos using HTML in Markdown. <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" frameborder=\"0\" allowfullscreen></iframe> 4. Diagrams with Mermaid \u00b6 Flowcharts : graph TD A[Start] --> B[Analyze Data] B --> C{Is Data Large?} C -->|Yes| D[Apply Big Data Solutions] C -->|No| E[Use Traditional Methods] D --> F[Machine Learning] E --> G[Statistical Analysis] F --> H{Model Accurate?} G --> I[Report Results] H -->|Yes| J[Deploy Model] H -->|No| K[Refine Model] J --> L[Monitor Performance] K --> F L --> M[End: Success] I --> N[End: Report Generated] style A fill:#f9f,stroke:#333,stroke-width:2px style M fill:#9f9,stroke:#333,stroke-width:2px style N fill:#9f9,stroke:#333,stroke-width:2px Mind Maps : mindmap root((ESIIL)) section Data Sources Satellite Imagery ::icon(fa fa-satellite) Remote Sensing Data Drones Aircraft On-ground Sensors Weather Stations IoT Devices Open Environmental Data Public Datasets ::icon(fa fa-database) section Research Focus Climate Change Analysis Ice Melt Patterns Sea Level Rise Biodiversity Monitoring Species Distribution Habitat Fragmentation Geospatial Analysis Techniques Machine Learning Models Predictive Analytics section Applications Conservation Strategies ::icon(fa fa-leaf) Urban Planning Green Spaces Disaster Response Flood Mapping Wildfire Tracking section Tools and Technologies GIS Software QGIS ArcGIS Programming Languages Python R Cloud Computing Platforms AWS Google Earth Engine Data Visualization D3.js Tableau Timelines : gantt title ESIIL Year 2 Project Schedule dateFormat YYYY-MM-DD section CI Sovereign OASIS via private jupiterhubs :2024-08-01, 2024-10-30 OASIS documentation :2024-09-15, 70d Data cube OASIS via cyverse account :2024-09-15, 100d Integrate with ESIIL User Management system :2024-08-01, 2024-11-30 Build badges to deploy DE from mkdoc :2024-09-01, 2024-12-15 Streamline Github ssh key management :2024-10-01, 2024-12-31 Cyverse support (R proxy link) :2024-11-01, 2024-12-31 Cyverse use summary and statistics :2024-08-01, 2024-12-15 section CI Consultation and Education Conferences/Invited talks :2024-08-01, 2024-12-31 Office hours :2024-08-15, 2024-12-15 Proposals :2024-09-01, 2024-11-15 Private lessons :2024-09-15, 2024-11-30 Pre-event trainings :2024-10-01, 2024-12-15 Textbook development w/ education team :2024-08-01, 2024-12-15 Train the trainers / group lessons :2024-08-15, 2024-11-30 Tribal engagement :2024-09-01, 2024-12-15 Ethical Space training :2024-09-15, 2024-12-31 section CI Design and Build Data library (repository) :2024-08-01, 2024-10-30 Analytics library (repository) :2024-08-15, 2024-11-15 Containers (repository) :2024-09-01, 2024-11-30 Cloud infrastructure templates (repository) :2024-09-15, 2024-12-15 Tribal resilience Data Cube :2024-10-01, 2024-12-31 %%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%% gitGraph commit id: \"Start from template\" branch c1 commit id: \"Set up SSH key pair\" commit id: \"Modify _config.yml for GitHub Pages\" commit id: \"Initial website structure\" commit id: \"Add new markdown pages\" commit id: \"Update navigation tree\" commit id: \"Edit existing pages\" commit id: \"Delete old markdown pages\" commit id: \"Finalize website updates\" commit id: \"Add new markdown pages\" commit id: \"Update navigation tree\" checkout c1 branch b1 commit commit checkout c1 merge b1 %%{init: {\"quadrantChart\": {\"chartWidth\": 400, \"chartHeight\": 400}, \"themeVariables\": {\"quadrant1TextFill\": \"#ff0000\"} }}%% quadrantChart x-axis Urgent --> Not Urgent y-axis Not Important --> \"Important \u2764\" quadrant-1 Plan quadrant-2 Do quadrant-3 Delegate quadrant-4 Delete timeline title Major Events in Environmental Science and Data Science section Environmental Science 19th century : Foundations in Ecology and Conservation 1962 : Publication of 'Silent Spring' by Rachel Carson 1970 : First Earth Day 1987 : Brundtland Report introduces Sustainable Development 1992 : Rio Earth Summit 2015 : Paris Agreement on Climate Change section Data Science 1960s-1970s : Development of Database Management Systems 1980s : Emergence of Data Warehousing 1990s : Growth of the World Wide Web and Data Mining 2000s : Big Data and Predictive Analytics 2010s : AI and Machine Learning Revolution 2020s : Integration of AI in Environmental Research erDiagram CAR ||--o{ NAMED-DRIVER : allows CAR { string registrationNumber string make string model } PERSON ||--o{ NAMED-DRIVER : is PERSON { string firstName string lastName int age } --- config: sankey: showValues: false --- sankey-beta NASA Data,Big Data Harmonization,100 Satellite Imagery,Big Data Harmonization,80 Open Environmental Data,Big Data Harmonization,70 Remote Sensing Data,Big Data Harmonization,90 Big Data Harmonization, Data Analysis and Integration,340 Data Analysis and Integration,Climate Change Research,100 Data Analysis and Integration,Biodiversity Monitoring,80 Data Analysis and Integration,Geospatial Mapping,60 Data Analysis and Integration,Urban Planning,50 Data Analysis and Integration,Disaster Response,50 5. Interactive Elements \u00b6 Hyperlinks : Use the format [link text](URL) . Google Play Tetris Embedding Interactive Content : Use HTML tags or specific platform embed codes. <iframe src=\"https://example.com/interactive-content\" width=\"600\" height=\"400\"></iframe> 6. Math Notation \u00b6 Markdown can be combined with LaTeX for mathematical notation, useful in environmental data science for expressing statistical distributions, coordinate systems, and more. This requires a Markdown renderer with LaTeX support (like MathJax or KaTeX). Inline Math : Use single dollar signs for inline math expressions. Representing the normal distribution. Example: The probability density function of the normal distribution is given by \\(f(x|\\mu,\\sigma) = \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\\) .` Display Math : Use double dollar signs for standalone equations. Example: $$ f(x|\\mu,\\sigma) = \\frac{1}{\\sigma\\sqrt{2\\pi}}e {-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right) 2} $$ Common LaTeX Elements for Environmental Data Science : Statistical Distributions : Normal Distribution: \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2} for \\(\\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\\) Poisson Distribution: P(k; \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!} for \\(P(k; \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!}\\) Coordinate Systems : Spherical Coordinates: (r, \\theta, \\phi) for \\((r, \\theta, \\phi)\\) Cartesian Coordinates: (x, y, z) for \\((x, y, z)\\) Geospatial Equations : Haversine Formula for Distance: a = \\sin^2\\left(\\frac{\\Delta\\phi}{2}\\right) + \\cos(\\phi_1)\\cos(\\phi_2)\\sin^2\\left(\\frac{\\Delta\\lambda}{2}\\right) for \\(a = \\sin^2\\left(\\frac{\\Delta\\phi}{2}\\right) + \\cos(\\phi_1)\\cos(\\phi_2)\\sin^2\\left(\\frac{\\Delta\\lambda}{2}\\right)\\) Note: The rendering of these equations as formatted math will depend on your Markdown viewer's LaTeX capabilities. 7. Effective Citations in Markdown \u00b6 Inline Citations \u00b6 Objective: Learn how to use inline citations in Markdown. Example Usage: Inline citation of a single work: Some text with an inline citation. [ @jones :envstudy:2020] Inline citation with specific page or section: More text with a specific section cited. [See @jones :envstudy:2020, \u00a74.2] Contrasting views: Discussion of a topic with a contrasting view. [Contra @smith :climatechange:2019, p. 78] Footnote Citations \u00b6 Objective: Understand how to use footnote citations in Markdown. Example Usage: Citing with a footnote: Some statement in the text. 1 Multiple references to the same footnote: Another statement referring to the same source. 1 A different citation: Additional comment with a new citation. 2 Creating Footnotes \u00b6 Example Syntax: First reference details. Example: Emma Jones, \"Environmental Study,\" Nature Journal, May 2020, https://nature-journal.com/envstudy2020 . \u21a9 \u21a9 Second reference details. Example: David Smith, \"Climate Change Controversies,\" Science Daily, August 2019, https://sciencedaily.com/climatechange2019 . \u21a9","title":"Markdown for the Modern Researcher at ESIIL"},{"location":"collaborating-on-the-cloud/markdown_basics/#markdown-for-the-modern-researcher-at-esiil","text":"","title":"Markdown for the Modern Researcher at ESIIL"},{"location":"collaborating-on-the-cloud/markdown_basics/#introduction","text":"Overview of Markdown's relevance and utility in modern research. How Markdown streamlines documentation in diverse scientific and coding environments.","title":"Introduction"},{"location":"collaborating-on-the-cloud/markdown_basics/#section-1-mastering-markdown-syntax","text":"Objective: Equip researchers with a thorough understanding of Markdown syntax and its diverse applications. Topics Covered: Fundamentals of Text Formatting (headings, lists, bold, italics) Advanced Structures (tables, blockquotes) Integrating Multimedia (image and video links) Diagrams with Mermaid (creating flowcharts, mind maps, timelines) Interactive Elements (hyperlinks, embedding interactive content) Activities: Crafting a Markdown document with various formatting elements. Developing diagrams using Mermaid for research presentations. Embedding multimedia elements in a Markdown document for enhanced communication.","title":"Section 1: Mastering Markdown Syntax"},{"location":"collaborating-on-the-cloud/markdown_basics/#section-2-markdown-in-research-tools","text":"Objective: Showcase the integration of Markdown in RStudio and Jupyter Notebooks for scientific documentation. Topics Covered: Implementing Markdown in RStudio (R Markdown, knitting to HTML/PDF) Utilizing Markdown in Jupyter Notebooks (code and Markdown cells) Best practices for documenting research code Including code outputs and visualizations in documentation Activities: Creating and sharing an R Markdown document with annotated research data. Building a comprehensive Jupyter Notebook with integrated Markdown annotations.","title":"Section 2: Markdown in Research Tools"},{"location":"collaborating-on-the-cloud/markdown_basics/#section-3-disseminating-research-with-markdown-and-github-pages","text":"Objective: Teach researchers how to publish and manage Markdown-based documentation as web pages. Topics Covered: Setting up a GitHub repository for hosting documentation Transforming Markdown files into web-friendly formats Customizing web page layouts and themes Advanced features using Jekyll Version control and content management for documentation Activities: Publishing a research project documentation on GitHub Pages. Applying custom themes and layouts to enhance online documentation.","title":"Section 3: Disseminating Research with Markdown and GitHub Pages"},{"location":"collaborating-on-the-cloud/markdown_basics/#conclusion","text":"Review of Markdown's role in enhancing research efficiency and clarity. Encouraging the integration of Markdown into daily research activities for improved documentation and dissemination.","title":"Conclusion"},{"location":"collaborating-on-the-cloud/markdown_basics/#additional-resources","text":"Curated list of advanced Markdown tutorials, guides for GitHub Pages, and Jekyll resources for researchers.","title":"Additional Resources"},{"location":"collaborating-on-the-cloud/markdown_basics/#section-1-mastering-markdown-syntax_1","text":"","title":"Section 1: Mastering Markdown Syntax"},{"location":"collaborating-on-the-cloud/markdown_basics/#1-fundamentals-of-text-formatting","text":"Headings : Use # for different levels of headings.","title":"1. Fundamentals of Text Formatting"},{"location":"collaborating-on-the-cloud/markdown_basics/#heading-level-1","text":"","title":"Heading Level 1"},{"location":"collaborating-on-the-cloud/markdown_basics/#heading-level-2","text":"","title":"Heading Level 2"},{"location":"collaborating-on-the-cloud/markdown_basics/#heading-level-3","text":"Lists : Bulleted lists use asterisks, numbers for ordered lists. Item 1 Item 2 Subitem 2.1 Subitem 2.2 First item Second item Bold and Italics : Use asterisks or underscores. Bold Text Italic Text","title":"Heading Level 3"},{"location":"collaborating-on-the-cloud/markdown_basics/#2-advanced-structures","text":"Tables : Create tables using dashes and pipes. Header 1 Header 2 Header 3 Row 1 Data Data Row 2 Data Data Add a \":\"\" to change text justification. Here the : is added on the left for left justification. | Header 1 | Header 2 | Header 3 | |---------:|--------- |----------| | Row 1 | Data | Data | | Row 2 | Data | Data | A N A L Y T I C S E N R E I N V I R O N M E N T V E L O P M O C O M U N E G A G E L L A H C N E R A T A D E V E L O P W E I T S I T N E I C S R S O I G O L O I B H T L A H T L A E W E G N E L T I T S I T N E I C S N I E E S R E H T O E N I C S L L A H C E G L A N E G A L L E H C N E I C If you hit the boundaries of Markdown's capabilities, you can start to add html directly. Remember, this entire exercisse is to translate to html. Sudoku Puzzle Fill in the blank cells with numbers from 1 to 9, such that each row, column, and 3x3 subgrid contains all the numbers from 1 to 9 without repetition. 5 3 7 6 1 9 5 9 8 6 8 6 3 4 8 3 1 7 2 6 6 2 8 4 1 9 5 8 7 9 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 Blockquotes : Use > for blockquotes. This is a blockquote. It can span multiple lines.","title":"2. Advanced Structures"},{"location":"collaborating-on-the-cloud/markdown_basics/#3-integrating-multimedia","text":"Images : Add images using the format ![alt text](image_url) . Videos : Embed videos using HTML in Markdown. <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" frameborder=\"0\" allowfullscreen></iframe>","title":"3. Integrating Multimedia"},{"location":"collaborating-on-the-cloud/markdown_basics/#4-diagrams-with-mermaid","text":"Flowcharts : graph TD A[Start] --> B[Analyze Data] B --> C{Is Data Large?} C -->|Yes| D[Apply Big Data Solutions] C -->|No| E[Use Traditional Methods] D --> F[Machine Learning] E --> G[Statistical Analysis] F --> H{Model Accurate?} G --> I[Report Results] H -->|Yes| J[Deploy Model] H -->|No| K[Refine Model] J --> L[Monitor Performance] K --> F L --> M[End: Success] I --> N[End: Report Generated] style A fill:#f9f,stroke:#333,stroke-width:2px style M fill:#9f9,stroke:#333,stroke-width:2px style N fill:#9f9,stroke:#333,stroke-width:2px Mind Maps : mindmap root((ESIIL)) section Data Sources Satellite Imagery ::icon(fa fa-satellite) Remote Sensing Data Drones Aircraft On-ground Sensors Weather Stations IoT Devices Open Environmental Data Public Datasets ::icon(fa fa-database) section Research Focus Climate Change Analysis Ice Melt Patterns Sea Level Rise Biodiversity Monitoring Species Distribution Habitat Fragmentation Geospatial Analysis Techniques Machine Learning Models Predictive Analytics section Applications Conservation Strategies ::icon(fa fa-leaf) Urban Planning Green Spaces Disaster Response Flood Mapping Wildfire Tracking section Tools and Technologies GIS Software QGIS ArcGIS Programming Languages Python R Cloud Computing Platforms AWS Google Earth Engine Data Visualization D3.js Tableau Timelines : gantt title ESIIL Year 2 Project Schedule dateFormat YYYY-MM-DD section CI Sovereign OASIS via private jupiterhubs :2024-08-01, 2024-10-30 OASIS documentation :2024-09-15, 70d Data cube OASIS via cyverse account :2024-09-15, 100d Integrate with ESIIL User Management system :2024-08-01, 2024-11-30 Build badges to deploy DE from mkdoc :2024-09-01, 2024-12-15 Streamline Github ssh key management :2024-10-01, 2024-12-31 Cyverse support (R proxy link) :2024-11-01, 2024-12-31 Cyverse use summary and statistics :2024-08-01, 2024-12-15 section CI Consultation and Education Conferences/Invited talks :2024-08-01, 2024-12-31 Office hours :2024-08-15, 2024-12-15 Proposals :2024-09-01, 2024-11-15 Private lessons :2024-09-15, 2024-11-30 Pre-event trainings :2024-10-01, 2024-12-15 Textbook development w/ education team :2024-08-01, 2024-12-15 Train the trainers / group lessons :2024-08-15, 2024-11-30 Tribal engagement :2024-09-01, 2024-12-15 Ethical Space training :2024-09-15, 2024-12-31 section CI Design and Build Data library (repository) :2024-08-01, 2024-10-30 Analytics library (repository) :2024-08-15, 2024-11-15 Containers (repository) :2024-09-01, 2024-11-30 Cloud infrastructure templates (repository) :2024-09-15, 2024-12-15 Tribal resilience Data Cube :2024-10-01, 2024-12-31 %%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%% gitGraph commit id: \"Start from template\" branch c1 commit id: \"Set up SSH key pair\" commit id: \"Modify _config.yml for GitHub Pages\" commit id: \"Initial website structure\" commit id: \"Add new markdown pages\" commit id: \"Update navigation tree\" commit id: \"Edit existing pages\" commit id: \"Delete old markdown pages\" commit id: \"Finalize website updates\" commit id: \"Add new markdown pages\" commit id: \"Update navigation tree\" checkout c1 branch b1 commit commit checkout c1 merge b1 %%{init: {\"quadrantChart\": {\"chartWidth\": 400, \"chartHeight\": 400}, \"themeVariables\": {\"quadrant1TextFill\": \"#ff0000\"} }}%% quadrantChart x-axis Urgent --> Not Urgent y-axis Not Important --> \"Important \u2764\" quadrant-1 Plan quadrant-2 Do quadrant-3 Delegate quadrant-4 Delete timeline title Major Events in Environmental Science and Data Science section Environmental Science 19th century : Foundations in Ecology and Conservation 1962 : Publication of 'Silent Spring' by Rachel Carson 1970 : First Earth Day 1987 : Brundtland Report introduces Sustainable Development 1992 : Rio Earth Summit 2015 : Paris Agreement on Climate Change section Data Science 1960s-1970s : Development of Database Management Systems 1980s : Emergence of Data Warehousing 1990s : Growth of the World Wide Web and Data Mining 2000s : Big Data and Predictive Analytics 2010s : AI and Machine Learning Revolution 2020s : Integration of AI in Environmental Research erDiagram CAR ||--o{ NAMED-DRIVER : allows CAR { string registrationNumber string make string model } PERSON ||--o{ NAMED-DRIVER : is PERSON { string firstName string lastName int age } --- config: sankey: showValues: false --- sankey-beta NASA Data,Big Data Harmonization,100 Satellite Imagery,Big Data Harmonization,80 Open Environmental Data,Big Data Harmonization,70 Remote Sensing Data,Big Data Harmonization,90 Big Data Harmonization, Data Analysis and Integration,340 Data Analysis and Integration,Climate Change Research,100 Data Analysis and Integration,Biodiversity Monitoring,80 Data Analysis and Integration,Geospatial Mapping,60 Data Analysis and Integration,Urban Planning,50 Data Analysis and Integration,Disaster Response,50","title":"4. Diagrams with Mermaid"},{"location":"collaborating-on-the-cloud/markdown_basics/#5-interactive-elements","text":"Hyperlinks : Use the format [link text](URL) . Google Play Tetris Embedding Interactive Content : Use HTML tags or specific platform embed codes. <iframe src=\"https://example.com/interactive-content\" width=\"600\" height=\"400\"></iframe>","title":"5. Interactive Elements"},{"location":"collaborating-on-the-cloud/markdown_basics/#6-math-notation","text":"Markdown can be combined with LaTeX for mathematical notation, useful in environmental data science for expressing statistical distributions, coordinate systems, and more. This requires a Markdown renderer with LaTeX support (like MathJax or KaTeX). Inline Math : Use single dollar signs for inline math expressions. Representing the normal distribution. Example: The probability density function of the normal distribution is given by \\(f(x|\\mu,\\sigma) = \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\\) .` Display Math : Use double dollar signs for standalone equations. Example: $$ f(x|\\mu,\\sigma) = \\frac{1}{\\sigma\\sqrt{2\\pi}}e {-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right) 2} $$ Common LaTeX Elements for Environmental Data Science : Statistical Distributions : Normal Distribution: \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2} for \\(\\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\\) Poisson Distribution: P(k; \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!} for \\(P(k; \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!}\\) Coordinate Systems : Spherical Coordinates: (r, \\theta, \\phi) for \\((r, \\theta, \\phi)\\) Cartesian Coordinates: (x, y, z) for \\((x, y, z)\\) Geospatial Equations : Haversine Formula for Distance: a = \\sin^2\\left(\\frac{\\Delta\\phi}{2}\\right) + \\cos(\\phi_1)\\cos(\\phi_2)\\sin^2\\left(\\frac{\\Delta\\lambda}{2}\\right) for \\(a = \\sin^2\\left(\\frac{\\Delta\\phi}{2}\\right) + \\cos(\\phi_1)\\cos(\\phi_2)\\sin^2\\left(\\frac{\\Delta\\lambda}{2}\\right)\\) Note: The rendering of these equations as formatted math will depend on your Markdown viewer's LaTeX capabilities.","title":"6. Math Notation"},{"location":"collaborating-on-the-cloud/markdown_basics/#7-effective-citations-in-markdown","text":"","title":"7. Effective Citations in Markdown"},{"location":"collaborating-on-the-cloud/markdown_basics/#inline-citations","text":"Objective: Learn how to use inline citations in Markdown. Example Usage: Inline citation of a single work: Some text with an inline citation. [ @jones :envstudy:2020] Inline citation with specific page or section: More text with a specific section cited. [See @jones :envstudy:2020, \u00a74.2] Contrasting views: Discussion of a topic with a contrasting view. [Contra @smith :climatechange:2019, p. 78]","title":"Inline Citations"},{"location":"collaborating-on-the-cloud/markdown_basics/#footnote-citations","text":"Objective: Understand how to use footnote citations in Markdown. Example Usage: Citing with a footnote: Some statement in the text. 1 Multiple references to the same footnote: Another statement referring to the same source. 1 A different citation: Additional comment with a new citation. 2","title":"Footnote Citations"},{"location":"collaborating-on-the-cloud/markdown_basics/#creating-footnotes","text":"Example Syntax: First reference details. Example: Emma Jones, \"Environmental Study,\" Nature Journal, May 2020, https://nature-journal.com/envstudy2020 . \u21a9 \u21a9 Second reference details. Example: David Smith, \"Climate Change Controversies,\" Science Daily, August 2019, https://sciencedaily.com/climatechange2019 . \u21a9","title":"Creating Footnotes"},{"location":"data-library/Pull_Sentinal2_l2_data/","text":"Pulling Sentinal 2 data \u00b6 Ty Tuff, ESIIL Data Scientist 2023-10-27 Set Java Options \u00b6 # Run these Java options before anything else. options ( java.parameters = \"-Xmx64G\" ) options ( timeout = max ( 600 , getOption ( \"timeout\" ))) R libraries and global setting. \u00b6 #library(Rcpp) library ( sf ) library ( gdalcubes ) library ( rstac ) library ( gdalUtils ) library ( terra ) library ( rgdal ) library ( reshape2 ) library ( osmdata ) library ( terra ) library ( dplyr ) #library(glue) library ( stars ) library ( ggplot2 ) library ( colorspace ) library ( geos ) #library(glue) library ( osmdata ) library ( ggthemes ) library ( tidyr ) gdalcubes_options ( parallel = 8 ) sf :: sf_extSoftVersion () GEOS GDAL proj.4 GDAL_with_GEOS USE_PROJ_H \"3.11.0\" \"3.5.3\" \"9.1.0\" \"true\" \"true\" PROJ \"9.1.0\" gdalcubes_gdal_has_geos () [1] TRUE Start timer \u00b6 start <- Sys.time () Set color palette \u00b6 library ( ggtern ) our_yellow <- rgb2hex ( r = 253 , g = 201 , b = 51 ) our_green <- rgb2hex ( r = 10 , g = 84 , b = 62 ) our_grey <- rgb2hex ( r = 92 , g = 96 , b = 95 ) our_white <- rgb2hex ( r = 255 , g = 255 , b = 255 ) Load area of interest \u00b6 # Read the shapefile into an sf object aoi_total <- st_read ( \"/Users/ty/Documents/Github/Southern_California_Edison_Fire_Risk/SCE_Fire_Zone_V2/SCE_Fire_Zone_V2.shp\" ) %>% st_as_sf () Reading layer `SCE_Fire_Zone_V2' from data source `/Users/ty/Documents/Github/Southern_California_Edison_Fire_Risk/SCE_Fire_Zone_V2/SCE_Fire_Zone_V2.shp' using driver `ESRI Shapefile' Simple feature collection with 12 features and 5 fields Geometry type: POLYGON Dimension: XY Bounding box: xmin: 176062.4 ymin: 3674043 xmax: 764123.1 ymax: 4254012 Projected CRS: NAD83 / UTM zone 11N # Plot the entire spatial dataset plot ( aoi_total ) # Filter the dataset to obtain the geometry with OBJECTID 5 aoi <- aoi_total %>% filter ( OBJECTID == 5 ) # Obtain and plot the bounding box of the filtered geometry shape_bbox <- st_bbox ( aoi ) plot ( aoi ) # Transform the filtered geometry to EPSG:4326 and store its bounding box aoi %>% st_transform ( \"EPSG:4326\" ) %>% st_bbox () -> bbox_4326 # Transform the filtered geometry to EPSG:32618 and store its bounding box aoi %>% st_transform ( \"EPSG:32618\" ) %>% st_bbox () -> bbox_32618 Arrange STAC collection \u00b6 In this code chunk, the primary goal is to search for and obtain satellite imagery data. The data source being tapped into is a SpatioTemporal Asset Catalog (STAC) provided by an online service (earth-search by Element84). Here\u2019s a breakdown: A connection is established with the STAC service, searching specifically within the \u201csentinel-s2-l2a-cogs\u201d collection. -The search is spatially constrained to a bounding box (bbox_4326) and temporally limited to a range of one day, between May 15 and May 16, 2021. -Once the search is conducted, the desired assets or spectral bands from the returned satellite images are defined, ranging from Band 1 (B01) to Band 12 (B12) and including the Scene Classification Layer (SCL). -These bands are then organized into an image collection for further processing or analysis. # Initialize STAC connection s = stac ( \"https://earth-search.aws.element84.com/v0\" ) # Search for Sentinel-2 images within specified bounding box and date range items = s %>% stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( bbox_4326 [ \"xmin\" ], bbox_4326 [ \"ymin\" ], bbox_4326 [ \"xmax\" ], bbox_4326 [ \"ymax\" ]), datetime = \"2021-05-15/2021-05-16\" ) %>% post_request () %>% items_fetch ( progress = FALSE ) # Print number of found items length ( items $ features ) [1] 12 # Prepare the assets for analysis library ( gdalcubes ) assets = c ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"B08\" , \"B8A\" , \"B09\" , \"B11\" , \"B12\" , \"SCL\" ) s2_collection = stac_image_collection ( items $ features , asset_names = assets ) # Display the image collection s2_collection Image collection object, referencing 12 images with 13 bands Images: name left top bottom right 1 S2B_11SNS_20210515_1_L2A -117.0002 33.43957 32.44372 -115.8191 2 S2B_11SPS_20210515_1_L2A -115.9361 33.43490 32.42937 -114.7436 3 S2B_11SQS_20210515_0_L2A -114.8732 33.42092 32.41918 -113.9566 4 S2B_12STB_20210515_0_L2A -114.2244 33.40433 32.61015 -113.9559 5 S2B_11SNT_20210515_0_L2A -117.0002 34.34164 33.34577 -115.8066 6 S2B_11SPT_20210515_0_L2A -115.9253 34.33683 33.33091 -114.7198 datetime srs 1 2021-05-15T18:35:13 EPSG:32611 2 2021-05-15T18:35:10 EPSG:32611 3 2021-05-15T18:35:06 EPSG:32611 4 2021-05-15T18:35:01 EPSG:32612 5 2021-05-15T18:34:59 EPSG:32611 6 2021-05-15T18:34:55 EPSG:32611 [ omitted 6 images ] Bands: name offset scale unit nodata image_count 1 B01 0 1 12 2 B02 0 1 12 3 B03 0 1 12 4 B04 0 1 12 5 B05 0 1 12 6 B06 0 1 12 7 B07 0 1 12 8 B08 0 1 12 9 B09 0 1 12 10 B11 0 1 12 11 B12 0 1 12 12 B8A 0 1 12 13 SCL 0 1 12 Define view window \u00b6 In this code chunk, a \u2018view\u2019 on the previously obtained satellite image collection is being defined. Think of this as setting up a specific lens or perspective to look at the satellite data: -The view is set to the coordinate reference system EPSG:32618. -Spatial resolution is defined as 100x100 meters. -Temporal resolution is defined monthly (P1M), even though the actual range is only one day. -When there are multiple values in a grid cell or timeframe, they are aggregated using the median value. -If any resampling is needed, the nearest neighbor method is used (near). -The spatial and temporal extents are constrained to specific values. -By defining this view, it allows for consistent analysis and visualization of the image collection within the specified spatial and temporal resolutions and extents. # Define a specific view on the satellite image collection v = cube_view ( srs = \"EPSG:32618\" , dx = 100 , dy = 100 , dt = \"P1M\" , aggregation = \"median\" , resampling = \"near\" , extent = list ( t0 = \"2021-05-15\" , t1 = \"2021-05-16\" , left = bbox_32618 [ \"xmin\" ], right = bbox_32618 [ \"xmax\" ], top = bbox_32618 [ \"ymax\" ], bottom = bbox_32618 [ \"ymin\" ] ) ) # Display the defined view v A data cube view object Dimensions: low high count pixel_size t 2021-05-01 2021-05-31 1 P1M y 4471226.41402451 4741326.41402451 2701 100 x -3463720.00044994 -3191420.00044994 2723 100 SRS: \"EPSG:32618\" Temporal aggregation method: \"median\" Spatial resampling method: \"near\" Pull data \u00b6 In this chunk, the primary aim is to transform and prepare satellite imagery data for analysis: -The current time is stored in variable a for tracking the time taken by the process. -The previously defined \u2018view\u2019 on the satellite imagery, v, is used to create a raster cube, a multi-dimensional array containing the satellite data. This raster cube contains spatial, spectral, and temporal data. -The desired spectral bands are selected. -The data is limited to a specific area of interest, aoi. -The band names are renamed to their respective wavelengths in nanometers for clarity. -A subset of the data, comprising 50,000 random samples, is selected. -Unwanted columns are removed, and the dataset is transformed into a long format, where each row represents a particular date and wavelength combination. -The entire process duration is computed by taking the difference between the end time (b) and the start time (a). -The transformed dataset y is then displayed. # Record start time a <- Sys.time () # Transform the satellite image collection into a raster cube x <- s2_collection %>% raster_cube ( v ) %>% select_bands ( c ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"B08\" , \"B8A\" , \"B09\" , \"B11\" , \"B12\" )) %>% extract_geom ( aoi ) %>% rename ( \"time\" = \"time\" , \"443\" = \"B01\" , \"490\" = \"B02\" , \"560\" = \"B03\" , \"665\" = \"B04\" , \"705\" = \"B05\" , \"740\" = \"B06\" , \"783\" = \"B07\" , \"842\" = \"B08\" , \"865\" = \"B8A\" , \"940\" = \"B09\" , \"1610\" = \"B11\" , \"2190\" = \"B12\" ) # Sample, transform and prepare data for analysis y <- x %>% slice_sample ( n = 50000 ) %>% select ( - FID ) %>% pivot_longer ( ! time , names_to = \"wavelength_nm\" , values_to = \"reflectance\" ) %>% mutate ( wavelength_nm = as.numeric ( wavelength_nm )) # Record end time and compute duration b <- Sys.time () processing_time <- difftime ( b , a ) # Display the processing time and transformed dataset processing_time Time difference of 1.23593 mins y # A tibble: 600,000 \u00d7 3 time wavelength_nm reflectance <chr> <dbl> <dbl> 1 2021-05-01 443 1855 2 2021-05-01 490 2255 3 2021-05-01 560 2884 4 2021-05-01 665 3711 5 2021-05-01 705 3990 6 2021-05-01 740 4009 7 2021-05-01 783 4078 8 2021-05-01 842 4219 9 2021-05-01 865 4060 10 2021-05-01 940 4120 # \u2139 599,990 more rows Base plot \u00b6 # Set custom colors for the plot our_green <- \"#4CAF50\" our_white <- \"#FFFFFF\" our_yellow <- \"#FFEB3B\" # Create a 2D density plot day_density <- ggplot ( data = y , aes ( x = wavelength_nm , y = reflectance , group = time )) + stat_smooth ( color = our_green , fill = \"lightgrey\" ) + geom_density2d ( colour = \"black\" , bins = 10 , alpha = 0.1 ) + stat_density2d ( aes ( alpha = ..level.. , fill = ..level.. ), linewidth = 2 , bins = 10 , geom = \"polygon\" ) + scale_fill_gradient ( low = our_white , high = our_yellow ) + scale_alpha ( range = c ( 0.00 , 0.8 ), guide = FALSE ) + theme_tufte () + xlab ( \"wavelength\" ) + ylab ( \"reflectance\" ) + ylim ( 0 , 16000 ) + theme ( aspect.ratio = 5 / 14 , axis.text.x = element_text ( angle = 90 , vjust = 0.5 , hjust = 1 , colour = c ( \"darkblue\" , \"blue\" , \"green\" , \"red\" , \"darkred\" , \"darkred\" , \"darkred\" , \"darkred\" , \"darkred\" , \"black\" , \"black\" , \"black\" , \"black\" )), axis.title.x = element_blank (), axis.title.y = element_blank (), plot.margin = margin ( t = 30 , r = 10 , b = 40 , l = 18 ) ) + scale_x_continuous ( breaks = c ( 443 , 490 , 560 , 665 , 705 , 740 , 783 , 842 , 865 , 940 , 1610 , 2190 )) # Display the plot day_density Inlay 1 - geographic zone \u00b6 guide_map <- ggplot ( data = aoi_total ) + geom_sf ( fill = our_yellow , color = our_white ) + geom_sf ( data = aoi , fill = our_green , color = our_white ) + theme_tufte () + ggtitle ( \"Zone 5\" ) + theme ( axis.text.x = element_blank (), #remove x axis labels axis.ticks.x = element_blank (), #remove x axis ticks axis.text.y = element_blank (), #remove y axis labels axis.ticks.y = element_blank () #remove y axis ticks, bg=none ) + theme ( plot.title = element_text ( hjust = 0.8 , vjust = -2 )) guide_map Inlay 2 - date text \u00b6 library ( geosphere ) aoi_total |> st_centroid () |> st_transform ( crs = \"+proj=longlat\" ) |> st_coordinates () |> colMeans () -> lat_long daylength_line <- daylength ( lat = lat_long [ 2 ], 1 : 365 ) daylengths <- data.frame ( time = 1 : 365 , daylength = daylength_line ) library ( lubridate ) # Create a template date object date <- as.POSIXlt ( \"2021-05-15\" ) doy <- format ( date , format = \"%j\" ) |> as.numeric () display_date <- format ( date , format = \"%e %B %Y \" ) Inlay 3 - daylength \u00b6 date_inlay <- ggplot ( data = daylengths ) + ggtitle ( \"Daylength\" ) + geom_ribbon ( aes ( x = time , ymin = daylength , ymax = 15 ), fill = our_grey , alpha = 0.5 ) + geom_ribbon ( aes ( x = time , ymax = daylength , ymin = 9 ), fill = our_yellow , alpha = 1 ) + geom_hline ( yintercept = 12 , color = our_white ) + geom_vline ( xintercept = doy , color = our_green , size = 1 ) + theme_tufte () + ylim ( 9 , 15 ) + theme ( axis.text.y = element_blank (), axis.ticks.y = element_blank (), axis.title.y = element_blank (), axis.title.x = element_blank (), axis.text.x = element_blank (), axis.ticks.x = element_blank ()) + theme ( plot.title = element_text ( hjust = 0.5 , vjust = 0 )) date_inlay Ensemble map assembly \u00b6 library ( cowplot ) library ( magick ) map_overlay <- ggdraw ( day_density ) + draw_plot ( guide_map , x = 1.08 , y = 1 , hjust = 1 , vjust = 1 , width = 0.3 , height = 0.3 ) + draw_plot ( date_inlay , x = 1 , y = 0.35 , hjust = 1 , vjust = 1 , width = 0.1 , height = 0.25 ) + geom_text ( aes ( x = 1 , y = 0.08 , label = display_date , hjust = 1 ), color = our_grey , cex = 3 , fontface = 'bold' ) + # draw_image(\"Ty_powerline_plots/Southern_California_Edison_Logo.png\", x = -0.24, y = 0.38, scale=.3)+ # draw_image(\"Ty_powerline_plots/earthlab_logo.png\", x = -0.38, y = 0.38, scale=.25)+ geom_text ( aes ( x = 0.4 , y = . 9 , label = \"Spectral library - Monthly average\" ), color = our_green , hjust = 0 , cex = 8 , fontface = 'bold' ) + geom_text ( aes ( x = 0.01 , y = . 04 , label = \"Created by ESIIL (T. Tuff) for Fall Hackathon -- October 2023. Sentinel 2 Data from 'https://earth-search.aws.element84.com/v0'\" ), color = our_grey , hjust = 0 , cex = 3 ) + geom_text ( aes ( x = 0.4 , y = . 1 , label = \"wavelength (nm)\" ), color = our_grey , hjust = 0 , cex = 4 , fontface = 'bold' ) + geom_text ( aes ( x = 0.01 , y = . 5 , angle = 90 , label = \"reflectance\" ), color = our_grey , hjust = 0 , cex = 4 , fontface = 'bold' ) map_overlay Save map \u00b6 ggsave ( map_overlay , file = \"day_density_15_May_2021_zone_5.png\" , bg = \"white\" , dpi = 600 , width = 12 , height = 5 ) End timer \u00b6 end <- Sys.time () difftime ( end , start ) Time difference of 3.2202 mins","title":"Pulling Sentinal 2 data"},{"location":"data-library/Pull_Sentinal2_l2_data/#pulling-sentinal-2-data","text":"Ty Tuff, ESIIL Data Scientist 2023-10-27","title":"Pulling Sentinal 2 data"},{"location":"data-library/Pull_Sentinal2_l2_data/#set-java-options","text":"# Run these Java options before anything else. options ( java.parameters = \"-Xmx64G\" ) options ( timeout = max ( 600 , getOption ( \"timeout\" )))","title":"Set Java Options"},{"location":"data-library/Pull_Sentinal2_l2_data/#r-libraries-and-global-setting","text":"#library(Rcpp) library ( sf ) library ( gdalcubes ) library ( rstac ) library ( gdalUtils ) library ( terra ) library ( rgdal ) library ( reshape2 ) library ( osmdata ) library ( terra ) library ( dplyr ) #library(glue) library ( stars ) library ( ggplot2 ) library ( colorspace ) library ( geos ) #library(glue) library ( osmdata ) library ( ggthemes ) library ( tidyr ) gdalcubes_options ( parallel = 8 ) sf :: sf_extSoftVersion () GEOS GDAL proj.4 GDAL_with_GEOS USE_PROJ_H \"3.11.0\" \"3.5.3\" \"9.1.0\" \"true\" \"true\" PROJ \"9.1.0\" gdalcubes_gdal_has_geos () [1] TRUE","title":"R libraries and global setting."},{"location":"data-library/Pull_Sentinal2_l2_data/#start-timer","text":"start <- Sys.time ()","title":"Start timer"},{"location":"data-library/Pull_Sentinal2_l2_data/#set-color-palette","text":"library ( ggtern ) our_yellow <- rgb2hex ( r = 253 , g = 201 , b = 51 ) our_green <- rgb2hex ( r = 10 , g = 84 , b = 62 ) our_grey <- rgb2hex ( r = 92 , g = 96 , b = 95 ) our_white <- rgb2hex ( r = 255 , g = 255 , b = 255 )","title":"Set color palette"},{"location":"data-library/Pull_Sentinal2_l2_data/#load-area-of-interest","text":"# Read the shapefile into an sf object aoi_total <- st_read ( \"/Users/ty/Documents/Github/Southern_California_Edison_Fire_Risk/SCE_Fire_Zone_V2/SCE_Fire_Zone_V2.shp\" ) %>% st_as_sf () Reading layer `SCE_Fire_Zone_V2' from data source `/Users/ty/Documents/Github/Southern_California_Edison_Fire_Risk/SCE_Fire_Zone_V2/SCE_Fire_Zone_V2.shp' using driver `ESRI Shapefile' Simple feature collection with 12 features and 5 fields Geometry type: POLYGON Dimension: XY Bounding box: xmin: 176062.4 ymin: 3674043 xmax: 764123.1 ymax: 4254012 Projected CRS: NAD83 / UTM zone 11N # Plot the entire spatial dataset plot ( aoi_total ) # Filter the dataset to obtain the geometry with OBJECTID 5 aoi <- aoi_total %>% filter ( OBJECTID == 5 ) # Obtain and plot the bounding box of the filtered geometry shape_bbox <- st_bbox ( aoi ) plot ( aoi ) # Transform the filtered geometry to EPSG:4326 and store its bounding box aoi %>% st_transform ( \"EPSG:4326\" ) %>% st_bbox () -> bbox_4326 # Transform the filtered geometry to EPSG:32618 and store its bounding box aoi %>% st_transform ( \"EPSG:32618\" ) %>% st_bbox () -> bbox_32618","title":"Load area of interest"},{"location":"data-library/Pull_Sentinal2_l2_data/#arrange-stac-collection","text":"In this code chunk, the primary goal is to search for and obtain satellite imagery data. The data source being tapped into is a SpatioTemporal Asset Catalog (STAC) provided by an online service (earth-search by Element84). Here\u2019s a breakdown: A connection is established with the STAC service, searching specifically within the \u201csentinel-s2-l2a-cogs\u201d collection. -The search is spatially constrained to a bounding box (bbox_4326) and temporally limited to a range of one day, between May 15 and May 16, 2021. -Once the search is conducted, the desired assets or spectral bands from the returned satellite images are defined, ranging from Band 1 (B01) to Band 12 (B12) and including the Scene Classification Layer (SCL). -These bands are then organized into an image collection for further processing or analysis. # Initialize STAC connection s = stac ( \"https://earth-search.aws.element84.com/v0\" ) # Search for Sentinel-2 images within specified bounding box and date range items = s %>% stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( bbox_4326 [ \"xmin\" ], bbox_4326 [ \"ymin\" ], bbox_4326 [ \"xmax\" ], bbox_4326 [ \"ymax\" ]), datetime = \"2021-05-15/2021-05-16\" ) %>% post_request () %>% items_fetch ( progress = FALSE ) # Print number of found items length ( items $ features ) [1] 12 # Prepare the assets for analysis library ( gdalcubes ) assets = c ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"B08\" , \"B8A\" , \"B09\" , \"B11\" , \"B12\" , \"SCL\" ) s2_collection = stac_image_collection ( items $ features , asset_names = assets ) # Display the image collection s2_collection Image collection object, referencing 12 images with 13 bands Images: name left top bottom right 1 S2B_11SNS_20210515_1_L2A -117.0002 33.43957 32.44372 -115.8191 2 S2B_11SPS_20210515_1_L2A -115.9361 33.43490 32.42937 -114.7436 3 S2B_11SQS_20210515_0_L2A -114.8732 33.42092 32.41918 -113.9566 4 S2B_12STB_20210515_0_L2A -114.2244 33.40433 32.61015 -113.9559 5 S2B_11SNT_20210515_0_L2A -117.0002 34.34164 33.34577 -115.8066 6 S2B_11SPT_20210515_0_L2A -115.9253 34.33683 33.33091 -114.7198 datetime srs 1 2021-05-15T18:35:13 EPSG:32611 2 2021-05-15T18:35:10 EPSG:32611 3 2021-05-15T18:35:06 EPSG:32611 4 2021-05-15T18:35:01 EPSG:32612 5 2021-05-15T18:34:59 EPSG:32611 6 2021-05-15T18:34:55 EPSG:32611 [ omitted 6 images ] Bands: name offset scale unit nodata image_count 1 B01 0 1 12 2 B02 0 1 12 3 B03 0 1 12 4 B04 0 1 12 5 B05 0 1 12 6 B06 0 1 12 7 B07 0 1 12 8 B08 0 1 12 9 B09 0 1 12 10 B11 0 1 12 11 B12 0 1 12 12 B8A 0 1 12 13 SCL 0 1 12","title":"Arrange STAC collection"},{"location":"data-library/Pull_Sentinal2_l2_data/#define-view-window","text":"In this code chunk, a \u2018view\u2019 on the previously obtained satellite image collection is being defined. Think of this as setting up a specific lens or perspective to look at the satellite data: -The view is set to the coordinate reference system EPSG:32618. -Spatial resolution is defined as 100x100 meters. -Temporal resolution is defined monthly (P1M), even though the actual range is only one day. -When there are multiple values in a grid cell or timeframe, they are aggregated using the median value. -If any resampling is needed, the nearest neighbor method is used (near). -The spatial and temporal extents are constrained to specific values. -By defining this view, it allows for consistent analysis and visualization of the image collection within the specified spatial and temporal resolutions and extents. # Define a specific view on the satellite image collection v = cube_view ( srs = \"EPSG:32618\" , dx = 100 , dy = 100 , dt = \"P1M\" , aggregation = \"median\" , resampling = \"near\" , extent = list ( t0 = \"2021-05-15\" , t1 = \"2021-05-16\" , left = bbox_32618 [ \"xmin\" ], right = bbox_32618 [ \"xmax\" ], top = bbox_32618 [ \"ymax\" ], bottom = bbox_32618 [ \"ymin\" ] ) ) # Display the defined view v A data cube view object Dimensions: low high count pixel_size t 2021-05-01 2021-05-31 1 P1M y 4471226.41402451 4741326.41402451 2701 100 x -3463720.00044994 -3191420.00044994 2723 100 SRS: \"EPSG:32618\" Temporal aggregation method: \"median\" Spatial resampling method: \"near\"","title":"Define view window"},{"location":"data-library/Pull_Sentinal2_l2_data/#pull-data","text":"In this chunk, the primary aim is to transform and prepare satellite imagery data for analysis: -The current time is stored in variable a for tracking the time taken by the process. -The previously defined \u2018view\u2019 on the satellite imagery, v, is used to create a raster cube, a multi-dimensional array containing the satellite data. This raster cube contains spatial, spectral, and temporal data. -The desired spectral bands are selected. -The data is limited to a specific area of interest, aoi. -The band names are renamed to their respective wavelengths in nanometers for clarity. -A subset of the data, comprising 50,000 random samples, is selected. -Unwanted columns are removed, and the dataset is transformed into a long format, where each row represents a particular date and wavelength combination. -The entire process duration is computed by taking the difference between the end time (b) and the start time (a). -The transformed dataset y is then displayed. # Record start time a <- Sys.time () # Transform the satellite image collection into a raster cube x <- s2_collection %>% raster_cube ( v ) %>% select_bands ( c ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"B08\" , \"B8A\" , \"B09\" , \"B11\" , \"B12\" )) %>% extract_geom ( aoi ) %>% rename ( \"time\" = \"time\" , \"443\" = \"B01\" , \"490\" = \"B02\" , \"560\" = \"B03\" , \"665\" = \"B04\" , \"705\" = \"B05\" , \"740\" = \"B06\" , \"783\" = \"B07\" , \"842\" = \"B08\" , \"865\" = \"B8A\" , \"940\" = \"B09\" , \"1610\" = \"B11\" , \"2190\" = \"B12\" ) # Sample, transform and prepare data for analysis y <- x %>% slice_sample ( n = 50000 ) %>% select ( - FID ) %>% pivot_longer ( ! time , names_to = \"wavelength_nm\" , values_to = \"reflectance\" ) %>% mutate ( wavelength_nm = as.numeric ( wavelength_nm )) # Record end time and compute duration b <- Sys.time () processing_time <- difftime ( b , a ) # Display the processing time and transformed dataset processing_time Time difference of 1.23593 mins y # A tibble: 600,000 \u00d7 3 time wavelength_nm reflectance <chr> <dbl> <dbl> 1 2021-05-01 443 1855 2 2021-05-01 490 2255 3 2021-05-01 560 2884 4 2021-05-01 665 3711 5 2021-05-01 705 3990 6 2021-05-01 740 4009 7 2021-05-01 783 4078 8 2021-05-01 842 4219 9 2021-05-01 865 4060 10 2021-05-01 940 4120 # \u2139 599,990 more rows","title":"Pull data"},{"location":"data-library/Pull_Sentinal2_l2_data/#base-plot","text":"# Set custom colors for the plot our_green <- \"#4CAF50\" our_white <- \"#FFFFFF\" our_yellow <- \"#FFEB3B\" # Create a 2D density plot day_density <- ggplot ( data = y , aes ( x = wavelength_nm , y = reflectance , group = time )) + stat_smooth ( color = our_green , fill = \"lightgrey\" ) + geom_density2d ( colour = \"black\" , bins = 10 , alpha = 0.1 ) + stat_density2d ( aes ( alpha = ..level.. , fill = ..level.. ), linewidth = 2 , bins = 10 , geom = \"polygon\" ) + scale_fill_gradient ( low = our_white , high = our_yellow ) + scale_alpha ( range = c ( 0.00 , 0.8 ), guide = FALSE ) + theme_tufte () + xlab ( \"wavelength\" ) + ylab ( \"reflectance\" ) + ylim ( 0 , 16000 ) + theme ( aspect.ratio = 5 / 14 , axis.text.x = element_text ( angle = 90 , vjust = 0.5 , hjust = 1 , colour = c ( \"darkblue\" , \"blue\" , \"green\" , \"red\" , \"darkred\" , \"darkred\" , \"darkred\" , \"darkred\" , \"darkred\" , \"black\" , \"black\" , \"black\" , \"black\" )), axis.title.x = element_blank (), axis.title.y = element_blank (), plot.margin = margin ( t = 30 , r = 10 , b = 40 , l = 18 ) ) + scale_x_continuous ( breaks = c ( 443 , 490 , 560 , 665 , 705 , 740 , 783 , 842 , 865 , 940 , 1610 , 2190 )) # Display the plot day_density","title":"Base plot"},{"location":"data-library/Pull_Sentinal2_l2_data/#inlay-1-geographic-zone","text":"guide_map <- ggplot ( data = aoi_total ) + geom_sf ( fill = our_yellow , color = our_white ) + geom_sf ( data = aoi , fill = our_green , color = our_white ) + theme_tufte () + ggtitle ( \"Zone 5\" ) + theme ( axis.text.x = element_blank (), #remove x axis labels axis.ticks.x = element_blank (), #remove x axis ticks axis.text.y = element_blank (), #remove y axis labels axis.ticks.y = element_blank () #remove y axis ticks, bg=none ) + theme ( plot.title = element_text ( hjust = 0.8 , vjust = -2 )) guide_map","title":"Inlay 1 - geographic zone"},{"location":"data-library/Pull_Sentinal2_l2_data/#inlay-2-date-text","text":"library ( geosphere ) aoi_total |> st_centroid () |> st_transform ( crs = \"+proj=longlat\" ) |> st_coordinates () |> colMeans () -> lat_long daylength_line <- daylength ( lat = lat_long [ 2 ], 1 : 365 ) daylengths <- data.frame ( time = 1 : 365 , daylength = daylength_line ) library ( lubridate ) # Create a template date object date <- as.POSIXlt ( \"2021-05-15\" ) doy <- format ( date , format = \"%j\" ) |> as.numeric () display_date <- format ( date , format = \"%e %B %Y \" )","title":"Inlay 2 - date text"},{"location":"data-library/Pull_Sentinal2_l2_data/#inlay-3-daylength","text":"date_inlay <- ggplot ( data = daylengths ) + ggtitle ( \"Daylength\" ) + geom_ribbon ( aes ( x = time , ymin = daylength , ymax = 15 ), fill = our_grey , alpha = 0.5 ) + geom_ribbon ( aes ( x = time , ymax = daylength , ymin = 9 ), fill = our_yellow , alpha = 1 ) + geom_hline ( yintercept = 12 , color = our_white ) + geom_vline ( xintercept = doy , color = our_green , size = 1 ) + theme_tufte () + ylim ( 9 , 15 ) + theme ( axis.text.y = element_blank (), axis.ticks.y = element_blank (), axis.title.y = element_blank (), axis.title.x = element_blank (), axis.text.x = element_blank (), axis.ticks.x = element_blank ()) + theme ( plot.title = element_text ( hjust = 0.5 , vjust = 0 )) date_inlay","title":"Inlay 3 - daylength"},{"location":"data-library/Pull_Sentinal2_l2_data/#ensemble-map-assembly","text":"library ( cowplot ) library ( magick ) map_overlay <- ggdraw ( day_density ) + draw_plot ( guide_map , x = 1.08 , y = 1 , hjust = 1 , vjust = 1 , width = 0.3 , height = 0.3 ) + draw_plot ( date_inlay , x = 1 , y = 0.35 , hjust = 1 , vjust = 1 , width = 0.1 , height = 0.25 ) + geom_text ( aes ( x = 1 , y = 0.08 , label = display_date , hjust = 1 ), color = our_grey , cex = 3 , fontface = 'bold' ) + # draw_image(\"Ty_powerline_plots/Southern_California_Edison_Logo.png\", x = -0.24, y = 0.38, scale=.3)+ # draw_image(\"Ty_powerline_plots/earthlab_logo.png\", x = -0.38, y = 0.38, scale=.25)+ geom_text ( aes ( x = 0.4 , y = . 9 , label = \"Spectral library - Monthly average\" ), color = our_green , hjust = 0 , cex = 8 , fontface = 'bold' ) + geom_text ( aes ( x = 0.01 , y = . 04 , label = \"Created by ESIIL (T. Tuff) for Fall Hackathon -- October 2023. Sentinel 2 Data from 'https://earth-search.aws.element84.com/v0'\" ), color = our_grey , hjust = 0 , cex = 3 ) + geom_text ( aes ( x = 0.4 , y = . 1 , label = \"wavelength (nm)\" ), color = our_grey , hjust = 0 , cex = 4 , fontface = 'bold' ) + geom_text ( aes ( x = 0.01 , y = . 5 , angle = 90 , label = \"reflectance\" ), color = our_grey , hjust = 0 , cex = 4 , fontface = 'bold' ) map_overlay","title":"Ensemble map assembly"},{"location":"data-library/Pull_Sentinal2_l2_data/#save-map","text":"ggsave ( map_overlay , file = \"day_density_15_May_2021_zone_5.png\" , bg = \"white\" , dpi = 600 , width = 12 , height = 5 )","title":"Save map"},{"location":"data-library/Pull_Sentinal2_l2_data/#end-timer","text":"end <- Sys.time () difftime ( end , start ) Time difference of 3.2202 mins","title":"End timer"},{"location":"data-library/disturbance-stack/","text":"Earth Lab Disturbance Stack derived from Landfire \u00b6 The CU Boulder Earth Lab has integrated annual (1999-2020) disturbance presence data from Landfire with a new index of hotter drought into an easily managed raster data stack. To accelerate your access to this dataset, the ESIIL team has made disturbance stack data for the Southern Rockies available on the Cyverse data store at the below directory: ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/disturbance The stack data is in two versions, full and simplified. The full version (dist_stack_Southern_Rockies.tif) has the below values: Code Landfire disturbance status Hotter-drought status 0 none no hotter-drought/fewer than 4 thresholds exceeded 1 fire no hotter-drought/fewer than 4 thresholds exceeded 2 insect/disease no hotter-drought/fewer than 4 thresholds exceeded 3 other Landfire disturbance no hotter-drought/fewer than 4 thresholds exceeded 4 none hotter-drought with 4 thresholds exceeded 5 fire hotter-drought with 4 thresholds exceeded 6 insects/disease hotter-drought with 4 thresholds exceeded 7 other Landfire disturbance hotter-drought with 4 thresholds exceeded 8 none hotter-drought with 5 thresholds exceeded 9 fire hotter-drought with 5 thresholds exceeded 10 insects/disease hotter-drought with 5 thresholds exceeded 11 other Landfire disturbance hotter-drought with 5 thresholds exceeded 12 none hotter-drought with 6 thresholds exceeded 13 fire hotter-drought with 6 thresholds exceeded 14 insects/disease hotter-drought with 6 thresholds exceeded 15 other Landfire disturbance hotter-drought with 6 thresholds exceeded The simplified version (simple_dist_stack_Southern_Rockies.tif) has the below values, and only includes the most extreme hot drought: Code Landfire disturbance status Hotter-drought status 0 none no hotter-drought/fewer than 6 thresholds exceeded 1 fire no hotter-drought/fewer than 6 thresholds exceeded 2 insect/disease no hotter-drought/fewer than 6 thresholds exceeded 3 none hotter-drought with 6 thresholds exceeded 4 fire hotter-drought with 6 thresholds exceeded 5 insect/disease hhotter-drought with 6 thresholds exceeded Additional MODIS data is best accessed via VSI or STAC.","title":"Earth Lab Disturbance Stack derived from Landfire"},{"location":"data-library/disturbance-stack/#earth-lab-disturbance-stack-derived-from-landfire","text":"The CU Boulder Earth Lab has integrated annual (1999-2020) disturbance presence data from Landfire with a new index of hotter drought into an easily managed raster data stack. To accelerate your access to this dataset, the ESIIL team has made disturbance stack data for the Southern Rockies available on the Cyverse data store at the below directory: ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/disturbance The stack data is in two versions, full and simplified. The full version (dist_stack_Southern_Rockies.tif) has the below values: Code Landfire disturbance status Hotter-drought status 0 none no hotter-drought/fewer than 4 thresholds exceeded 1 fire no hotter-drought/fewer than 4 thresholds exceeded 2 insect/disease no hotter-drought/fewer than 4 thresholds exceeded 3 other Landfire disturbance no hotter-drought/fewer than 4 thresholds exceeded 4 none hotter-drought with 4 thresholds exceeded 5 fire hotter-drought with 4 thresholds exceeded 6 insects/disease hotter-drought with 4 thresholds exceeded 7 other Landfire disturbance hotter-drought with 4 thresholds exceeded 8 none hotter-drought with 5 thresholds exceeded 9 fire hotter-drought with 5 thresholds exceeded 10 insects/disease hotter-drought with 5 thresholds exceeded 11 other Landfire disturbance hotter-drought with 5 thresholds exceeded 12 none hotter-drought with 6 thresholds exceeded 13 fire hotter-drought with 6 thresholds exceeded 14 insects/disease hotter-drought with 6 thresholds exceeded 15 other Landfire disturbance hotter-drought with 6 thresholds exceeded The simplified version (simple_dist_stack_Southern_Rockies.tif) has the below values, and only includes the most extreme hot drought: Code Landfire disturbance status Hotter-drought status 0 none no hotter-drought/fewer than 6 thresholds exceeded 1 fire no hotter-drought/fewer than 6 thresholds exceeded 2 insect/disease no hotter-drought/fewer than 6 thresholds exceeded 3 none hotter-drought with 6 thresholds exceeded 4 fire hotter-drought with 6 thresholds exceeded 5 insect/disease hhotter-drought with 6 thresholds exceeded Additional MODIS data is best accessed via VSI or STAC.","title":"Earth Lab Disturbance Stack derived from Landfire"},{"location":"data-library/drought/","text":"Drought Indices \u00b6 There are a wide variety of drought indices and variables used to describe various forms of drought. This data is best accessed via VSI and STAC to enable climate data summarization at the desired temporal and spatial resolution. To accelerate your access to basic drought data, the ESIIL team has made annual averages of SPEI and PDSI for the Southern Rockies available on the Cyverse data store at the below directory: ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/Disturbance/drought SPEI, or the Standardised Precipitation-Evapotranspiration Index, is a multiscalar drought index based on climatic data. It can be used for determining the onset, duration and magnitude of drought conditions with respect to normal conditions in a variety of natural and managed systems such as crops, ecosystems, rivers, water resources, etc. An overview of SPEI is available here . The pre-compiled datasets are at the 30 day, 1 year, and 5 year time scales and are from the TerraClimate dataset . PDSI, or the Palmer Drought Severity Index, uses readily available temperature and precipitation data to estimate relative dryness. However, it is not multiscalar. An overview of PDSI from NCAR is here . The pre-compiled dataset is from the TerraClimate dataset .","title":"Drought Indices"},{"location":"data-library/drought/#drought-indices","text":"There are a wide variety of drought indices and variables used to describe various forms of drought. This data is best accessed via VSI and STAC to enable climate data summarization at the desired temporal and spatial resolution. To accelerate your access to basic drought data, the ESIIL team has made annual averages of SPEI and PDSI for the Southern Rockies available on the Cyverse data store at the below directory: ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/Disturbance/drought SPEI, or the Standardised Precipitation-Evapotranspiration Index, is a multiscalar drought index based on climatic data. It can be used for determining the onset, duration and magnitude of drought conditions with respect to normal conditions in a variety of natural and managed systems such as crops, ecosystems, rivers, water resources, etc. An overview of SPEI is available here . The pre-compiled datasets are at the 30 day, 1 year, and 5 year time scales and are from the TerraClimate dataset . PDSI, or the Palmer Drought Severity Index, uses readily available temperature and precipitation data to estimate relative dryness. However, it is not multiscalar. An overview of PDSI from NCAR is here . The pre-compiled dataset is from the TerraClimate dataset .","title":"Drought Indices"},{"location":"data-library/epa-ecoregions/","text":"EPA Ecoregions \u00b6 EPA ecoregions are a convenient spatial framework for ecosystem regions used by the United States Environmental Protection Agency. Full details on EPA ecoregions can be found here. A Roman numeral classification scheme has been adopted for different hierarchical levels of ecoregions, ranging from general regions to more detailed: Level I - 12 ecoregions in the continental U.S. Level II - 25 ecoregions in the continental U.S. Level III -105 ecoregions in the continental U.S. Level IV - 967 ecoregions in the conterminous U.S. Instructions for accessing spatial EPA ecoregion data can be found in the script code/create-data-library/access_epa_ecoregions.R. The script is also copied below: # This brief script demonstrates how to access level 3 and 4 EPA ecoregions for North America. # Directly accessing the files via VSI is recommended, as this uses cloud-hosted data. # A version for downloading the zipped files is also provided in case for some reason you need the actual files. # ESIIL, February 2024 # Tyler L. McIntosh ####### ACCESS SHAPEFILES DIRECTLY VIA VSI ######### require ( glue ) require ( sf ) epa_l3 <- glue :: glue ( \"/vsizip/vsicurl/\" , #magic remote connection \"https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip\" , #copied link to download location \"/us_eco_l3.shp\" ) |> #path inside zip file sf :: st_read () epa_l4 <- glue :: glue ( \"/vsizip/vsicurl/\" , #magic remote connection \"https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l4.zip\" , #copied link to download location \"/us_eco_l4_no_st.shp\" ) |> #path inside zip file sf :: st_read () ######### DOWNLOAD ZIPPED DATA FILES ######### #Set up directory directory <- \"~/data/ecoregions\" if ( ! dir.exists ( directory )) { dir.create ( directory ) } #Avoid download timeout options ( timeout = max ( 1000 , getOption ( \"timeout\" ))) #URLs for downloads epaUrls <- c ( \"https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip\" , \"https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l4.zip\" ) destFiles <- file.path ( directory , basename ( epaUrls )) #Download mapply ( FUN = function ( url , destfile ) { download.file ( url = url , destfile = destfile , mode = \"wb\" )}, url = epaUrls , destfile = destFiles ) #Unzip downloaded files mapply ( FUN = function ( destfile , exdir ) { unzip ( zipfile = destfile , files = NULL , exdir = exdir )}, destfile = destFiles , exdir = gsub ( pattern = \".zip\" , replacement = \"\" , x = destFiles ))","title":"EPA Ecoregions"},{"location":"data-library/epa-ecoregions/#epa-ecoregions","text":"EPA ecoregions are a convenient spatial framework for ecosystem regions used by the United States Environmental Protection Agency. Full details on EPA ecoregions can be found here. A Roman numeral classification scheme has been adopted for different hierarchical levels of ecoregions, ranging from general regions to more detailed: Level I - 12 ecoregions in the continental U.S. Level II - 25 ecoregions in the continental U.S. Level III -105 ecoregions in the continental U.S. Level IV - 967 ecoregions in the conterminous U.S. Instructions for accessing spatial EPA ecoregion data can be found in the script code/create-data-library/access_epa_ecoregions.R. The script is also copied below: # This brief script demonstrates how to access level 3 and 4 EPA ecoregions for North America. # Directly accessing the files via VSI is recommended, as this uses cloud-hosted data. # A version for downloading the zipped files is also provided in case for some reason you need the actual files. # ESIIL, February 2024 # Tyler L. McIntosh ####### ACCESS SHAPEFILES DIRECTLY VIA VSI ######### require ( glue ) require ( sf ) epa_l3 <- glue :: glue ( \"/vsizip/vsicurl/\" , #magic remote connection \"https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip\" , #copied link to download location \"/us_eco_l3.shp\" ) |> #path inside zip file sf :: st_read () epa_l4 <- glue :: glue ( \"/vsizip/vsicurl/\" , #magic remote connection \"https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l4.zip\" , #copied link to download location \"/us_eco_l4_no_st.shp\" ) |> #path inside zip file sf :: st_read () ######### DOWNLOAD ZIPPED DATA FILES ######### #Set up directory directory <- \"~/data/ecoregions\" if ( ! dir.exists ( directory )) { dir.create ( directory ) } #Avoid download timeout options ( timeout = max ( 1000 , getOption ( \"timeout\" ))) #URLs for downloads epaUrls <- c ( \"https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip\" , \"https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l4.zip\" ) destFiles <- file.path ( directory , basename ( epaUrls )) #Download mapply ( FUN = function ( url , destfile ) { download.file ( url = url , destfile = destfile , mode = \"wb\" )}, url = epaUrls , destfile = destFiles ) #Unzip downloaded files mapply ( FUN = function ( destfile , exdir ) { unzip ( zipfile = destfile , files = NULL , exdir = exdir )}, destfile = destFiles , exdir = gsub ( pattern = \".zip\" , replacement = \"\" , x = destFiles ))","title":"EPA Ecoregions"},{"location":"data-library/esiil-data-library/","text":"ESIIL Data Libraries \u00b6 ESIIL has compiled additional data libraries for use at summits and hackathons. Link to those data libraries are available here, along with a summary of their current contents (February 2024). General ESIIL Data Library \u00b6 Our data library features a diverse range of datasets, each with its own dedicated web page. To help you get started, we provide easy-to-use R and Python code snippets for downloading and working with each dataset. For more advanced users, we also offer comprehensive tutorials and vignettes tailored to individual datasets. Explore our rich collection and unlock the power of environmental data for your research today! Data Contents \u00b6 EDS in Indian Country Global native homelands USA federal tribal reservations All types of tribal land in USA Solving water NEON Aquatic instrument data EPA water quality USGS water services Data librarianship Public libraries survey Cutting-edge remote sensing NEON hyperspectral data Lidar-based canopy height Multispectral sentinel-2 on AWS Nature-based solutions and human development Open street map Extreme events and hazards EPA air quality data Fire Event Delineation (FIRED) US National Incident Management System Uranium mines Spatial scale Spatial occurrence as points Ecological forecasting National Ecological Observation Network (NEON) USA phenology network Forecasting NEON data NEON lidar after fire Data harmonization Data cataloged with publications NEON and LTER NEON lidar and organismal data Food supply UN Food and Agriculture Social justice Redlining Congressional voting Data science in decision making and policy US Census FDIC failed banks list AI in environmental data science WeatherBench Math, modeling, statistics NEON tick pathogen data Everglades food network Mammal primate association network EDS education Education statistics Nonprofit explorer MosAIc Data Library \u00b6 The data library from ESIIL's MosAIc Hackathon is located here . This data library contains some similar content to the general ESIIL data library, in addition to extra resources on cloud collaboration and AI. Data Contents \u00b6 Flood event inventory Flood event area (polygons) River geography River and basin features NEON Lakes NEON Rivers EPA water quality USGS Water Services Global Species Occurrence NEON LIDAR NEON biogeochemistry Open Street Map US Census Remote sensing","title":"ESIIL Data Libraries"},{"location":"data-library/esiil-data-library/#esiil-data-libraries","text":"ESIIL has compiled additional data libraries for use at summits and hackathons. Link to those data libraries are available here, along with a summary of their current contents (February 2024).","title":"ESIIL Data Libraries"},{"location":"data-library/esiil-data-library/#general-esiil-data-library","text":"Our data library features a diverse range of datasets, each with its own dedicated web page. To help you get started, we provide easy-to-use R and Python code snippets for downloading and working with each dataset. For more advanced users, we also offer comprehensive tutorials and vignettes tailored to individual datasets. Explore our rich collection and unlock the power of environmental data for your research today!","title":"General ESIIL Data Library"},{"location":"data-library/esiil-data-library/#data-contents","text":"EDS in Indian Country Global native homelands USA federal tribal reservations All types of tribal land in USA Solving water NEON Aquatic instrument data EPA water quality USGS water services Data librarianship Public libraries survey Cutting-edge remote sensing NEON hyperspectral data Lidar-based canopy height Multispectral sentinel-2 on AWS Nature-based solutions and human development Open street map Extreme events and hazards EPA air quality data Fire Event Delineation (FIRED) US National Incident Management System Uranium mines Spatial scale Spatial occurrence as points Ecological forecasting National Ecological Observation Network (NEON) USA phenology network Forecasting NEON data NEON lidar after fire Data harmonization Data cataloged with publications NEON and LTER NEON lidar and organismal data Food supply UN Food and Agriculture Social justice Redlining Congressional voting Data science in decision making and policy US Census FDIC failed banks list AI in environmental data science WeatherBench Math, modeling, statistics NEON tick pathogen data Everglades food network Mammal primate association network EDS education Education statistics Nonprofit explorer","title":"Data Contents"},{"location":"data-library/esiil-data-library/#mosaic-data-library","text":"The data library from ESIIL's MosAIc Hackathon is located here . This data library contains some similar content to the general ESIIL data library, in addition to extra resources on cloud collaboration and AI.","title":"MosAIc Data Library"},{"location":"data-library/esiil-data-library/#data-contents_1","text":"Flood event inventory Flood event area (polygons) River geography River and basin features NEON Lakes NEON Rivers EPA water quality USGS Water Services Global Species Occurrence NEON LIDAR NEON biogeochemistry Open Street Map US Census Remote sensing","title":"Data Contents"},{"location":"data-library/fia/","text":"Forest Inventory and Analysis Database (FIA or FIADB) \u00b6 Database description \u00b6 The Forest Inventory and Analysis (FIA) program of the USDA Forest Service Research and Development Branch collects, processes, analyzes, and reports on data necessary for assessing the extent and condition of forest resources in the United States. This data is collected at the plot level across the US, and includes information such as tree quantity and identifications, downed woody materials, tree regeneration, and more. If you are looking for spatially continuous data, TreeMap is a data product derived from FIA data and uses machine learning algorithms to assign each forested pixel across the US with the id of the FIA plot that best matches it. This is an overview of the FIA program. This is the most recent user guide for the FIADB. Prepared data access functions \u00b6 FIA data is available from the FIA DataMart . Two R functions have been prepared for your use in downloading FIA data directly to your cloud instance. Those functions can be found at code/create-data-library/download_fia.R The functions are also copied here: # This script contains functions to download both individual # FIA data csv files as well as bulk download data types. The two key functions # described are fia_download_individual_data_files and fia_bulk_download_data_files # ESIIL, February 2024 # Tyler L. McIntosh options ( timeout = 300 ) ################################ # DOWNLOAD INDIVIDUAL FIA DATASETS # # This function will download individual FIA datasets requested and return the filenames # It will create a new subdirectory for the files, \"fia_individual_data_files\". # If you want to bulk download data by type, use function fia_bulk_download_data_files # Note that you may want to change your environment's download timeout option to allow longer downloads # (e.g. options(timeout = 300)) # #### PARAMETERS #### # state_abbreviations : a vector of state abbreviations as strings (e.g. c(\"CO\", \"WY\", \"NM\")) # file_suffixes : a vector of data file oracle table names (e.g. c(\"DWM_VISIT\", \"COUNTY\") from https://www.fs.usda.gov/research/understory/forest-inventory-and-analysis-database-user-guide-phase-2 # directory : the directory in which to store the data (a new subdirectory will be created for the new files) # #### Example call to the function and read of the data #### # downloaded_files <- fia_download_individual_data_files( # state_abbreviations = c(\"CO\"), # file_suffixes = c(\"DWM_VISIT\", \"COUNTY\"), # directory = \"~/data\") # data_list <- downloaded_files |> lapply(readr::read_csv) # names(data_list) <- basename(downloaded_files) # fia_download_individual_data_files <- function ( state_abbreviations , file_suffixes , directory ) { #Ensure directory exists if ( ! dir.exists ( directory )) { dir.create ( directory ) } base_url <- \"https://apps.fs.usda.gov/fia/datamart/CSV/\" # Define the subdirectory path subdirectory_path <- file.path ( directory , \"fia_individual_data_files\" ) # Create the subdirectory if it does not exist if ( ! dir.exists ( subdirectory_path )) { dir.create ( subdirectory_path , recursive = TRUE ) } downloaded_files <- c () # Initialize an empty vector to store downloaded filenames for ( state in state_abbreviations ) { for ( suffix in file_suffixes ) { # Replace underscores with spaces to match the naming convention in the URL url_suffix <- gsub ( \"_\" , \" \" , suffix ) url_suffix <- gsub ( \" \" , \"_\" , toupper ( url_suffix )) # URL seems to be uppercase # Construct the URL and filename using the subdirectory path url <- paste0 ( base_url , state , \"_\" , url_suffix , \".csv\" ) filename <- paste0 ( subdirectory_path , \"/\" , state , \"_\" , suffix , \".csv\" ) # Attempt to download the file tryCatch ({ download.file ( url , destfile = filename , mode = \"wb\" ) downloaded_files <- c ( downloaded_files , filename ) # Add the filename to the vector message ( \"Downloaded \" , filename ) }, error = function ( e ) { message ( \"Failed to download \" , url , \": \" , e $ message ) }) } } return ( downloaded_files ) # Return the vector of downloaded filenames } ################################ # BULK DOWNLOAD FIA DATASETS # # This function will bulk download FIA datasets requested into associated subdirectories and return the filenames # as a named list of vectors, where each vector contains the files included in that bulk data set. # All bulk data subdirectories will be put into a directory called 'fia_bulk_data_files' # Note that you may want to change your environment's download timeout option to allow longer downloads # (e.g. options(timeout = 300)) # #### PARAMETERS #### # state_abbreviations : a vector of state abbreviations as strings (e.g. c(\"CO\", \"WY\", \"NM\")) # directory : the directory in which to store the data # bulk_data_types : a vector of bulk download mappings as strings (e.g. c(\"location level\", \"plot\")) # Available data mappings are: # \"location level\" # \"tree level\" # \"invasives and understory vegetation\" # \"down woody material\" # \"tree regeneration\" # \"ground cover\" # \"soils\" # \"population\" # \"plot\" # \"reference\" # Full descriptions of each of these data mappings can be found at the FIA user guide, # with each mapping associated with a different chapter of tables: # https://www.fs.usda.gov/research/understory/forest-inventory-and-analysis-database-user-guide-phase-2 # #### Example call to the function for multiple bulk data types and read in the data #### # downloaded_files <- fia_bulk_download_data_files( # state = c(\"CO\"), # directory = \"~/data\", # bulk_data_types = c(\"down woody material\", \"plot\") # ) # data_list_dwm <- downloaded_files$`down woody material`|> lapply(readr::read_csv) # names(data_list_dwm) <- basename(downloaded_files$`down woody material`) # fia_bulk_download_data_files <- function ( state , directory , bulk_data_types ) { #Ensure directory exists if ( ! dir.exists ( directory )) { dir.create ( directory ) } # Map bulk data types to their corresponding file suffixes bulk_data_mappings <- list ( \"down woody material\" = c ( \"DWM_VISIT\" , \"DWM_COARSE_WOODY_DEBRIS\" , \"DWM_DUFF_LITTER_FUEL\" , \"DWM_FINE_WOODY_DEBRIS\" , \"DWM_MICROPLOT_FUEL\" , \"DWM_RESIDUAL_PILE\" , \"DWM_TRANSECT_SEGMENT\" , \"COND_DWM_CALC\" ), \"location level\" = c ( \"SURVEY\" , \"PROJECT\" , \"COUNTY\" , \"PLOT\" , \"COND\" , \"SUBPLOT\" , \"SUBP_COND\" , #\"BOUNDARY\", \"SUBP_COND_CHNG_MTRX\" ), \"tree level\" = c ( \"TREE\" , \"WOODLAND_STEMS\" , \"GRM_COMPONENT\" , \"GRM_THRESHOLD\" , \"GRM_MIDPT\" , \"GRM_BEGIN\" , \"GRM_ESTN\" , \"BEGINEND\" , \"SEEDLING\" , \"SITETREE\" ), \"invasives and understory vegetation\" = c ( \"INVASIVE_SUBPLOT_SPP\" , \"P2VEG_SUBPLOT_SPP\" , \"P2VEG_SUBP_STRUCTURE\" ), \"tree regeneration\" = c ( \"PLOT_REGEN\" , \"SUBPLOT_REGEN\" , \"SEEDLING_REGEN\" ), \"ground cover\" = c ( \"GRND_CVR\" , \"GRND_LYR_FNCTL_GRP\" , \"GRND_LYR_MICROQUAD\" ), \"soils\" = c ( \"SUBP_SOIL_SAMPLE_LOC\" , \"SUBP_SOIL_SAMPLE_LAYER\" ), \"population\" = c ( \"POP_ESTN_UNIT\" , \"POP_EVAL\" , \"POP_EVAL_ATTRIBUTE\" , \"POP_EVAL_GRP\" , \"POP_EVAL_TYP\" , \"POP_PLOT_STRATUM_ASSGN\" , \"POP_STRATUM\" ), \"plot\" = c ( \"PLOTGEOM\" , \"PLOTSNAP\" ), \"reference\" = c ( \"REF_POP_ATTRIBUTE\" , \"REF_POP_EVAL_TYP_DESCR\" , \"REF_FOREST_TYPE\" , \"REF_FOREST_TYPE_GROUP\" , \"REF_SPECIES\" , \"REF_PLANT_DICTIONARY\" , \"REF_SPECIES_GROUP\" , \"REF_INVASIVE_SPECIES\" , \"REF_HABTYP_DESCRIPTION\" , \"REF_HABTYP_PUBLICATION\" , \"REF_CITATION\" , \"REF_FIADB_VERSION\" , \"REF_STATE_ELEV\" , \"REF_UNIT\" , \"REF_RESEARCH_STATION\" , \"REF_NVCS_HIERARCHY_STRICT\" , \"REF_NVCS_LEVEL_1_CODES\" , \"REF_NVCS_LEVEL_2_CODES\" , \"REF_NVCS_LEVEL_3_CODES\" , \"REF_NVCS_LEVEL_4_CODES\" , \"REF_NVCS_LEVEL_5_CODES\" , \"REF_NVCS_LEVEL_6_CODES\" , \"REF_NVCS_LEVEL_7_CODES\" , \"REF_NVCS_LEVEL_8_CODES\" , \"REF_AGENT\" , \"REF_DAMAGE_AGENT\" , \"REF_DAMAGE_AGENT_GROUP\" , \"REF_FVS_VAR_NAME\" , \"REF_FVS_LOC_NAME\" , \"REF_OWNGRP_CD\" , \"REF_DIFFERENCE_TEST_PER_ACRE\" , \"REF_DIFFERENCE_TEST_TOTALS\" , \"REF_EQUATION_TABLE\" , \"REF_SEQN\" , \"REF_GRM_TYPE\" , \"REF_INTL_TO_DOYLE_FACTOR\" , \"REF_TREE_CARBON_RATIO_DEAD\" , \"REF_TREE_DECAY_PROP\" , \"REF_TREE_STAND_DEAD_CR_PROP\" , \"REF_GRND_LYR\" ) ) # Initialize a named list to store the filenames for each bulk data type all_downloaded_files <- setNames ( vector ( \"list\" , length ( bulk_data_types )), bulk_data_types ) # Define and create the main bulk data directory main_bulk_dir <- file.path ( directory , \"fia_bulk_data_files\" ) if ( ! dir.exists ( main_bulk_dir )) { dir.create ( main_bulk_dir , recursive = TRUE ) } # Loop through each bulk data type for ( bulk_data_type in bulk_data_types ) { # Check if the bulk data type is known if ( ! bulk_data_type %in% names ( bulk_data_mappings )) { stop ( \"Unknown bulk data type: \" , bulk_data_type ) } # Create a subdirectory name by replacing spaces with underscores subdirectory <- gsub ( \" \" , \"_\" , bulk_data_type ) subdirectory_path <- file.path ( main_bulk_dir , subdirectory ) # Create the subdirectory if it does not exist if ( ! dir.exists ( subdirectory_path )) { dir.create ( subdirectory_path , recursive = TRUE ) } # Retrieve the correct set of file suffixes for the current bulk data type file_suffixes <- bulk_data_mappings [[ bulk_data_type ]] # Call the download function for each file suffix and save in the new subdirectory downloaded_files <- download_data_files ( state_abbreviations = state , file_suffixes = file_suffixes , location = subdirectory_path ) # Store the downloaded filenames in the named list under the current bulk data type all_downloaded_files [[ bulk_data_type ]] <- downloaded_files } # Return the named list of vectors with filenames return ( all_downloaded_files ) }","title":"Forest Inventory and Analysis Database (FIA or FIADB)"},{"location":"data-library/fia/#forest-inventory-and-analysis-database-fia-or-fiadb","text":"","title":"Forest Inventory and Analysis Database (FIA or FIADB)"},{"location":"data-library/fia/#database-description","text":"The Forest Inventory and Analysis (FIA) program of the USDA Forest Service Research and Development Branch collects, processes, analyzes, and reports on data necessary for assessing the extent and condition of forest resources in the United States. This data is collected at the plot level across the US, and includes information such as tree quantity and identifications, downed woody materials, tree regeneration, and more. If you are looking for spatially continuous data, TreeMap is a data product derived from FIA data and uses machine learning algorithms to assign each forested pixel across the US with the id of the FIA plot that best matches it. This is an overview of the FIA program. This is the most recent user guide for the FIADB.","title":"Database description"},{"location":"data-library/fia/#prepared-data-access-functions","text":"FIA data is available from the FIA DataMart . Two R functions have been prepared for your use in downloading FIA data directly to your cloud instance. Those functions can be found at code/create-data-library/download_fia.R The functions are also copied here: # This script contains functions to download both individual # FIA data csv files as well as bulk download data types. The two key functions # described are fia_download_individual_data_files and fia_bulk_download_data_files # ESIIL, February 2024 # Tyler L. McIntosh options ( timeout = 300 ) ################################ # DOWNLOAD INDIVIDUAL FIA DATASETS # # This function will download individual FIA datasets requested and return the filenames # It will create a new subdirectory for the files, \"fia_individual_data_files\". # If you want to bulk download data by type, use function fia_bulk_download_data_files # Note that you may want to change your environment's download timeout option to allow longer downloads # (e.g. options(timeout = 300)) # #### PARAMETERS #### # state_abbreviations : a vector of state abbreviations as strings (e.g. c(\"CO\", \"WY\", \"NM\")) # file_suffixes : a vector of data file oracle table names (e.g. c(\"DWM_VISIT\", \"COUNTY\") from https://www.fs.usda.gov/research/understory/forest-inventory-and-analysis-database-user-guide-phase-2 # directory : the directory in which to store the data (a new subdirectory will be created for the new files) # #### Example call to the function and read of the data #### # downloaded_files <- fia_download_individual_data_files( # state_abbreviations = c(\"CO\"), # file_suffixes = c(\"DWM_VISIT\", \"COUNTY\"), # directory = \"~/data\") # data_list <- downloaded_files |> lapply(readr::read_csv) # names(data_list) <- basename(downloaded_files) # fia_download_individual_data_files <- function ( state_abbreviations , file_suffixes , directory ) { #Ensure directory exists if ( ! dir.exists ( directory )) { dir.create ( directory ) } base_url <- \"https://apps.fs.usda.gov/fia/datamart/CSV/\" # Define the subdirectory path subdirectory_path <- file.path ( directory , \"fia_individual_data_files\" ) # Create the subdirectory if it does not exist if ( ! dir.exists ( subdirectory_path )) { dir.create ( subdirectory_path , recursive = TRUE ) } downloaded_files <- c () # Initialize an empty vector to store downloaded filenames for ( state in state_abbreviations ) { for ( suffix in file_suffixes ) { # Replace underscores with spaces to match the naming convention in the URL url_suffix <- gsub ( \"_\" , \" \" , suffix ) url_suffix <- gsub ( \" \" , \"_\" , toupper ( url_suffix )) # URL seems to be uppercase # Construct the URL and filename using the subdirectory path url <- paste0 ( base_url , state , \"_\" , url_suffix , \".csv\" ) filename <- paste0 ( subdirectory_path , \"/\" , state , \"_\" , suffix , \".csv\" ) # Attempt to download the file tryCatch ({ download.file ( url , destfile = filename , mode = \"wb\" ) downloaded_files <- c ( downloaded_files , filename ) # Add the filename to the vector message ( \"Downloaded \" , filename ) }, error = function ( e ) { message ( \"Failed to download \" , url , \": \" , e $ message ) }) } } return ( downloaded_files ) # Return the vector of downloaded filenames } ################################ # BULK DOWNLOAD FIA DATASETS # # This function will bulk download FIA datasets requested into associated subdirectories and return the filenames # as a named list of vectors, where each vector contains the files included in that bulk data set. # All bulk data subdirectories will be put into a directory called 'fia_bulk_data_files' # Note that you may want to change your environment's download timeout option to allow longer downloads # (e.g. options(timeout = 300)) # #### PARAMETERS #### # state_abbreviations : a vector of state abbreviations as strings (e.g. c(\"CO\", \"WY\", \"NM\")) # directory : the directory in which to store the data # bulk_data_types : a vector of bulk download mappings as strings (e.g. c(\"location level\", \"plot\")) # Available data mappings are: # \"location level\" # \"tree level\" # \"invasives and understory vegetation\" # \"down woody material\" # \"tree regeneration\" # \"ground cover\" # \"soils\" # \"population\" # \"plot\" # \"reference\" # Full descriptions of each of these data mappings can be found at the FIA user guide, # with each mapping associated with a different chapter of tables: # https://www.fs.usda.gov/research/understory/forest-inventory-and-analysis-database-user-guide-phase-2 # #### Example call to the function for multiple bulk data types and read in the data #### # downloaded_files <- fia_bulk_download_data_files( # state = c(\"CO\"), # directory = \"~/data\", # bulk_data_types = c(\"down woody material\", \"plot\") # ) # data_list_dwm <- downloaded_files$`down woody material`|> lapply(readr::read_csv) # names(data_list_dwm) <- basename(downloaded_files$`down woody material`) # fia_bulk_download_data_files <- function ( state , directory , bulk_data_types ) { #Ensure directory exists if ( ! dir.exists ( directory )) { dir.create ( directory ) } # Map bulk data types to their corresponding file suffixes bulk_data_mappings <- list ( \"down woody material\" = c ( \"DWM_VISIT\" , \"DWM_COARSE_WOODY_DEBRIS\" , \"DWM_DUFF_LITTER_FUEL\" , \"DWM_FINE_WOODY_DEBRIS\" , \"DWM_MICROPLOT_FUEL\" , \"DWM_RESIDUAL_PILE\" , \"DWM_TRANSECT_SEGMENT\" , \"COND_DWM_CALC\" ), \"location level\" = c ( \"SURVEY\" , \"PROJECT\" , \"COUNTY\" , \"PLOT\" , \"COND\" , \"SUBPLOT\" , \"SUBP_COND\" , #\"BOUNDARY\", \"SUBP_COND_CHNG_MTRX\" ), \"tree level\" = c ( \"TREE\" , \"WOODLAND_STEMS\" , \"GRM_COMPONENT\" , \"GRM_THRESHOLD\" , \"GRM_MIDPT\" , \"GRM_BEGIN\" , \"GRM_ESTN\" , \"BEGINEND\" , \"SEEDLING\" , \"SITETREE\" ), \"invasives and understory vegetation\" = c ( \"INVASIVE_SUBPLOT_SPP\" , \"P2VEG_SUBPLOT_SPP\" , \"P2VEG_SUBP_STRUCTURE\" ), \"tree regeneration\" = c ( \"PLOT_REGEN\" , \"SUBPLOT_REGEN\" , \"SEEDLING_REGEN\" ), \"ground cover\" = c ( \"GRND_CVR\" , \"GRND_LYR_FNCTL_GRP\" , \"GRND_LYR_MICROQUAD\" ), \"soils\" = c ( \"SUBP_SOIL_SAMPLE_LOC\" , \"SUBP_SOIL_SAMPLE_LAYER\" ), \"population\" = c ( \"POP_ESTN_UNIT\" , \"POP_EVAL\" , \"POP_EVAL_ATTRIBUTE\" , \"POP_EVAL_GRP\" , \"POP_EVAL_TYP\" , \"POP_PLOT_STRATUM_ASSGN\" , \"POP_STRATUM\" ), \"plot\" = c ( \"PLOTGEOM\" , \"PLOTSNAP\" ), \"reference\" = c ( \"REF_POP_ATTRIBUTE\" , \"REF_POP_EVAL_TYP_DESCR\" , \"REF_FOREST_TYPE\" , \"REF_FOREST_TYPE_GROUP\" , \"REF_SPECIES\" , \"REF_PLANT_DICTIONARY\" , \"REF_SPECIES_GROUP\" , \"REF_INVASIVE_SPECIES\" , \"REF_HABTYP_DESCRIPTION\" , \"REF_HABTYP_PUBLICATION\" , \"REF_CITATION\" , \"REF_FIADB_VERSION\" , \"REF_STATE_ELEV\" , \"REF_UNIT\" , \"REF_RESEARCH_STATION\" , \"REF_NVCS_HIERARCHY_STRICT\" , \"REF_NVCS_LEVEL_1_CODES\" , \"REF_NVCS_LEVEL_2_CODES\" , \"REF_NVCS_LEVEL_3_CODES\" , \"REF_NVCS_LEVEL_4_CODES\" , \"REF_NVCS_LEVEL_5_CODES\" , \"REF_NVCS_LEVEL_6_CODES\" , \"REF_NVCS_LEVEL_7_CODES\" , \"REF_NVCS_LEVEL_8_CODES\" , \"REF_AGENT\" , \"REF_DAMAGE_AGENT\" , \"REF_DAMAGE_AGENT_GROUP\" , \"REF_FVS_VAR_NAME\" , \"REF_FVS_LOC_NAME\" , \"REF_OWNGRP_CD\" , \"REF_DIFFERENCE_TEST_PER_ACRE\" , \"REF_DIFFERENCE_TEST_TOTALS\" , \"REF_EQUATION_TABLE\" , \"REF_SEQN\" , \"REF_GRM_TYPE\" , \"REF_INTL_TO_DOYLE_FACTOR\" , \"REF_TREE_CARBON_RATIO_DEAD\" , \"REF_TREE_DECAY_PROP\" , \"REF_TREE_STAND_DEAD_CR_PROP\" , \"REF_GRND_LYR\" ) ) # Initialize a named list to store the filenames for each bulk data type all_downloaded_files <- setNames ( vector ( \"list\" , length ( bulk_data_types )), bulk_data_types ) # Define and create the main bulk data directory main_bulk_dir <- file.path ( directory , \"fia_bulk_data_files\" ) if ( ! dir.exists ( main_bulk_dir )) { dir.create ( main_bulk_dir , recursive = TRUE ) } # Loop through each bulk data type for ( bulk_data_type in bulk_data_types ) { # Check if the bulk data type is known if ( ! bulk_data_type %in% names ( bulk_data_mappings )) { stop ( \"Unknown bulk data type: \" , bulk_data_type ) } # Create a subdirectory name by replacing spaces with underscores subdirectory <- gsub ( \" \" , \"_\" , bulk_data_type ) subdirectory_path <- file.path ( main_bulk_dir , subdirectory ) # Create the subdirectory if it does not exist if ( ! dir.exists ( subdirectory_path )) { dir.create ( subdirectory_path , recursive = TRUE ) } # Retrieve the correct set of file suffixes for the current bulk data type file_suffixes <- bulk_data_mappings [[ bulk_data_type ]] # Call the download function for each file suffix and save in the new subdirectory downloaded_files <- download_data_files ( state_abbreviations = state , file_suffixes = file_suffixes , location = subdirectory_path ) # Store the downloaded filenames in the named list under the current bulk data type all_downloaded_files [[ bulk_data_type ]] <- downloaded_files } # Return the named list of vectors with filenames return ( all_downloaded_files ) }","title":"Prepared data access functions"},{"location":"data-library/fire-cbi/","text":"Fire severity: Composite Burn Index (CBI) \u00b6 The Composite Burn Index (CBI) is a commonly used and ecologically meaningful measure of fire severity. Unlike some other measures of fire burn severity (e.g. MTBS fire severity), CBI is more readily comparable across large regions. To calculate this stack of CBI data the ESIIL team used the method described in Parks et al. (2019) , which uses random forests regression to calculate CBI based on Relativized Burn Ratio (RBR), latitude, climatic water deficit, and other factors. RBR was calculated using pre- and post-fire image composites of Landsat 4-9 imagery (Collection 2) during the growing season. A correction was applied to the CBI estimates to prevent overprediction at low values (Parks et al., 2019). This dataset has a layer for each year of data, with NA values at any location that was unburned during that year. Fire disturbance events documented in the Landfire fire events database will appear in these rasters. The data is pre-loaded onto the Cyverse data store and is located in the below file: ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/Disturbance/SR_landfire_fire_events_cbi_bc.tif","title":"Fire severity: Composite Burn Index (CBI)"},{"location":"data-library/fire-cbi/#fire-severity-composite-burn-index-cbi","text":"The Composite Burn Index (CBI) is a commonly used and ecologically meaningful measure of fire severity. Unlike some other measures of fire burn severity (e.g. MTBS fire severity), CBI is more readily comparable across large regions. To calculate this stack of CBI data the ESIIL team used the method described in Parks et al. (2019) , which uses random forests regression to calculate CBI based on Relativized Burn Ratio (RBR), latitude, climatic water deficit, and other factors. RBR was calculated using pre- and post-fire image composites of Landsat 4-9 imagery (Collection 2) during the growing season. A correction was applied to the CBI estimates to prevent overprediction at low values (Parks et al., 2019). This dataset has a layer for each year of data, with NA values at any location that was unburned during that year. Fire disturbance events documented in the Landfire fire events database will appear in these rasters. The data is pre-loaded onto the Cyverse data store and is located in the below file: ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/Disturbance/SR_landfire_fire_events_cbi_bc.tif","title":"Fire severity: Composite Burn Index (CBI)"},{"location":"data-library/gedi/","text":"GEDI data overview \u00b6 The Global Ecosystem Dynamics Investigation (GEDI) is a joint mission between NASA and the University of Maryland, with the instrument installed aboard the International Space Station. Data acquired using the instrument\u2019s three lasers are used to construct detailed three-dimensional (3D) maps of forest canopy height and the distribution of branches and leaves. By accurately measuring forests in 3D, GEDI data play an important role in understanding the amounts of biomass and carbon forests store and how much they lose when disturbed \u2013 vital information for understanding Earth\u2019s carbon cycle and how it is changing. GEDI data also can be used to study plant and animal habitats and biodiversity, and how these change over time. The GEDI homepage is located here . GEDI data is collected in footprints of ~25m along the track of the sensor. Each footprint is separated by 60m. GEDI footprint based aboveground biomass density (Mg/ha) over the Southern Rocky Mountains have been downloaded by Dr. Nayani Ilangakoon and placed on the Cyverse data store at the below path. The data are from 2019-2022, and are in the form of tiled CSV files. ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/GEDI Brief scripts in both R and Python are available in the GitHub repository demonstrating how to access and manipulate the data. The R script is copied below. ### This file reads, filter basedo on qulaity flag and ecoregion, and plots GEDI biomass data in csv format. # ESIIL, 2024 # Nayani Ilangakoon # Load necessary libraries library ( readr ) # For read_csv library ( dplyr ) # For data manipulation library ( ggplot2 ) # For plotting library ( tidyr ) # For data tidying library ( forcats ) ############### # NOTE: This script is reading the data directly from the data store. It is only actually opening and processing a single csv # If you want to use all of the GEDI data that has been made available for your use, you will want to move it # to your cyverse instance to improve performance ############### # Define the root path to the data drive ROOT_PATH <- \"~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest\" # Create the path to the GEDI data by appending the directory name to the root path indir <- file.path ( ROOT_PATH , \"GEDI/GEDI_SR_footprint_data/GEDI_biomass_SR\" ) # List the contents of the indir directory list.files ( indir ) # List all files that end with .csv in indir polyfiles <- list.files ( indir , pattern = \"\\\\.csv$\" , full.names = TRUE ) # Print the list of .csv files polyfiles out_csv <- file.path ( indir , \"recovery_treat_bms_64.csv\" ) # Reading the csv file created in the last step l4a_df <- read_csv ( out_csv ) # Assign \"NA\" to the values that needs to be discarded. l4a_df <- l4a_df %>% mutate ( agbd = if_else ( agbd == -9999 , NA_real_ , agbd )) l4a_df <- na.omit ( l4a_df ) # MCD12Q1 PFT types pft_legend <- c ( 'Water Bodies' , 'Evergreen Needleleaf Trees' , 'Evergreen Broadleaf Trees' , 'Deciduous Needleleaf Trees' , 'Deciduous Broadleaf Trees' , 'Shrub' , 'Grass' , 'Cereal Croplands' , 'Broadleaf Croplands' , 'Urban and Built-up Lands' , 'Permanent Snow and Ice' , 'Barren' , 'Unclassified' ) # label PFT classes with numbers names ( pft_legend ) <- as.character ( 0 : 12 ) # Creating mask with good quality shots and trees/shrubs pft class mask <- l4a_df $ l4_quality_flag == 1 & l4a_df $ `land_cover_data/pft_class` <= 5 # Filter the dataframe based on the mask filtered_df <- l4a_df [ mask , ] # Transforming the PFT class to a factor with labels filtered_df $ `land_cover_data/pft_class` <- factor ( filtered_df $ `land_cover_data/pft_class` , levels = names ( pft_legend ), labels = pft_legend ) # Plotting the distribution of GEDI L4A AGBD estimates by PFTs ggplot ( filtered_df , aes ( x = agbd , fill = `land_cover_data/pft_class` )) + geom_histogram ( bins = 30 , alpha = 0.6 , position = \"identity\" ) + scale_fill_manual ( values = rainbow ( length ( unique ( filtered_df $ `land_cover_data/pft_class` )))) + labs ( title = 'Distribution of GEDI L4A AGBD estimates by PFTs (Plant Functional Types) in ACA in 2020' , x = 'agbd (Mg / ha)' , y = 'Frequency' ) + theme_minimal () + guides ( fill = guide_legend ( title = \"PFT Class\" )) + theme ( legend.position = \"bottom\" ) # Saving the plot ggsave ( \"test.png\" , width = 15 , height = 5 , units = \"in\" ) # Assuming l4a_df and mask have been defined as before # Binning the elevation data l4a_df <- l4a_df %>% mutate ( elev_bin = cut ( elev_lowestmode , breaks = seq ( 0 , 5000 , by = 500 ))) # Ensure PFT class is a factor with proper labels l4a_df $ `land_cover_data/pft_class` <- factor ( l4a_df $ `land_cover_data/pft_class` , levels = names ( pft_legend ), labels = pft_legend ) # Filtering the dataframe based on mask and ensure it is applied correctly filtered_df <- l4a_df %>% filter ( mask ) # Creating the boxplot g <- ggplot ( filtered_df , aes ( x = elev_bin , y = agbd )) + geom_boxplot () + facet_wrap ( ~ `land_cover_data/pft_class` , scales = \"free\" , labeller = labeller ( `land_cover_data/pft_class` = as_labeller ( pft_legend ))) + theme ( axis.text.x = element_text ( angle = 90 , hjust = 1 )) + labs ( x = \"Elevation (m)\" , y = \"agbd\" , title = \"AGBD by Elevation and PFT Class\" ) + theme_minimal () # Print the plot print ( g ) # Save the plot ggsave ( \"agbd_category.png\" , plot = g , width = 15 , height = 10 , units = \"in\" )","title":"GEDI data overview"},{"location":"data-library/gedi/#gedi-data-overview","text":"The Global Ecosystem Dynamics Investigation (GEDI) is a joint mission between NASA and the University of Maryland, with the instrument installed aboard the International Space Station. Data acquired using the instrument\u2019s three lasers are used to construct detailed three-dimensional (3D) maps of forest canopy height and the distribution of branches and leaves. By accurately measuring forests in 3D, GEDI data play an important role in understanding the amounts of biomass and carbon forests store and how much they lose when disturbed \u2013 vital information for understanding Earth\u2019s carbon cycle and how it is changing. GEDI data also can be used to study plant and animal habitats and biodiversity, and how these change over time. The GEDI homepage is located here . GEDI data is collected in footprints of ~25m along the track of the sensor. Each footprint is separated by 60m. GEDI footprint based aboveground biomass density (Mg/ha) over the Southern Rocky Mountains have been downloaded by Dr. Nayani Ilangakoon and placed on the Cyverse data store at the below path. The data are from 2019-2022, and are in the form of tiled CSV files. ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/GEDI Brief scripts in both R and Python are available in the GitHub repository demonstrating how to access and manipulate the data. The R script is copied below. ### This file reads, filter basedo on qulaity flag and ecoregion, and plots GEDI biomass data in csv format. # ESIIL, 2024 # Nayani Ilangakoon # Load necessary libraries library ( readr ) # For read_csv library ( dplyr ) # For data manipulation library ( ggplot2 ) # For plotting library ( tidyr ) # For data tidying library ( forcats ) ############### # NOTE: This script is reading the data directly from the data store. It is only actually opening and processing a single csv # If you want to use all of the GEDI data that has been made available for your use, you will want to move it # to your cyverse instance to improve performance ############### # Define the root path to the data drive ROOT_PATH <- \"~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest\" # Create the path to the GEDI data by appending the directory name to the root path indir <- file.path ( ROOT_PATH , \"GEDI/GEDI_SR_footprint_data/GEDI_biomass_SR\" ) # List the contents of the indir directory list.files ( indir ) # List all files that end with .csv in indir polyfiles <- list.files ( indir , pattern = \"\\\\.csv$\" , full.names = TRUE ) # Print the list of .csv files polyfiles out_csv <- file.path ( indir , \"recovery_treat_bms_64.csv\" ) # Reading the csv file created in the last step l4a_df <- read_csv ( out_csv ) # Assign \"NA\" to the values that needs to be discarded. l4a_df <- l4a_df %>% mutate ( agbd = if_else ( agbd == -9999 , NA_real_ , agbd )) l4a_df <- na.omit ( l4a_df ) # MCD12Q1 PFT types pft_legend <- c ( 'Water Bodies' , 'Evergreen Needleleaf Trees' , 'Evergreen Broadleaf Trees' , 'Deciduous Needleleaf Trees' , 'Deciduous Broadleaf Trees' , 'Shrub' , 'Grass' , 'Cereal Croplands' , 'Broadleaf Croplands' , 'Urban and Built-up Lands' , 'Permanent Snow and Ice' , 'Barren' , 'Unclassified' ) # label PFT classes with numbers names ( pft_legend ) <- as.character ( 0 : 12 ) # Creating mask with good quality shots and trees/shrubs pft class mask <- l4a_df $ l4_quality_flag == 1 & l4a_df $ `land_cover_data/pft_class` <= 5 # Filter the dataframe based on the mask filtered_df <- l4a_df [ mask , ] # Transforming the PFT class to a factor with labels filtered_df $ `land_cover_data/pft_class` <- factor ( filtered_df $ `land_cover_data/pft_class` , levels = names ( pft_legend ), labels = pft_legend ) # Plotting the distribution of GEDI L4A AGBD estimates by PFTs ggplot ( filtered_df , aes ( x = agbd , fill = `land_cover_data/pft_class` )) + geom_histogram ( bins = 30 , alpha = 0.6 , position = \"identity\" ) + scale_fill_manual ( values = rainbow ( length ( unique ( filtered_df $ `land_cover_data/pft_class` )))) + labs ( title = 'Distribution of GEDI L4A AGBD estimates by PFTs (Plant Functional Types) in ACA in 2020' , x = 'agbd (Mg / ha)' , y = 'Frequency' ) + theme_minimal () + guides ( fill = guide_legend ( title = \"PFT Class\" )) + theme ( legend.position = \"bottom\" ) # Saving the plot ggsave ( \"test.png\" , width = 15 , height = 5 , units = \"in\" ) # Assuming l4a_df and mask have been defined as before # Binning the elevation data l4a_df <- l4a_df %>% mutate ( elev_bin = cut ( elev_lowestmode , breaks = seq ( 0 , 5000 , by = 500 ))) # Ensure PFT class is a factor with proper labels l4a_df $ `land_cover_data/pft_class` <- factor ( l4a_df $ `land_cover_data/pft_class` , levels = names ( pft_legend ), labels = pft_legend ) # Filtering the dataframe based on mask and ensure it is applied correctly filtered_df <- l4a_df %>% filter ( mask ) # Creating the boxplot g <- ggplot ( filtered_df , aes ( x = elev_bin , y = agbd )) + geom_boxplot () + facet_wrap ( ~ `land_cover_data/pft_class` , scales = \"free\" , labeller = labeller ( `land_cover_data/pft_class` = as_labeller ( pft_legend ))) + theme ( axis.text.x = element_text ( angle = 90 , hjust = 1 )) + labs ( x = \"Elevation (m)\" , y = \"agbd\" , title = \"AGBD by Elevation and PFT Class\" ) + theme_minimal () # Print the plot print ( g ) # Save the plot ggsave ( \"agbd_category.png\" , plot = g , width = 15 , height = 10 , units = \"in\" )","title":"GEDI data overview"},{"location":"data-library/landfire-events/","text":"LANDFIRE Public Events Geodatabase \u00b6 From 'LANDFIRE Product Descriptions with References' The LF National (LF 1.X) Public Events Geodatabase is a collection of recent natural disturbance and land management activities used to update existing vegetation and fuel layers during LF Program deliverables. Public Events exclude proprietary and/or sensitive data. This geodatabase includes three feature classes - Raw Events, Model Ready Events, and Exotics. The Public Raw and Model Ready Event feature classes include natural disturbance and vegetation/fuel treatment data. The Public Exotics feature class contains data on the occurrence of exotic or invasive plant species. There is also a look up table for the source code (lutSource_Code), an attribute found in all three feature classes. The source code is an LF internal code assigned to each data source. Consult thetable\u201clutSource_Code\u201d in thegeodatabases for more information about the data sources included in, and excluded from, releases. The data compiled in the three feature classes are collected from disparate sources including federal, state, local, and private organizations. All data submitted to LF are evaluated for inclusion into the LF Events geodatabase. Acceptable Event data must have the following minimum requirements to be included in the Events geodatabase: 1) be represented by a polygon on the landscape and have a defined spatial coordinate system 2) have an acceptable event type (Appendix B) or exotics plant species 3) be attributed with year of occurrence or observation of the current data call. Metadata \u00b6 The LANDFIRE public events geodatabase contents description is available here . This document provides a description of how polygon data of disturbans and treatments are evaluated and processed into the LANDFIRE Events geodatabase. The Raw and Model Ready Events Data Dictionary is available here . Note that this is a large geodatabase (> 1 million polygons). Recommend filtering as soon as possible. The relevant layers within the .gdb file are: CONUS_230_PublicExotics CONUS_230_PublicModelReadyEvents CONUS_230_PublicRawEvents Access \u00b6 Storage location: ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/Disturbance/LF_Public_Events_1999_2022 Example access script: system(\"cp -r ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/Disturbance/LF_Public_Events_1999_2022 ~/LF_Events\") #move the data first!! landfireEvents <- sf::st_read(\"~/LF_Events/LF_Public_Events_1999_2022.gdb\", layer = \"CONUS_230_PublicModelReadyEvents\") unique(landfireEvents$Event_Type) # [1] \"Thinning\" \"Other Mechanical\" \"Prescribed Fire\" \"Herbicide\" # [5] \"Clearcut\" \"Harvest\" \"Wildfire\" \"Mastication\" # [9] \"Wildland Fire\" \"Chemical\" \"Development\" \"Biological\" # [13] \"Weather\" \"Planting\" \"Reforestation\" \"Insects\" # [17] \"Seeding\" \"Disease\" \"Wildland Fire Use\" \"Insects/Disease\" # [21] \"Insecticide\" landfireFireEvents <- landfireEvents |> dplyr::filter(Event_Type == \"Wildfire\" | Event_Type == \"Wildland Fire Use\" | Event_Type == \"Prescribed Fire\" | Event_Type == \"Wildland Fire\" | Event_Type == \"Fire\")","title":"LANDFIRE Public Events Geodatabase"},{"location":"data-library/landfire-events/#landfire-public-events-geodatabase","text":"From 'LANDFIRE Product Descriptions with References' The LF National (LF 1.X) Public Events Geodatabase is a collection of recent natural disturbance and land management activities used to update existing vegetation and fuel layers during LF Program deliverables. Public Events exclude proprietary and/or sensitive data. This geodatabase includes three feature classes - Raw Events, Model Ready Events, and Exotics. The Public Raw and Model Ready Event feature classes include natural disturbance and vegetation/fuel treatment data. The Public Exotics feature class contains data on the occurrence of exotic or invasive plant species. There is also a look up table for the source code (lutSource_Code), an attribute found in all three feature classes. The source code is an LF internal code assigned to each data source. Consult thetable\u201clutSource_Code\u201d in thegeodatabases for more information about the data sources included in, and excluded from, releases. The data compiled in the three feature classes are collected from disparate sources including federal, state, local, and private organizations. All data submitted to LF are evaluated for inclusion into the LF Events geodatabase. Acceptable Event data must have the following minimum requirements to be included in the Events geodatabase: 1) be represented by a polygon on the landscape and have a defined spatial coordinate system 2) have an acceptable event type (Appendix B) or exotics plant species 3) be attributed with year of occurrence or observation of the current data call.","title":"LANDFIRE Public Events Geodatabase"},{"location":"data-library/landfire-events/#metadata","text":"The LANDFIRE public events geodatabase contents description is available here . This document provides a description of how polygon data of disturbans and treatments are evaluated and processed into the LANDFIRE Events geodatabase. The Raw and Model Ready Events Data Dictionary is available here . Note that this is a large geodatabase (> 1 million polygons). Recommend filtering as soon as possible. The relevant layers within the .gdb file are: CONUS_230_PublicExotics CONUS_230_PublicModelReadyEvents CONUS_230_PublicRawEvents","title":"Metadata"},{"location":"data-library/landfire-events/#access","text":"Storage location: ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/Disturbance/LF_Public_Events_1999_2022 Example access script: system(\"cp -r ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/Disturbance/LF_Public_Events_1999_2022 ~/LF_Events\") #move the data first!! landfireEvents <- sf::st_read(\"~/LF_Events/LF_Public_Events_1999_2022.gdb\", layer = \"CONUS_230_PublicModelReadyEvents\") unique(landfireEvents$Event_Type) # [1] \"Thinning\" \"Other Mechanical\" \"Prescribed Fire\" \"Herbicide\" # [5] \"Clearcut\" \"Harvest\" \"Wildfire\" \"Mastication\" # [9] \"Wildland Fire\" \"Chemical\" \"Development\" \"Biological\" # [13] \"Weather\" \"Planting\" \"Reforestation\" \"Insects\" # [17] \"Seeding\" \"Disease\" \"Wildland Fire Use\" \"Insects/Disease\" # [21] \"Insecticide\" landfireFireEvents <- landfireEvents |> dplyr::filter(Event_Type == \"Wildfire\" | Event_Type == \"Wildland Fire Use\" | Event_Type == \"Prescribed Fire\" | Event_Type == \"Wildland Fire\" | Event_Type == \"Fire\")","title":"Access"},{"location":"data-library/lcmap/","text":"Land Change Monitoring, Assessment, and Projection \u00b6 Land Change Monitoring, Assessment, and Projection (LCMAP) represents a new generation of land cover mapping and change monitoring from the U.S. Geological Survey\u2019s Earth Resources Observation and Science (EROS) Center. LCMAP answers a need for higher quality results at greater frequency with additional land cover and change variables than previous efforts. The USGS website for LCMAP is here. Collection 1.3 of the LCMAP product contains 10 different science products ( details here ). To accelerate your access to this dataset, the ESIIL team has made LCMAP 1.3 Primary Land Cover product (LCPRI) data for the Southern Rockies available on the Cyverse data store at the below directory: ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/LCMAP_SR_1985_2021 Additional LCMAP layers and products may be accessed via STAC and VSI (see below for example). The script used to download the LCMAP data already available is located in the GitHub repo at /code/create-data-library/LCMAP_Direct_Access-adapted.ipynb. The code is from the LCMAP data access tutorial. #Access LCMAP data from STAC #Adapted from 'Download data from a STAC API using R, rstac, and GDAL' #https://stacspec.org/en/tutorials/1-download-data-using-r/ require(glue) require(sf) require(terra) require(rstac) #Access ecoregiosn via VSI epa_l3 <- glue::glue( \"/vsizip/vsicurl/\", #magic remote connection \"https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip\", #copied link to download location \"/us_eco_l3.shp\") |> #path inside zip file sf::st_read() #Get just S.Rockies and ensure that it is in EPSG:4326 southernRockies <- epa_l3 |> dplyr::filter(US_L3NAME == \"Southern Rockies\") |> dplyr::group_by(US_L3NAME) |> dplyr::summarize(geometry = sf::st_union(geometry)) |> sf::st_transform(\"EPSG:4326\") bboxSR4326 <- sf::st_bbox(southernRockies) # Create a stac query for just the 2021 LCMAP data stac_query <- rstac::stac( \"https://planetarycomputer.microsoft.com/api/stac/v1\" ) |> rstac::stac_search( collections = \"usgs-lcmap-conus-v13\", bbox = bboxSR4326, datetime = \"2021-01-01/2021-12-31\" ) |> rstac::get_request() #A function to get a vsicurl url form a base url make_lcmap_vsicurl_url <- function(base_url) { paste0( \"/vsicurl\", \"?pc_url_signing=yes\", \"&pc_collection=usgs-lcmap-conus-v13\", \"&url=\", base_url ) } lcpri_url <- make_lcmap_vsicurl_url(rstac::assets_url(stac_query, \"lcpri\")) #Pull the file out_file <- tempfile(fileext = \".tif\") sf::gdal_utils( \"warp\", source = lcpri_url, destination = out_file, options = c( \"-t_srs\", sf::st_crs(southernRockies)$wkt, \"-te\", sf::st_bbox(southernRockies) ) ) #Create the raster and plot! terra::rast(out_file) |> terra::plot() southernRockies |> sf::st_geometry() |> plot(lwd = 3, add = TRUE)","title":"Land Change Monitoring, Assessment, and Projection"},{"location":"data-library/lcmap/#land-change-monitoring-assessment-and-projection","text":"Land Change Monitoring, Assessment, and Projection (LCMAP) represents a new generation of land cover mapping and change monitoring from the U.S. Geological Survey\u2019s Earth Resources Observation and Science (EROS) Center. LCMAP answers a need for higher quality results at greater frequency with additional land cover and change variables than previous efforts. The USGS website for LCMAP is here. Collection 1.3 of the LCMAP product contains 10 different science products ( details here ). To accelerate your access to this dataset, the ESIIL team has made LCMAP 1.3 Primary Land Cover product (LCPRI) data for the Southern Rockies available on the Cyverse data store at the below directory: ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/LCMAP_SR_1985_2021 Additional LCMAP layers and products may be accessed via STAC and VSI (see below for example). The script used to download the LCMAP data already available is located in the GitHub repo at /code/create-data-library/LCMAP_Direct_Access-adapted.ipynb. The code is from the LCMAP data access tutorial. #Access LCMAP data from STAC #Adapted from 'Download data from a STAC API using R, rstac, and GDAL' #https://stacspec.org/en/tutorials/1-download-data-using-r/ require(glue) require(sf) require(terra) require(rstac) #Access ecoregiosn via VSI epa_l3 <- glue::glue( \"/vsizip/vsicurl/\", #magic remote connection \"https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip\", #copied link to download location \"/us_eco_l3.shp\") |> #path inside zip file sf::st_read() #Get just S.Rockies and ensure that it is in EPSG:4326 southernRockies <- epa_l3 |> dplyr::filter(US_L3NAME == \"Southern Rockies\") |> dplyr::group_by(US_L3NAME) |> dplyr::summarize(geometry = sf::st_union(geometry)) |> sf::st_transform(\"EPSG:4326\") bboxSR4326 <- sf::st_bbox(southernRockies) # Create a stac query for just the 2021 LCMAP data stac_query <- rstac::stac( \"https://planetarycomputer.microsoft.com/api/stac/v1\" ) |> rstac::stac_search( collections = \"usgs-lcmap-conus-v13\", bbox = bboxSR4326, datetime = \"2021-01-01/2021-12-31\" ) |> rstac::get_request() #A function to get a vsicurl url form a base url make_lcmap_vsicurl_url <- function(base_url) { paste0( \"/vsicurl\", \"?pc_url_signing=yes\", \"&pc_collection=usgs-lcmap-conus-v13\", \"&url=\", base_url ) } lcpri_url <- make_lcmap_vsicurl_url(rstac::assets_url(stac_query, \"lcpri\")) #Pull the file out_file <- tempfile(fileext = \".tif\") sf::gdal_utils( \"warp\", source = lcpri_url, destination = out_file, options = c( \"-t_srs\", sf::st_crs(southernRockies)$wkt, \"-te\", sf::st_bbox(southernRockies) ) ) #Create the raster and plot! terra::rast(out_file) |> terra::plot() southernRockies |> sf::st_geometry() |> plot(lwd = 3, add = TRUE)","title":"Land Change Monitoring, Assessment, and Projection"},{"location":"data-library/modis-vcf/","text":"MODIS Vegetation Continuous Fields (VCF) \u00b6 The MODIS VCF product is derived from the MODIS satellite. The dataset provides proportional estimates of varying cover types. This data is developed from global training data derived using high-resolution imagery. The training data and phenological metrics are used with a regression tree to derive percent cover globally. The model is then used to estimate areal proportions of life form, leaf type, and leaf longevity. MODIS Vegetation Continuous Fields (MOD44B) provides global sub-pixel estimates of three land cover components (percent tree cover; percent non-tree vegetation; and percent non-vegetated) at 250 m spatial resolution. NASA MODIS information here . To accelerate your access to this dataset, the ESIIL team has made MODIS VCF data for the Southern Rockies available on the Cyverse data store at the below directory: ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/modis-vcf Additional MODIS data is best accessed via VSI or STAC.","title":"MODIS Vegetation Continuous Fields (VCF)"},{"location":"data-library/modis-vcf/#modis-vegetation-continuous-fields-vcf","text":"The MODIS VCF product is derived from the MODIS satellite. The dataset provides proportional estimates of varying cover types. This data is developed from global training data derived using high-resolution imagery. The training data and phenological metrics are used with a regression tree to derive percent cover globally. The model is then used to estimate areal proportions of life form, leaf type, and leaf longevity. MODIS Vegetation Continuous Fields (MOD44B) provides global sub-pixel estimates of three land cover components (percent tree cover; percent non-tree vegetation; and percent non-vegetated) at 250 m spatial resolution. NASA MODIS information here . To accelerate your access to this dataset, the ESIIL team has made MODIS VCF data for the Southern Rockies available on the Cyverse data store at the below directory: ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/modis-vcf Additional MODIS data is best accessed via VSI or STAC.","title":"MODIS Vegetation Continuous Fields (VCF)"},{"location":"data-library/mounting-via-vsi/","text":"Mounting data directly from a URL \u00b6 ESIIL, 2024 Tyler McIntosh Data can be directly accessed from where it is hosted on the internet, without the need to download the entire file to your local machine. For spatial data, special protocols from the GDAL library can be used. The first part of enabling remote access is \"vsicurl\". VSI is GDAL's Virtual File System. This is a virtual file system handler allows access to files hosted on remote servers over protocols like HTTP, HTTPS, and FTP. When you prepend \"vsicurl/\" to a URL, GDAL reads the file directly from the remote location without downloading it entirely to the local disk. It's particularly useful for large files, as it only fetches the portions of the file needed for the current operation. The second part of enabling remote access to a zipped file (most large data files hosted online) is \"vsizip\". This is another virtual file system handler in GDAL that enables reading files inside zip archives as if they were unzipped, without the need to extract them manually. By using \"vsizip/\", you can directly access the contents of a zip file. When combined, \"/vsizip/vsicurl/\" allows GDAL (and, subsequently, a package such as 'terra' or 'sf' in R, or similar Python packages) to access files inside of a zip archive on a remote server. The URL following this protocol specifies the remote location of the zip file, and the path after the URL specifies the particular file within the zip archive that you want to access. Example \u00b6 For example, you may have a url to a spatial dataset that you want to use, \" https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip \". You may have found this link on a website. Figure out your archive contents \u00b6 In order to open a specific file within the zip archive, you need to know the names of the files within the archive. You can either: Download the archive once, view the data structure, and then access it remotely from then on, or, a better solution is to... Access the contents of the zip file using GDAL from a command-line environment To access the contents from a command-line environment, you would use a line of code like this: gdalinfo /vsizip/vsicurl/https://example.com/data.zip Or, in our example: gdalinfo /vsizip/vsicurl/https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip If you would like to do this without leaving your R or Python environment, you can use R or Python to execute command line calls: R, using \"system\": zip_url = \"/vsizip//vsicurl/https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip\" system(paste(\"gdalinfo\", zip_url)) Python, using \"subprocess.run\": import subprocess zip_url = \"/vsizip//vsicurl/https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip\" subprocess.run([\"gdalinfo\", zip_url]) This will tell you that the archive contains several files, one of which is \"us_eco_l3.shp\" - our shapefile of interest. (If there were subdirectories within the directory, repeat the process). Mounting the data \u00b6 We now know the full path to our file of interest: \"/vsizip//vsicurl/https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip/us_eco_l3.shp\" To mount the data, we simply feed this string to our spatial data package just as we would any other data location. For example, in R, we could do: require(glue) require(sf) epa_l3 <- glue::glue( \"/vsizip/vsicurl/\", #magic remote connection \"https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip\", #copied link to download location \"/us_eco_l3.shp\") |> #path inside zip file sf::st_read() From this point, we now have the data mounted in our epa_l3 variable, and can manipulate it as usual. Note that, since vsicurl only fetches the portions of the file needed for an operation, the data mounted very quickly. Only once you attempt an operation with the data that requires the entire dataset will it actually fetch the entire dataset!","title":"Mounting data directly from a URL"},{"location":"data-library/mounting-via-vsi/#mounting-data-directly-from-a-url","text":"ESIIL, 2024 Tyler McIntosh Data can be directly accessed from where it is hosted on the internet, without the need to download the entire file to your local machine. For spatial data, special protocols from the GDAL library can be used. The first part of enabling remote access is \"vsicurl\". VSI is GDAL's Virtual File System. This is a virtual file system handler allows access to files hosted on remote servers over protocols like HTTP, HTTPS, and FTP. When you prepend \"vsicurl/\" to a URL, GDAL reads the file directly from the remote location without downloading it entirely to the local disk. It's particularly useful for large files, as it only fetches the portions of the file needed for the current operation. The second part of enabling remote access to a zipped file (most large data files hosted online) is \"vsizip\". This is another virtual file system handler in GDAL that enables reading files inside zip archives as if they were unzipped, without the need to extract them manually. By using \"vsizip/\", you can directly access the contents of a zip file. When combined, \"/vsizip/vsicurl/\" allows GDAL (and, subsequently, a package such as 'terra' or 'sf' in R, or similar Python packages) to access files inside of a zip archive on a remote server. The URL following this protocol specifies the remote location of the zip file, and the path after the URL specifies the particular file within the zip archive that you want to access.","title":"Mounting data directly from a URL"},{"location":"data-library/mounting-via-vsi/#example","text":"For example, you may have a url to a spatial dataset that you want to use, \" https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip \". You may have found this link on a website.","title":"Example"},{"location":"data-library/mounting-via-vsi/#figure-out-your-archive-contents","text":"In order to open a specific file within the zip archive, you need to know the names of the files within the archive. You can either: Download the archive once, view the data structure, and then access it remotely from then on, or, a better solution is to... Access the contents of the zip file using GDAL from a command-line environment To access the contents from a command-line environment, you would use a line of code like this: gdalinfo /vsizip/vsicurl/https://example.com/data.zip Or, in our example: gdalinfo /vsizip/vsicurl/https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip If you would like to do this without leaving your R or Python environment, you can use R or Python to execute command line calls: R, using \"system\": zip_url = \"/vsizip//vsicurl/https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip\" system(paste(\"gdalinfo\", zip_url)) Python, using \"subprocess.run\": import subprocess zip_url = \"/vsizip//vsicurl/https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip\" subprocess.run([\"gdalinfo\", zip_url]) This will tell you that the archive contains several files, one of which is \"us_eco_l3.shp\" - our shapefile of interest. (If there were subdirectories within the directory, repeat the process).","title":"Figure out your archive contents"},{"location":"data-library/mounting-via-vsi/#mounting-the-data","text":"We now know the full path to our file of interest: \"/vsizip//vsicurl/https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip/us_eco_l3.shp\" To mount the data, we simply feed this string to our spatial data package just as we would any other data location. For example, in R, we could do: require(glue) require(sf) epa_l3 <- glue::glue( \"/vsizip/vsicurl/\", #magic remote connection \"https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip\", #copied link to download location \"/us_eco_l3.shp\") |> #path inside zip file sf::st_read() From this point, we now have the data mounted in our epa_l3 variable, and can manipulate it as usual. Note that, since vsicurl only fetches the portions of the file needed for an operation, the data mounted very quickly. Only once you attempt an operation with the data that requires the entire dataset will it actually fetch the entire dataset!","title":"Mounting the data"},{"location":"data-library/move-data-to-instance/","text":"Moving data to your instance from the data store \u00b6 Some data has been pre-downloaded for you and stored on the CyVerse data store in order to help expedite your projects. While you CAN access that data directly on the data store, it is HIGHLY recommended that you copy the data over to your instance (see \"Cyverse data management\" under \"Collaborating on the cloud\" for more information). This is because your work with the data will be dramatically faster with it located on your instance. Take, for instance, the treemap data. If we load and plot the data without moving it, it takes just a few seconds (i.e. ~2.973 seconds). Not bad. require(terra) require(tictoc) tictoc::tic() treemap <- terra::rast(\"~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/TreeMap/treemap2016_southernrockies.tif\") terra::plot(treemap) tictoc::toc() However, if we load and plot the data after moving it, it takes less than a second (i.e. ~0.302 seconds). Even better! This 10x increase in speed will add up incredibly quickly as soon as you start working more intensively with the data. require(terra) require(tictoc) system(\"cp -r ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/TreeMap ~/TreeMap\") #move the data first!! tictoc::tic() treemap <- terra::rast(\"~/TreeMap/treemap2016_southernrockies.tif\") terra::plot(treemap) tictoc::toc() Takeaway: seriously, just copy the data over.","title":"Move and Save data"},{"location":"data-library/move-data-to-instance/#moving-data-to-your-instance-from-the-data-store","text":"Some data has been pre-downloaded for you and stored on the CyVerse data store in order to help expedite your projects. While you CAN access that data directly on the data store, it is HIGHLY recommended that you copy the data over to your instance (see \"Cyverse data management\" under \"Collaborating on the cloud\" for more information). This is because your work with the data will be dramatically faster with it located on your instance. Take, for instance, the treemap data. If we load and plot the data without moving it, it takes just a few seconds (i.e. ~2.973 seconds). Not bad. require(terra) require(tictoc) tictoc::tic() treemap <- terra::rast(\"~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/TreeMap/treemap2016_southernrockies.tif\") terra::plot(treemap) tictoc::toc() However, if we load and plot the data after moving it, it takes less than a second (i.e. ~0.302 seconds). Even better! This 10x increase in speed will add up incredibly quickly as soon as you start working more intensively with the data. require(terra) require(tictoc) system(\"cp -r ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/TreeMap ~/TreeMap\") #move the data first!! tictoc::tic() treemap <- terra::rast(\"~/TreeMap/treemap2016_southernrockies.tif\") terra::plot(treemap) tictoc::toc() Takeaway: seriously, just copy the data over.","title":"Moving data to your instance from the data store"},{"location":"data-library/stac_mount_save/","text":"The art of making a data cube \u00b6 Ty Tuff, ESIIL Data Scientist 2023-10-27 #library(Rcpp) library ( sf ) library ( gdalcubes ) library ( rstac ) library ( gdalUtils ) library ( terra ) library ( rgdal ) library ( reshape2 ) library ( osmdata ) library ( terra ) library ( dplyr ) library ( stars ) library ( ggplot2 ) library ( colorspace ) library ( geos ) library ( osmdata ) library ( ggthemes ) library ( tidyr ) gdalcubes_options ( parallel = 8 ) sf :: sf_extSoftVersion () ## GEOS GDAL proj.4 GDAL_with_GEOS USE_PROJ_H ## \"3.11.0\" \"3.5.3\" \"9.1.0\" \"true\" \"true\" ## PROJ ## \"9.1.0\" gdalcubes_gdal_has_geos () ## [1] TRUE library ( osmdata ) library ( dplyr ) library ( sf ) library ( terra ) library ( tidyterra ) library ( glue ) library ( ggplot2 ) library ( ggthemes ) library ( stars ) library ( magrittr ) library ( landsat ) The philosophy of moving data in the cloud \u00b6 The philosophy of moving data in the cloud represents a paradigm shift in how we approach data within our analytical processes. Instead of the traditional method of transferring entire datasets to our local environments, the cloud encourages a more efficient model: bring your analysis to the data. This approach minimizes data movement and leverages the cloud\u2019s computational power and scalability. By utilizing cloud-native tools and services, we can run our analyses directly on the data where it resides, selectively accessing and processing only what is necessary. This not only streamlines workflows but also significantly reduces overheads related to data transfer and storage management. In essence, the focus is on diverting computational resources to the data rather than the cumbersome and resource-intensive practice of moving large datasets to and fro. \u2018To Make\u2019 or \u2018To Take\u2019 a photo \u00b6 The distinction between making and taking a photograph lies in the approach and intent behind the camera. Taking a photo is often a reactive process, where the photographer captures moments as they naturally unfold, seizing the spontaneity of life without alteration. It\u2019s a passive form of photography where the emphasis is on the right timing and the natural interplay of elements within the frame. On the other hand, making a photo is a proactive and deliberate act. It is akin to craftsmanship, where a professional photographer starts with a concept and utilizes a variety of tools and techniques to stage and construct the desired scene. They actively manipulate lighting, composition, and subjects to create a photograph that aligns with their pre-visualized artistic vision. While both methods use a camera to produce a photograph, making a photo involves a creation process, whereas taking a photo is about finding the scene. David Yarrow is a famous photographer who \u2018makes\u2019 his photographs. What does it mean to \u2018make\u2019 a data cube? \u00b6 The artistry of Ansel Adams\u2019 photography serves as a compelling analogy for the meticulous craft of building a data cube from cloud data sources using tools like STAC and GDAL VSI. Just as Adams would survey the vastness of a landscape, discerning the interplay of light and shadow upon the mountains before him, a data architect surveys the expanse of available data. In this analogy, the raw data are the majestic mountains and sweeping landscapes waiting to be captured. The STAC collection acts as the photographer\u2019s deliberate choice of scene, pointing the camera lens\u2014our data tools\u2014towards the most telling and coherent dataset. Just as Adams\u2019 photographs are more than mere records of a landscape, but rather a confluence of his vision, technique, and the scene\u2019s natural beauty, so too is the data cube more than the sum of its parts. It is the artful synthesis of information, crafted and composed with the skill and intent of an artist, producing not just a tool for analysis but a harmonized, data-driven portrait of the world it represents. The builder of the data cube is, indeed, an artist, and the data cube their masterpiece, revealing not just data, but a story, a perspective, a landscape sewn from the raw material of cloud-sourced information. As Adams would adjust his viewfinder, setting the boundaries of his photographic frame, the data builder sets the view window, filtering and transferring relevant data to their own medium, akin to Adams\u2019 film. This is where the raw data is transformed, organized into the structured form of a data frame or data cube, a process not unlike the careful development of a photograph in a darkroom. Here, the data cube creator, much like Adams with his careful dodging and burning, harmonizes disparate elements into a cohesive whole, each decision reflecting an intention and vision for the final product. 1) The Rat through the Snake Problem: Scalability with Cloud Computing \u00b6 Just like a snake that swallows a rat, traditional computing systems often struggle to process the large volumes of environmental data \u2014 they\u2019re constrained by their static hardware limitations. Cloud computing introduces a python-esque capability: massive scalability. By migrating to the cloud, we essentially make the snake bigger, allowing it to handle larger \u201cprey.\u201d Scalable computers in the cloud can grow with the demand, providing the necessary computational power to process extensive datasets, which is vital in a field where data volumes are increasing exponentially. 2) The Antelope through the Python Problem: Streamlining with GDAL VSI \u00b6 As we scale up, we encounter a new challenge: trying to pass an antelope through a python \u2014 a metaphor for the next level of complexity in data processing. The sheer size and complexity of the data can become overwhelming. This is where GDAL\u2019s Virtual File System (VSI) becomes our ecological adaptation. VSI allows us to access remote data transparently and more efficiently. Instead of ingesting the entire \u201cantelope,\u201d VSI enables the \u201cpython\u201d to dynamically access and process only the parts of the data it needs, when it needs them, much like constriction before digestion. This selective access minimizes the need for local storage and expedites the data handling process. 3) Drinking from a Fire Hose: Accelerated Inference with AI and ML \u00b6 Once we\u2019ve enabled the flow of large amounts of digestible data, we encounter the metaphorical challenge of drinking from a fire hose. The data, now flowing and accessible, is immense and rapid \u2014 posing a challenge not just to store and process, but to understand and derive meaning from in real-time. This is where artificial intelligence (AI) and machine learning (ML) step in. These technologies act as a sophisticated filtration system, enabling us to drink safely and beneficially from the torrent. AI and ML can analyze patterns, make predictions, and infer insights at a pace that keeps up with the fast stream of data, turning raw information into actionable knowledge. By addressing these three pivotal challenges with cloud computing, GDAL VSI, and AI/ML, we not only manage to consume the data effectively but also transform our capabilities in environmental data science. We can move from mere data ingestion to meaningful data interpretation, all at a scale and speed necessary for impactful environmental analysis. Mounting data \u00b6 A void-filled Digital Elevation Model (DEM) is a comprehensive topographical representation where any missing data points, known as voids, have been filled in. These voids can occur due to various reasons, such as clouds or technical errors during data collection. In a void-filled DEM, these gaps are interpolated or estimated using the surrounding data to create a continuous, seamless surface model. This process enhances the utility and accuracy of the DEM for hydrological modeling, terrain analysis, and other geographical applications. The HydroSHEDS website ( https://www.hydrosheds.org/hydrosheds-core-downloads ) provides access to high-quality, void-filled DEM datasets like the DEM_continuous_CONUS_15s, which users can download and easily integrate into spatial analysis workflows using tools such as \u2018terra\u2019 in R, allowing for sophisticated environmental and geographical research and planning. # Record start time a <- Sys.time () # Create a string with the file path using glue, then download and read the DEM file as a raster object DEM_continuous_CONUS_15s <- glue ( \"/vsizip/vsicurl/\" , #magic remote connection \"https://data.hydrosheds.org/file/hydrosheds-v1-dem/hyd_na_dem_15s.zip\" , #copied link to download location \"/hyd_na_dem_15s.tif\" ) %>% #path inside zip file terra :: rast () # The 'glue' function constructs the file path string, which is then passed to 'terra::rast()' to read the DEM file into R as a raster layer. '/vsizip/vsicurl/' is a special GDAL virtual file system syntax that allows reading directly from a zipped file on a remote server. # Record end time and calculate the time difference b <- Sys.time () difftime ( b , a ) ## Time difference of 4.603666 secs # The resulting raster object is stored in 'DEM_continuous_CONUS_15s', which now contains the void-filled DEM data ready for use DEM_continuous_CONUS_15s # Prints out the details of the 'DEM_continuous_CONUS_15s' raster object ## class : SpatRaster ## dimensions : 13920, 20640, 1 (nrow, ncol, nlyr) ## resolution : 0.004166667, 0.004166667 (x, y) ## extent : -138, -52, 5, 63 (xmin, xmax, ymin, ymax) ## coord. ref. : lon/lat WGS 84 (EPSG:4326) ## source : hyd_na_dem_15s.tif ## name : Band_1 # output is a SpatRaster, which is the object type associated with the 'terra' package. Continuous DEM for North America # Record start time a <- Sys.time () ggplot () + geom_spatraster ( data = DEM_continuous_CONUS_15s ) + theme_tufte () b <- Sys.time () difftime ( b , a ) ## Time difference of 52.49061 secs Calculate Slope from that DEM SLOPE_continuous_CONUS_15s <- terra :: terrain ( DEM_continuous_CONUS_15s , \"slope\" ) SLOPE_continuous_CONUS_15s ## class : SpatRaster ## dimensions : 13920, 20640, 1 (nrow, ncol, nlyr) ## resolution : 0.004166667, 0.004166667 (x, y) ## extent : -138, -52, 5, 63 (xmin, xmax, ymin, ymax) ## coord. ref. : lon/lat WGS 84 (EPSG:4326) ## source(s) : memory ## name : slope ## min value : 0.00000 ## max value : 56.98691 # Record start time a <- Sys.time () ggplot () + geom_spatraster ( data = SLOPE_continuous_CONUS_15s ) + theme_tufte () b <- Sys.time () difftime ( b , a ) ## Time difference of 3.859545 secs Calculate aspect from DEM ASPECT_continuous_CONUS_15s <- terra :: terrain ( DEM_continuous_CONUS_15s , \"aspect\" ) ASPECT_continuous_CONUS_15s ## class : SpatRaster ## dimensions : 13920, 20640, 1 (nrow, ncol, nlyr) ## resolution : 0.004166667, 0.004166667 (x, y) ## extent : -138, -52, 5, 63 (xmin, xmax, ymin, ymax) ## coord. ref. : lon/lat WGS 84 (EPSG:4326) ## source(s) : memory ## name : aspect ## min value : 0 ## max value : 360 # Record start time a <- Sys.time () ggplot () + geom_spatraster ( data = ASPECT_continuous_CONUS_15s ) + theme_tufte () b <- Sys.time () difftime ( b , a ) ## Time difference of 3.650267 secs Create a cube from those layers! mini_stack <- c ( DEM_continuous_CONUS_15s , SLOPE_continuous_CONUS_15s , ASPECT_continuous_CONUS_15s ) mini_stack ## class : SpatRaster ## dimensions : 13920, 20640, 3 (nrow, ncol, nlyr) ## resolution : 0.004166667, 0.004166667 (x, y) ## extent : -138, -52, 5, 63 (xmin, xmax, ymin, ymax) ## coord. ref. : lon/lat WGS 84 (EPSG:4326) ## sources : hyd_na_dem_15s.tif ## memory ## memory ## names : Band_1, slope, aspect ## min values : ? , 0.00000, 0 ## max values : ? , 56.98691, 360 Reproject and return the bounding box coordinates for our Area of Interest # Transform the filtered geometry to EPSG:4326 and store its bounding box # Record start time a <- Sys.time () DEM_continuous_CONUS_15s |> stars :: st_as_stars () |> st_transform ( \"EPSG:4326\" ) |> st_bbox () -> bbox_4326 DEM_continuous_CONUS_15s |> stars :: st_as_stars () |> st_transform ( \"EPSG:32618\" ) |> st_bbox () -> bbox_32618 b <- Sys.time () difftime ( b , a ) ## Time difference of 3.7653 mins Get a polygon for Boulder County, reproject, and return bounding box. This is so I can make a smaller search in the stac catalog. boulder_county <- getbb ( \"boulder, co\" , format_out = \"sf_polygon\" ) boulder_county $ multipolygon |> st_transform ( crs = 4326 ) |> st_bbox () -> bbox_4326_boulder boulder_county $ multipolygon |> st_transform ( crs = 32720 ) |> st_bbox () -> bbox_32720_boulder Get a polygon for the United States and crop it to be the same size as the DEM above. aoi <- getbb ( \"United States\" , format_out = \"sf_polygon\" ) conus <- aoi $ multipolygon |> st_crop ( bbox_4326 ) ggplot ( data = conus ) + geom_sf () Search the Stac catalog. STAC, or SpatioTemporal Asset Catalog, is an open-source specification designed to standardize the way geospatial data is indexed and discovered. Developed by Element 84 among others, it facilitates better interoperability and sharing of geospatial assets by providing a common language for describing them. STAC\u2019s flexible design allows for easy cataloging of data, making it simpler for individuals and systems to search and retrieve geospatial information. By effectively organizing data about the Earth\u2019s spatial and temporal characteristics, STAC enables users to harness the full power of the cloud and modern data processing technologies, optimizing the way we access and analyze environmental data on a global scale. stac ( \"https://earth-search.aws.element84.com/v1\" ) |> get_request () ## ###STACCatalog ## - id: earth-search-aws ## - description: A STAC API of public datasets on AWS ## - field(s): stac_version, type, id, title, description, links, conformsTo Element 84\u2019s Earth Search is a STAC compliant search and discovery API that offers users access to a vast collection of geospatial open datasets hosted on AWS. It serves as a centralized search catalog providing standardized metadata for these open datasets, designed to be freely used and integrated into various applications. Alongside the API, Element 84 also provides a web application named Earth Search Console, which is map-centric and allows users to explore and visualize the data contained within the Earth Search API\u2019s catalog. This suite of tools is part of Element 84\u2019s initiative to make geospatial data more accessible and actionable for a wide range of users and applications. collection_formats () ## CHIRPS_v2_0_daily_p05_tif | Image collection format for CHIRPS v 2.0 daily ## | global precipitation dataset (0.05 degrees ## | resolution) from GeoTIFFs, expects list of .tif ## | or .tif.gz files as input. [TAGS: CHIRPS, ## | precipitation] ## CHIRPS_v2_0_monthly_p05_tif | Image collection format for CHIRPS v 2.0 monthly ## | global precipitation dataset (0.05 degrees ## | resolution) from GeoTIFFs, expects list of .tif ## | or .tif.gz files as input. [TAGS: CHIRPS, ## | precipitation] ## ESA_CCI_SM_ACTIVE | Collection format for ESA CCI soil moisture ## | active product (version 4.7) [TAGS: Soil ## | Moisture, ESA, CCI] ## ESA_CCI_SM_PASSIVE | Collection format for ESA CCI soil moisture ## | passive product (version 4.7) [TAGS: Soil ## | Moisture, ESA, CCI] ## GPM_IMERG_3B_DAY_GIS_V06A | Collection format for daily ## | IMERG_3B_DAY_GIS_V06A data [TAGS: Precipitation, ## | GPM, IMERG] ## L8_L1TP | Collection format for Landsat 8 Level 1 TP ## | product [TAGS: Landsat, USGS, Level 1, NASA] ## L8_SR | Collection format for Landsat 8 surface ## | reflectance product [TAGS: Landsat, USGS, Level ## | 2, NASA, surface reflectance] ## MAXAR | Preliminary collection format for MAXAR open ## | data, visual only (under development) [TAGS: ] ## MxD09GA | Collection format for selected bands from the ## | MODIS MxD09GA (Aqua and Terra) product [TAGS: ## | MODIS, surface reflectance] ## MxD10A2 | Collection format for selected bands from the ## | MODIS MxD10A2 (Aqua and Terra) v006 Snow Cover ## | product [TAGS: MODIS, Snow Cover] ## MxD11A1 | Collection format for selected bands from the ## | MODIS MxD11A2 (Aqua and Terra) v006 Land Surface ## | Temperature product [TAGS: MODIS, LST] ## MxD11A2 | Collection format for selected bands from the ## | MODIS MxD11A2 (Aqua and Terra) v006 Land Surface ## | Temperature product [TAGS: MODIS, LST] ## MxD13A2 | Collection format for selected bands from the ## | MODIS MxD13A2 (Aqua and Terra) product [TAGS: ## | MODIS, VI, NDVI, EVI] ## MxD13A3 | Collection format for selected bands from the ## | MODIS MxD13A3 (Aqua and Terra) product [TAGS: ## | MODIS, VI, NDVI, EVI] ## MxD13Q1 | Collection format for selected bands from the ## | MODIS MxD13Q1 (Aqua and Terra) product [TAGS: ## | MODIS, VI, NDVI, EVI] ## MxD14A2 | Collection format for the MODIS MxD14A2 (Aqua ## | and Terra) product [TAGS: MODIS, Fire] ## PlanetScope_3B_AnalyticMS_SR | Image collection format for PlanetScope 4-band ## | scenes [TAGS: PlanetScope, BOA, Surface ## | Reflectance] ## Sentinel2_L1C | Image collection format for Sentinel 2 Level 1C ## | data as downloaded from the Copernicus Open ## | Access Hub, expects a list of file paths as ## | input. The format works on original ZIP ## | compressed as well as uncompressed imagery. ## | [TAGS: Sentinel, Copernicus, ESA, TOA] ## Sentinel2_L1C_AWS | Image collection format for Sentinel 2 Level 1C ## | data in AWS [TAGS: Sentinel, Copernicus, ESA, ## | TOA] ## Sentinel2_L2A | Image collection format for Sentinel 2 Level 2A ## | data as downloaded from the Copernicus Open ## | Access Hub, expects a list of file paths as ## | input. The format should work on original ZIP ## | compressed as well as uncompressed imagery. ## | [TAGS: Sentinel, Copernicus, ESA, BOA, Surface ## | Reflectance] ## Sentinel2_L2A_THEIA | Image collection format for Sentinel 2 Level 2A ## | data as downloaded from Theia. [TAGS: Sentinel, ## | ESA, Flat Reflectance, Theia] Building a stac collection by aiming your camera at the landscape Creating a STAC collection is akin to a photographer framing a shot; the landscape is rich with diverse data, mirroring a scene bustling with potential subjects, colors, and light. Just as a photographer selects a portion of the vista to capture, focusing on elements that will compose a compelling image, a data scientist must similarly navigate the vast data terrain. They must \u2018point their camera\u2019 judiciously, ensuring that the \u2018frame\u2019 encapsulates the precise data needed. This careful selection is crucial, as it determines the relevance and quality of the data collection, much like the photographer\u2019s choice dictates the story a photograph will tell. # Record start time a <- Sys.time () # Initialize STAC connection s = stac ( \"https://earth-search.aws.element84.com/v0\" ) # Search for Sentinel-2 images within specified bounding box and date range #22 Million items items = s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( bbox_4326_boulder [ \"xmin\" ], bbox_4326_boulder [ \"ymin\" ], bbox_4326_boulder [ \"xmax\" ], bbox_4326_boulder [ \"ymax\" ]), datetime = \"2021-05-15/2021-05-16\" ) |> post_request () |> items_fetch ( progress = FALSE ) # Print number of found items length ( items $ features ) ## [1] 1 # Prepare the assets for analysis library ( gdalcubes ) assets = c ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"B08\" , \"B8A\" , \"B09\" , \"B11\" , \"B12\" , \"SCL\" ) s2_collection = stac_image_collection ( items $ features , asset_names = assets , property_filter = function ( x ) { x [[ \"eo:cloud_cover\" ]] < 20 }) #all images with less than 20% clouds b <- Sys.time () difftime ( b , a ) ## Time difference of 0.4706092 secs # Display the image collection s2_collection ## Image collection object, referencing 1 images with 13 bands ## Images: ## name left top bottom right ## 1 S2B_13TDE_20210516_0_L2A -106.1832 40.65079 39.65576 -104.8846 ## datetime srs ## 1 2021-05-16T18:02:54 EPSG:32613 ## ## Bands: ## name offset scale unit nodata image_count ## 1 B01 0 1 1 ## 2 B02 0 1 1 ## 3 B03 0 1 1 ## 4 B04 0 1 1 ## 5 B05 0 1 1 ## 6 B06 0 1 1 ## 7 B07 0 1 1 ## 8 B08 0 1 1 ## 9 B09 0 1 1 ## 10 B11 0 1 1 ## 11 B12 0 1 1 ## 12 B8A 0 1 1 ## 13 SCL 0 1 1 Setting up your camera and film The camera through which the data scientist frames the shot is multifaceted, akin to the tools and processes they employ. The camera\u2019s film, analogous to the data cube, defines the resolution and dimensions of the captured data, shaping how the final dataset will be utilized. The lens and its settings\u2014focus, aperture, and exposure\u2014determine the clarity, depth, and breadth of the captured information, much like the algorithms and parameters set by the data scientist dictate the granularity and scope of the data cube. The flash, like data enhancement techniques, can illuminate hidden details, ensuring that the data cube, the final product, is as informative and accurate as the landscape it represents. # Record start time a <- Sys.time () # Define a specific view on the satellite image collection v = cube_view ( srs = \"EPSG:32720\" , #this is harder than expected. dx = 100 , dy = 100 , dt = \"P1M\" , aggregation = \"median\" , resampling = \"near\" , extent = list ( t0 = \"2021-05-15\" , t1 = \"2021-05-16\" , left = bbox_32720_boulder [ 1 ], right = bbox_32720_boulder [ 2 ], top = bbox_32720_boulder [ 4 ], bottom = bbox_32720_boulder [ 3 ] ) ) b <- Sys.time () difftime ( b , a ) ## Time difference of 0.002738953 secs # Display the defined view v ## A data cube view object ## ## Dimensions: ## low high count pixel_size ## t 2021-05-01 2021-05-31 1 P1M ## y -3103099.52398788 15434400.4760121 185375 100 ## x -3178878.98542359 15369521.0145764 185484 100 ## ## SRS: \"EPSG:32720\" ## Temporal aggregation method: \"median\" ## Spatial resampling method: \"near\" Take a picture! Raster style # Record start time a <- Sys.time () s2_collection |> raster_cube ( v ) |> select_bands ( c ( \"B04\" , \"B05\" )) |> apply_pixel ( c ( \"(B05-B04)/(B05+B04)\" ), names = \"NDVI\" ) |> write_tif () |> raster :: stack () -> x x ## class : RasterStack ## dimensions : 185375, 185484, 34384096500, 1 (nrow, ncol, ncell, nlayers) ## resolution : 100, 100 (x, y) ## extent : -3178879, 15369521, -3103100, 15434400 (xmin, xmax, ymin, ymax) ## crs : +proj=utm +zone=20 +south +datum=WGS84 +units=m +no_defs ## names : NDVI b <- Sys.time () difftime ( b , a ) ## Time difference of 4.132932 mins STARS style # Record start time a <- Sys.time () s2_collection |> raster_cube ( v ) |> select_bands ( c ( \"B04\" , \"B05\" )) |> apply_pixel ( c ( \"(B05-B04)/(B05+B04)\" ), names = \"NDVI\" ) |> stars :: st_as_stars () -> y b <- Sys.time () difftime ( b , a ) ## Time difference of 1.459866 mins y ## stars_proxy object with 1 attribute in 1 file(s): ## $NDVI ## [1] \"[...]/filec5982c38536c.nc:NDVI\" ## ## dimension(s): ## from to offset delta refsys point ## x 1 185484 -3178879 100 WGS 84 / UTM zone 20S NA ## y 1 185375 15434400 -100 WGS 84 / UTM zone 20S NA ## time 1 1 NA NA POSIXct FALSE ## values x/y ## x NULL [x] ## y NULL [y] ## time [2021-05-01,2021-06-01) Extract data # Record start time a <- Sys.time () x <- s2_collection |> raster_cube ( v ) |> select_bands ( c ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"B08\" , \"B8A\" , \"B09\" , \"B11\" , \"B12\" )) |> extract_geom ( boulder_county $ multipolygon ) |> rename ( \"time\" = \"time\" , \"443\" = \"B01\" , \"490\" = \"B02\" , \"560\" = \"B03\" , \"665\" = \"B04\" , \"705\" = \"B05\" , \"740\" = \"B06\" , \"783\" = \"B07\" , \"842\" = \"B08\" , \"865\" = \"B8A\" , \"940\" = \"B09\" , \"1610\" = \"B11\" , \"2190\" = \"B12\" ) b <- Sys.time () difftime ( b , a ) ## Time difference of 1.699016 mins head ( x ) ## FID time 443 490 560 665 705 740 783 842 865 940 1610 ## 1 1 2021-05-01 11096 10929 10224 9893 9956 9706 9715 9641 9511 8459 5682 ## 2 1 2021-05-01 11631 11282 10550 10234 10288 10031 10032 9988 9828 9153 5802 ## 3 1 2021-05-01 11900 11393 10666 10337 10398 10142 10138 10093 9927 9461 5754 ## 4 1 2021-05-01 11406 10597 9928 9626 9694 9481 9516 9338 9336 8959 5726 ## 5 1 2021-05-01 11399 10939 10237 9905 9978 9738 9746 9633 9555 8925 5831 ## 6 1 2021-05-01 11600 11174 10462 10147 10209 9952 9960 9890 9760 9153 5773 ## 2190 ## 1 3917 ## 2 3981 ## 3 3937 ## 4 4054 ## 5 4097 ## 6 3990 Make a timeseries # Record start time a <- Sys.time () items <- s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( -105.694362 , 39.912886 , -105.052774 , 40.262785 ), datetime = \"2020-01-01/2022-12-31\" , limit = 500 ) %>% post_request () S2.mask = image_mask ( \"SCL\" , values = c ( 3 , 8 , 9 )) col = stac_image_collection ( items $ features , asset_names = assets , property_filter = function ( x ) { x [[ \"eo:cloud_cover\" ]] < 30 }) v = cube_view ( srs = \"EPSG:4326\" , extent = list ( t0 = \"2020-01-01\" , t1 = \"2022-12-31\" , left = -105.694362 , right = -105.052774 , top = 40.262785 , bottom = 39.912886 ), dx = 0.001 , dy = 0.001 , dt = \"P1M\" , aggregation = \"median\" , resampling = \"bilinear\" ) library ( colorspace ) ndvi.col = function ( n ) { rev ( sequential_hcl ( n , \"Green-Yellow\" )) } library ( gdalcubes ) raster_cube ( col , v , mask = S2.mask ) |> select_bands ( c ( \"B04\" , \"B08\" )) |> apply_pixel ( \"(B08-B04)/(B08+B04)\" , \"NDVI\" ) |> gdalcubes :: animate ( col = ndvi.col , zlim = c ( -0.2 , 1 ), key.pos = 1 , save_as = \"anim.gif\" , fps = 4 ) ## [1] \"/Users/ty/Documents/Github/hackathon2023_datacube/docs/code_for_building_cube/anim.gif\" b <- Sys.time () difftime ( b , a ) ## Time difference of 4.716672 mins y ## stars_proxy object with 1 attribute in 1 file(s): ## $NDVI ## [1] \"[...]/filec5982c38536c.nc:NDVI\" ## ## dimension(s): ## from to offset delta refsys point ## x 1 185484 -3178879 100 WGS 84 / UTM zone 20S NA ## y 1 185375 15434400 -100 WGS 84 / UTM zone 20S NA ## time 1 1 NA NA POSIXct FALSE ## values x/y ## x NULL [x] ## y NULL [y] ## time [2021-05-01,2021-06-01) Saving Data Cubes to Local Storage There are occasions when we need to manipulate data cubes using other software. For such purposes, we can save data cubes to our local disk as individual netCDF files or as a series of GeoTIFF files. In the case of the latter, each temporal segment of the cube is saved as a separate (multiband) GeoTIFF file. Both netCDF and GeoTIFF formats allow for file size reduction through compression and data packing. This process involves transforming double precision numbers into smaller integer values using a scale and offset, which can be particularly useful for managing disk space (for more details, refer to the ?write_ncdf and ?write_tif documentation). gdalcubes_options ( ncdf_compression_level = 1 ) write_ncdf ( cube , file.path ( \"~/Desktop\" , basename ( tempfile ( fileext = \".nc\" )))) gdalcubes_options ( ncdf_compression_level = 0 ) write_tif() and write_ncdf() both return the path(s) to created file(s) as a character vector. items_2020 <- s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( -105.694362 , 39.912886 , -105.052774 , 40.262785 ), datetime = \"2020-05-01/2020-06-30\" ) |> post_request () items_2021 <- s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( -105.694362 , 39.912886 , -105.052774 , 40.262785 ), datetime = \"2021-05-01/2021-06-30\" ) |> post_request () col_2020 = stac_image_collection ( items_2020 $ features , asset_names = assets ) col_2021 = stac_image_collection ( items_2021 $ features , asset_names = assets ) v_2020 = cube_view ( srs = \"EPSG:32720\" , extent = list ( t0 = \"2020-05-01\" , t1 = \"2020-06-30\" , left = bbox_32720_boulder [ \"xmin\" ], right = bbox_32720_boulder [ \"xmax\" ], top = bbox_32720_boulder [ \"ymax\" ], bottom = bbox_32720_boulder [ \"ymin\" ]), dx = 100 , dy = 100 , dt = \"P1D\" , aggregation = \"median\" , resampling = \"bilinear\" ) v_2021 = cube_view ( v_2020 , extent = list ( t0 = \"2021-05-01\" , t1 = \"2021-06-30\" )) max_ndvi_mosaic <- function ( col , v ) { raster_cube ( col , v ) |> select_bands ( c ( \"B04\" , \"B08\" )) |> apply_pixel ( c ( \"(B08-B04)/(B08+B04)\" ), names = \"NDVI\" ) |> reduce_time ( \"max(NDVI)\" ) } suppressPackageStartupMessages ( library ( stars )) max_ndvi_mosaic ( col_2020 , v_2020 ) -> maxndvi_2020 max_ndvi_mosaic ( col_2021 , v_2021 ) -> maxndvi_2021 maxndvi_2021 maxndvi_2020 difference = maxndvi_2021 - maxndvi_2020 difference [ difference > -0.15 ] = NA names ( difference ) <- \"Difference of max NDVI (2020 - 2019)\" flood_polygon_data3 <- glue ( \"/vsizip/vsicurl/https://data.hydrosheds.org/file/hydrosheds-associated/gloric/GloRiC_v10_shapefile.zip/GloRiC_v10_shapefile/GloRiC_v10.shp\" ) |> st_read () |> st_as_sf ( coords = c ( \"lon\" , \"lat\" )) flood_polygon_data3 #st_read(\"/Users/ty/Downloads/GloRiC_v10_geodatabase/GloRiC_v10.gdb\") flood_polygon_data3 <- glue ( \"/vsizip/vsicurl/https://data.hydrosheds.org/file/hydrosheds-associated/gloric/GloRiC_v10_geodatabase.zip/GloRiC_v10_geodatabase/GloRiC_v10.gdb\" ) |> st_read () |> st_as_sf ( coords = c ( \"lon\" , \"lat\" )) flood_polygon_data3","title":"Stream data"},{"location":"data-library/stac_mount_save/#the-art-of-making-a-data-cube","text":"Ty Tuff, ESIIL Data Scientist 2023-10-27 #library(Rcpp) library ( sf ) library ( gdalcubes ) library ( rstac ) library ( gdalUtils ) library ( terra ) library ( rgdal ) library ( reshape2 ) library ( osmdata ) library ( terra ) library ( dplyr ) library ( stars ) library ( ggplot2 ) library ( colorspace ) library ( geos ) library ( osmdata ) library ( ggthemes ) library ( tidyr ) gdalcubes_options ( parallel = 8 ) sf :: sf_extSoftVersion () ## GEOS GDAL proj.4 GDAL_with_GEOS USE_PROJ_H ## \"3.11.0\" \"3.5.3\" \"9.1.0\" \"true\" \"true\" ## PROJ ## \"9.1.0\" gdalcubes_gdal_has_geos () ## [1] TRUE library ( osmdata ) library ( dplyr ) library ( sf ) library ( terra ) library ( tidyterra ) library ( glue ) library ( ggplot2 ) library ( ggthemes ) library ( stars ) library ( magrittr ) library ( landsat )","title":"The art of making a data cube"},{"location":"data-library/stac_mount_save/#the-philosophy-of-moving-data-in-the-cloud","text":"The philosophy of moving data in the cloud represents a paradigm shift in how we approach data within our analytical processes. Instead of the traditional method of transferring entire datasets to our local environments, the cloud encourages a more efficient model: bring your analysis to the data. This approach minimizes data movement and leverages the cloud\u2019s computational power and scalability. By utilizing cloud-native tools and services, we can run our analyses directly on the data where it resides, selectively accessing and processing only what is necessary. This not only streamlines workflows but also significantly reduces overheads related to data transfer and storage management. In essence, the focus is on diverting computational resources to the data rather than the cumbersome and resource-intensive practice of moving large datasets to and fro.","title":"The philosophy of moving data in the cloud"},{"location":"data-library/stac_mount_save/#to-make-or-to-take-a-photo","text":"The distinction between making and taking a photograph lies in the approach and intent behind the camera. Taking a photo is often a reactive process, where the photographer captures moments as they naturally unfold, seizing the spontaneity of life without alteration. It\u2019s a passive form of photography where the emphasis is on the right timing and the natural interplay of elements within the frame. On the other hand, making a photo is a proactive and deliberate act. It is akin to craftsmanship, where a professional photographer starts with a concept and utilizes a variety of tools and techniques to stage and construct the desired scene. They actively manipulate lighting, composition, and subjects to create a photograph that aligns with their pre-visualized artistic vision. While both methods use a camera to produce a photograph, making a photo involves a creation process, whereas taking a photo is about finding the scene. David Yarrow is a famous photographer who \u2018makes\u2019 his photographs.","title":"\u2018To Make\u2019 or \u2018To Take\u2019 a photo"},{"location":"data-library/stac_mount_save/#what-does-it-mean-to-make-a-data-cube","text":"The artistry of Ansel Adams\u2019 photography serves as a compelling analogy for the meticulous craft of building a data cube from cloud data sources using tools like STAC and GDAL VSI. Just as Adams would survey the vastness of a landscape, discerning the interplay of light and shadow upon the mountains before him, a data architect surveys the expanse of available data. In this analogy, the raw data are the majestic mountains and sweeping landscapes waiting to be captured. The STAC collection acts as the photographer\u2019s deliberate choice of scene, pointing the camera lens\u2014our data tools\u2014towards the most telling and coherent dataset. Just as Adams\u2019 photographs are more than mere records of a landscape, but rather a confluence of his vision, technique, and the scene\u2019s natural beauty, so too is the data cube more than the sum of its parts. It is the artful synthesis of information, crafted and composed with the skill and intent of an artist, producing not just a tool for analysis but a harmonized, data-driven portrait of the world it represents. The builder of the data cube is, indeed, an artist, and the data cube their masterpiece, revealing not just data, but a story, a perspective, a landscape sewn from the raw material of cloud-sourced information. As Adams would adjust his viewfinder, setting the boundaries of his photographic frame, the data builder sets the view window, filtering and transferring relevant data to their own medium, akin to Adams\u2019 film. This is where the raw data is transformed, organized into the structured form of a data frame or data cube, a process not unlike the careful development of a photograph in a darkroom. Here, the data cube creator, much like Adams with his careful dodging and burning, harmonizes disparate elements into a cohesive whole, each decision reflecting an intention and vision for the final product.","title":"What does it mean to \u2018make\u2019 a data cube?"},{"location":"data-library/stac_mount_save/#1-the-rat-through-the-snake-problem-scalability-with-cloud-computing","text":"Just like a snake that swallows a rat, traditional computing systems often struggle to process the large volumes of environmental data \u2014 they\u2019re constrained by their static hardware limitations. Cloud computing introduces a python-esque capability: massive scalability. By migrating to the cloud, we essentially make the snake bigger, allowing it to handle larger \u201cprey.\u201d Scalable computers in the cloud can grow with the demand, providing the necessary computational power to process extensive datasets, which is vital in a field where data volumes are increasing exponentially.","title":"1) The Rat through the Snake Problem: Scalability with Cloud Computing"},{"location":"data-library/stac_mount_save/#2-the-antelope-through-the-python-problem-streamlining-with-gdal-vsi","text":"As we scale up, we encounter a new challenge: trying to pass an antelope through a python \u2014 a metaphor for the next level of complexity in data processing. The sheer size and complexity of the data can become overwhelming. This is where GDAL\u2019s Virtual File System (VSI) becomes our ecological adaptation. VSI allows us to access remote data transparently and more efficiently. Instead of ingesting the entire \u201cantelope,\u201d VSI enables the \u201cpython\u201d to dynamically access and process only the parts of the data it needs, when it needs them, much like constriction before digestion. This selective access minimizes the need for local storage and expedites the data handling process.","title":"2) The Antelope through the Python Problem: Streamlining with GDAL VSI"},{"location":"data-library/stac_mount_save/#3-drinking-from-a-fire-hose-accelerated-inference-with-ai-and-ml","text":"Once we\u2019ve enabled the flow of large amounts of digestible data, we encounter the metaphorical challenge of drinking from a fire hose. The data, now flowing and accessible, is immense and rapid \u2014 posing a challenge not just to store and process, but to understand and derive meaning from in real-time. This is where artificial intelligence (AI) and machine learning (ML) step in. These technologies act as a sophisticated filtration system, enabling us to drink safely and beneficially from the torrent. AI and ML can analyze patterns, make predictions, and infer insights at a pace that keeps up with the fast stream of data, turning raw information into actionable knowledge. By addressing these three pivotal challenges with cloud computing, GDAL VSI, and AI/ML, we not only manage to consume the data effectively but also transform our capabilities in environmental data science. We can move from mere data ingestion to meaningful data interpretation, all at a scale and speed necessary for impactful environmental analysis.","title":"3) Drinking from a Fire Hose: Accelerated Inference with AI and ML"},{"location":"data-library/stac_mount_save/#mounting-data","text":"A void-filled Digital Elevation Model (DEM) is a comprehensive topographical representation where any missing data points, known as voids, have been filled in. These voids can occur due to various reasons, such as clouds or technical errors during data collection. In a void-filled DEM, these gaps are interpolated or estimated using the surrounding data to create a continuous, seamless surface model. This process enhances the utility and accuracy of the DEM for hydrological modeling, terrain analysis, and other geographical applications. The HydroSHEDS website ( https://www.hydrosheds.org/hydrosheds-core-downloads ) provides access to high-quality, void-filled DEM datasets like the DEM_continuous_CONUS_15s, which users can download and easily integrate into spatial analysis workflows using tools such as \u2018terra\u2019 in R, allowing for sophisticated environmental and geographical research and planning. # Record start time a <- Sys.time () # Create a string with the file path using glue, then download and read the DEM file as a raster object DEM_continuous_CONUS_15s <- glue ( \"/vsizip/vsicurl/\" , #magic remote connection \"https://data.hydrosheds.org/file/hydrosheds-v1-dem/hyd_na_dem_15s.zip\" , #copied link to download location \"/hyd_na_dem_15s.tif\" ) %>% #path inside zip file terra :: rast () # The 'glue' function constructs the file path string, which is then passed to 'terra::rast()' to read the DEM file into R as a raster layer. '/vsizip/vsicurl/' is a special GDAL virtual file system syntax that allows reading directly from a zipped file on a remote server. # Record end time and calculate the time difference b <- Sys.time () difftime ( b , a ) ## Time difference of 4.603666 secs # The resulting raster object is stored in 'DEM_continuous_CONUS_15s', which now contains the void-filled DEM data ready for use DEM_continuous_CONUS_15s # Prints out the details of the 'DEM_continuous_CONUS_15s' raster object ## class : SpatRaster ## dimensions : 13920, 20640, 1 (nrow, ncol, nlyr) ## resolution : 0.004166667, 0.004166667 (x, y) ## extent : -138, -52, 5, 63 (xmin, xmax, ymin, ymax) ## coord. ref. : lon/lat WGS 84 (EPSG:4326) ## source : hyd_na_dem_15s.tif ## name : Band_1 # output is a SpatRaster, which is the object type associated with the 'terra' package. Continuous DEM for North America # Record start time a <- Sys.time () ggplot () + geom_spatraster ( data = DEM_continuous_CONUS_15s ) + theme_tufte () b <- Sys.time () difftime ( b , a ) ## Time difference of 52.49061 secs Calculate Slope from that DEM SLOPE_continuous_CONUS_15s <- terra :: terrain ( DEM_continuous_CONUS_15s , \"slope\" ) SLOPE_continuous_CONUS_15s ## class : SpatRaster ## dimensions : 13920, 20640, 1 (nrow, ncol, nlyr) ## resolution : 0.004166667, 0.004166667 (x, y) ## extent : -138, -52, 5, 63 (xmin, xmax, ymin, ymax) ## coord. ref. : lon/lat WGS 84 (EPSG:4326) ## source(s) : memory ## name : slope ## min value : 0.00000 ## max value : 56.98691 # Record start time a <- Sys.time () ggplot () + geom_spatraster ( data = SLOPE_continuous_CONUS_15s ) + theme_tufte () b <- Sys.time () difftime ( b , a ) ## Time difference of 3.859545 secs Calculate aspect from DEM ASPECT_continuous_CONUS_15s <- terra :: terrain ( DEM_continuous_CONUS_15s , \"aspect\" ) ASPECT_continuous_CONUS_15s ## class : SpatRaster ## dimensions : 13920, 20640, 1 (nrow, ncol, nlyr) ## resolution : 0.004166667, 0.004166667 (x, y) ## extent : -138, -52, 5, 63 (xmin, xmax, ymin, ymax) ## coord. ref. : lon/lat WGS 84 (EPSG:4326) ## source(s) : memory ## name : aspect ## min value : 0 ## max value : 360 # Record start time a <- Sys.time () ggplot () + geom_spatraster ( data = ASPECT_continuous_CONUS_15s ) + theme_tufte () b <- Sys.time () difftime ( b , a ) ## Time difference of 3.650267 secs Create a cube from those layers! mini_stack <- c ( DEM_continuous_CONUS_15s , SLOPE_continuous_CONUS_15s , ASPECT_continuous_CONUS_15s ) mini_stack ## class : SpatRaster ## dimensions : 13920, 20640, 3 (nrow, ncol, nlyr) ## resolution : 0.004166667, 0.004166667 (x, y) ## extent : -138, -52, 5, 63 (xmin, xmax, ymin, ymax) ## coord. ref. : lon/lat WGS 84 (EPSG:4326) ## sources : hyd_na_dem_15s.tif ## memory ## memory ## names : Band_1, slope, aspect ## min values : ? , 0.00000, 0 ## max values : ? , 56.98691, 360 Reproject and return the bounding box coordinates for our Area of Interest # Transform the filtered geometry to EPSG:4326 and store its bounding box # Record start time a <- Sys.time () DEM_continuous_CONUS_15s |> stars :: st_as_stars () |> st_transform ( \"EPSG:4326\" ) |> st_bbox () -> bbox_4326 DEM_continuous_CONUS_15s |> stars :: st_as_stars () |> st_transform ( \"EPSG:32618\" ) |> st_bbox () -> bbox_32618 b <- Sys.time () difftime ( b , a ) ## Time difference of 3.7653 mins Get a polygon for Boulder County, reproject, and return bounding box. This is so I can make a smaller search in the stac catalog. boulder_county <- getbb ( \"boulder, co\" , format_out = \"sf_polygon\" ) boulder_county $ multipolygon |> st_transform ( crs = 4326 ) |> st_bbox () -> bbox_4326_boulder boulder_county $ multipolygon |> st_transform ( crs = 32720 ) |> st_bbox () -> bbox_32720_boulder Get a polygon for the United States and crop it to be the same size as the DEM above. aoi <- getbb ( \"United States\" , format_out = \"sf_polygon\" ) conus <- aoi $ multipolygon |> st_crop ( bbox_4326 ) ggplot ( data = conus ) + geom_sf () Search the Stac catalog. STAC, or SpatioTemporal Asset Catalog, is an open-source specification designed to standardize the way geospatial data is indexed and discovered. Developed by Element 84 among others, it facilitates better interoperability and sharing of geospatial assets by providing a common language for describing them. STAC\u2019s flexible design allows for easy cataloging of data, making it simpler for individuals and systems to search and retrieve geospatial information. By effectively organizing data about the Earth\u2019s spatial and temporal characteristics, STAC enables users to harness the full power of the cloud and modern data processing technologies, optimizing the way we access and analyze environmental data on a global scale. stac ( \"https://earth-search.aws.element84.com/v1\" ) |> get_request () ## ###STACCatalog ## - id: earth-search-aws ## - description: A STAC API of public datasets on AWS ## - field(s): stac_version, type, id, title, description, links, conformsTo Element 84\u2019s Earth Search is a STAC compliant search and discovery API that offers users access to a vast collection of geospatial open datasets hosted on AWS. It serves as a centralized search catalog providing standardized metadata for these open datasets, designed to be freely used and integrated into various applications. Alongside the API, Element 84 also provides a web application named Earth Search Console, which is map-centric and allows users to explore and visualize the data contained within the Earth Search API\u2019s catalog. This suite of tools is part of Element 84\u2019s initiative to make geospatial data more accessible and actionable for a wide range of users and applications. collection_formats () ## CHIRPS_v2_0_daily_p05_tif | Image collection format for CHIRPS v 2.0 daily ## | global precipitation dataset (0.05 degrees ## | resolution) from GeoTIFFs, expects list of .tif ## | or .tif.gz files as input. [TAGS: CHIRPS, ## | precipitation] ## CHIRPS_v2_0_monthly_p05_tif | Image collection format for CHIRPS v 2.0 monthly ## | global precipitation dataset (0.05 degrees ## | resolution) from GeoTIFFs, expects list of .tif ## | or .tif.gz files as input. [TAGS: CHIRPS, ## | precipitation] ## ESA_CCI_SM_ACTIVE | Collection format for ESA CCI soil moisture ## | active product (version 4.7) [TAGS: Soil ## | Moisture, ESA, CCI] ## ESA_CCI_SM_PASSIVE | Collection format for ESA CCI soil moisture ## | passive product (version 4.7) [TAGS: Soil ## | Moisture, ESA, CCI] ## GPM_IMERG_3B_DAY_GIS_V06A | Collection format for daily ## | IMERG_3B_DAY_GIS_V06A data [TAGS: Precipitation, ## | GPM, IMERG] ## L8_L1TP | Collection format for Landsat 8 Level 1 TP ## | product [TAGS: Landsat, USGS, Level 1, NASA] ## L8_SR | Collection format for Landsat 8 surface ## | reflectance product [TAGS: Landsat, USGS, Level ## | 2, NASA, surface reflectance] ## MAXAR | Preliminary collection format for MAXAR open ## | data, visual only (under development) [TAGS: ] ## MxD09GA | Collection format for selected bands from the ## | MODIS MxD09GA (Aqua and Terra) product [TAGS: ## | MODIS, surface reflectance] ## MxD10A2 | Collection format for selected bands from the ## | MODIS MxD10A2 (Aqua and Terra) v006 Snow Cover ## | product [TAGS: MODIS, Snow Cover] ## MxD11A1 | Collection format for selected bands from the ## | MODIS MxD11A2 (Aqua and Terra) v006 Land Surface ## | Temperature product [TAGS: MODIS, LST] ## MxD11A2 | Collection format for selected bands from the ## | MODIS MxD11A2 (Aqua and Terra) v006 Land Surface ## | Temperature product [TAGS: MODIS, LST] ## MxD13A2 | Collection format for selected bands from the ## | MODIS MxD13A2 (Aqua and Terra) product [TAGS: ## | MODIS, VI, NDVI, EVI] ## MxD13A3 | Collection format for selected bands from the ## | MODIS MxD13A3 (Aqua and Terra) product [TAGS: ## | MODIS, VI, NDVI, EVI] ## MxD13Q1 | Collection format for selected bands from the ## | MODIS MxD13Q1 (Aqua and Terra) product [TAGS: ## | MODIS, VI, NDVI, EVI] ## MxD14A2 | Collection format for the MODIS MxD14A2 (Aqua ## | and Terra) product [TAGS: MODIS, Fire] ## PlanetScope_3B_AnalyticMS_SR | Image collection format for PlanetScope 4-band ## | scenes [TAGS: PlanetScope, BOA, Surface ## | Reflectance] ## Sentinel2_L1C | Image collection format for Sentinel 2 Level 1C ## | data as downloaded from the Copernicus Open ## | Access Hub, expects a list of file paths as ## | input. The format works on original ZIP ## | compressed as well as uncompressed imagery. ## | [TAGS: Sentinel, Copernicus, ESA, TOA] ## Sentinel2_L1C_AWS | Image collection format for Sentinel 2 Level 1C ## | data in AWS [TAGS: Sentinel, Copernicus, ESA, ## | TOA] ## Sentinel2_L2A | Image collection format for Sentinel 2 Level 2A ## | data as downloaded from the Copernicus Open ## | Access Hub, expects a list of file paths as ## | input. The format should work on original ZIP ## | compressed as well as uncompressed imagery. ## | [TAGS: Sentinel, Copernicus, ESA, BOA, Surface ## | Reflectance] ## Sentinel2_L2A_THEIA | Image collection format for Sentinel 2 Level 2A ## | data as downloaded from Theia. [TAGS: Sentinel, ## | ESA, Flat Reflectance, Theia] Building a stac collection by aiming your camera at the landscape Creating a STAC collection is akin to a photographer framing a shot; the landscape is rich with diverse data, mirroring a scene bustling with potential subjects, colors, and light. Just as a photographer selects a portion of the vista to capture, focusing on elements that will compose a compelling image, a data scientist must similarly navigate the vast data terrain. They must \u2018point their camera\u2019 judiciously, ensuring that the \u2018frame\u2019 encapsulates the precise data needed. This careful selection is crucial, as it determines the relevance and quality of the data collection, much like the photographer\u2019s choice dictates the story a photograph will tell. # Record start time a <- Sys.time () # Initialize STAC connection s = stac ( \"https://earth-search.aws.element84.com/v0\" ) # Search for Sentinel-2 images within specified bounding box and date range #22 Million items items = s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( bbox_4326_boulder [ \"xmin\" ], bbox_4326_boulder [ \"ymin\" ], bbox_4326_boulder [ \"xmax\" ], bbox_4326_boulder [ \"ymax\" ]), datetime = \"2021-05-15/2021-05-16\" ) |> post_request () |> items_fetch ( progress = FALSE ) # Print number of found items length ( items $ features ) ## [1] 1 # Prepare the assets for analysis library ( gdalcubes ) assets = c ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"B08\" , \"B8A\" , \"B09\" , \"B11\" , \"B12\" , \"SCL\" ) s2_collection = stac_image_collection ( items $ features , asset_names = assets , property_filter = function ( x ) { x [[ \"eo:cloud_cover\" ]] < 20 }) #all images with less than 20% clouds b <- Sys.time () difftime ( b , a ) ## Time difference of 0.4706092 secs # Display the image collection s2_collection ## Image collection object, referencing 1 images with 13 bands ## Images: ## name left top bottom right ## 1 S2B_13TDE_20210516_0_L2A -106.1832 40.65079 39.65576 -104.8846 ## datetime srs ## 1 2021-05-16T18:02:54 EPSG:32613 ## ## Bands: ## name offset scale unit nodata image_count ## 1 B01 0 1 1 ## 2 B02 0 1 1 ## 3 B03 0 1 1 ## 4 B04 0 1 1 ## 5 B05 0 1 1 ## 6 B06 0 1 1 ## 7 B07 0 1 1 ## 8 B08 0 1 1 ## 9 B09 0 1 1 ## 10 B11 0 1 1 ## 11 B12 0 1 1 ## 12 B8A 0 1 1 ## 13 SCL 0 1 1 Setting up your camera and film The camera through which the data scientist frames the shot is multifaceted, akin to the tools and processes they employ. The camera\u2019s film, analogous to the data cube, defines the resolution and dimensions of the captured data, shaping how the final dataset will be utilized. The lens and its settings\u2014focus, aperture, and exposure\u2014determine the clarity, depth, and breadth of the captured information, much like the algorithms and parameters set by the data scientist dictate the granularity and scope of the data cube. The flash, like data enhancement techniques, can illuminate hidden details, ensuring that the data cube, the final product, is as informative and accurate as the landscape it represents. # Record start time a <- Sys.time () # Define a specific view on the satellite image collection v = cube_view ( srs = \"EPSG:32720\" , #this is harder than expected. dx = 100 , dy = 100 , dt = \"P1M\" , aggregation = \"median\" , resampling = \"near\" , extent = list ( t0 = \"2021-05-15\" , t1 = \"2021-05-16\" , left = bbox_32720_boulder [ 1 ], right = bbox_32720_boulder [ 2 ], top = bbox_32720_boulder [ 4 ], bottom = bbox_32720_boulder [ 3 ] ) ) b <- Sys.time () difftime ( b , a ) ## Time difference of 0.002738953 secs # Display the defined view v ## A data cube view object ## ## Dimensions: ## low high count pixel_size ## t 2021-05-01 2021-05-31 1 P1M ## y -3103099.52398788 15434400.4760121 185375 100 ## x -3178878.98542359 15369521.0145764 185484 100 ## ## SRS: \"EPSG:32720\" ## Temporal aggregation method: \"median\" ## Spatial resampling method: \"near\" Take a picture! Raster style # Record start time a <- Sys.time () s2_collection |> raster_cube ( v ) |> select_bands ( c ( \"B04\" , \"B05\" )) |> apply_pixel ( c ( \"(B05-B04)/(B05+B04)\" ), names = \"NDVI\" ) |> write_tif () |> raster :: stack () -> x x ## class : RasterStack ## dimensions : 185375, 185484, 34384096500, 1 (nrow, ncol, ncell, nlayers) ## resolution : 100, 100 (x, y) ## extent : -3178879, 15369521, -3103100, 15434400 (xmin, xmax, ymin, ymax) ## crs : +proj=utm +zone=20 +south +datum=WGS84 +units=m +no_defs ## names : NDVI b <- Sys.time () difftime ( b , a ) ## Time difference of 4.132932 mins STARS style # Record start time a <- Sys.time () s2_collection |> raster_cube ( v ) |> select_bands ( c ( \"B04\" , \"B05\" )) |> apply_pixel ( c ( \"(B05-B04)/(B05+B04)\" ), names = \"NDVI\" ) |> stars :: st_as_stars () -> y b <- Sys.time () difftime ( b , a ) ## Time difference of 1.459866 mins y ## stars_proxy object with 1 attribute in 1 file(s): ## $NDVI ## [1] \"[...]/filec5982c38536c.nc:NDVI\" ## ## dimension(s): ## from to offset delta refsys point ## x 1 185484 -3178879 100 WGS 84 / UTM zone 20S NA ## y 1 185375 15434400 -100 WGS 84 / UTM zone 20S NA ## time 1 1 NA NA POSIXct FALSE ## values x/y ## x NULL [x] ## y NULL [y] ## time [2021-05-01,2021-06-01) Extract data # Record start time a <- Sys.time () x <- s2_collection |> raster_cube ( v ) |> select_bands ( c ( \"B01\" , \"B02\" , \"B03\" , \"B04\" , \"B05\" , \"B06\" , \"B07\" , \"B08\" , \"B8A\" , \"B09\" , \"B11\" , \"B12\" )) |> extract_geom ( boulder_county $ multipolygon ) |> rename ( \"time\" = \"time\" , \"443\" = \"B01\" , \"490\" = \"B02\" , \"560\" = \"B03\" , \"665\" = \"B04\" , \"705\" = \"B05\" , \"740\" = \"B06\" , \"783\" = \"B07\" , \"842\" = \"B08\" , \"865\" = \"B8A\" , \"940\" = \"B09\" , \"1610\" = \"B11\" , \"2190\" = \"B12\" ) b <- Sys.time () difftime ( b , a ) ## Time difference of 1.699016 mins head ( x ) ## FID time 443 490 560 665 705 740 783 842 865 940 1610 ## 1 1 2021-05-01 11096 10929 10224 9893 9956 9706 9715 9641 9511 8459 5682 ## 2 1 2021-05-01 11631 11282 10550 10234 10288 10031 10032 9988 9828 9153 5802 ## 3 1 2021-05-01 11900 11393 10666 10337 10398 10142 10138 10093 9927 9461 5754 ## 4 1 2021-05-01 11406 10597 9928 9626 9694 9481 9516 9338 9336 8959 5726 ## 5 1 2021-05-01 11399 10939 10237 9905 9978 9738 9746 9633 9555 8925 5831 ## 6 1 2021-05-01 11600 11174 10462 10147 10209 9952 9960 9890 9760 9153 5773 ## 2190 ## 1 3917 ## 2 3981 ## 3 3937 ## 4 4054 ## 5 4097 ## 6 3990 Make a timeseries # Record start time a <- Sys.time () items <- s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( -105.694362 , 39.912886 , -105.052774 , 40.262785 ), datetime = \"2020-01-01/2022-12-31\" , limit = 500 ) %>% post_request () S2.mask = image_mask ( \"SCL\" , values = c ( 3 , 8 , 9 )) col = stac_image_collection ( items $ features , asset_names = assets , property_filter = function ( x ) { x [[ \"eo:cloud_cover\" ]] < 30 }) v = cube_view ( srs = \"EPSG:4326\" , extent = list ( t0 = \"2020-01-01\" , t1 = \"2022-12-31\" , left = -105.694362 , right = -105.052774 , top = 40.262785 , bottom = 39.912886 ), dx = 0.001 , dy = 0.001 , dt = \"P1M\" , aggregation = \"median\" , resampling = \"bilinear\" ) library ( colorspace ) ndvi.col = function ( n ) { rev ( sequential_hcl ( n , \"Green-Yellow\" )) } library ( gdalcubes ) raster_cube ( col , v , mask = S2.mask ) |> select_bands ( c ( \"B04\" , \"B08\" )) |> apply_pixel ( \"(B08-B04)/(B08+B04)\" , \"NDVI\" ) |> gdalcubes :: animate ( col = ndvi.col , zlim = c ( -0.2 , 1 ), key.pos = 1 , save_as = \"anim.gif\" , fps = 4 ) ## [1] \"/Users/ty/Documents/Github/hackathon2023_datacube/docs/code_for_building_cube/anim.gif\" b <- Sys.time () difftime ( b , a ) ## Time difference of 4.716672 mins y ## stars_proxy object with 1 attribute in 1 file(s): ## $NDVI ## [1] \"[...]/filec5982c38536c.nc:NDVI\" ## ## dimension(s): ## from to offset delta refsys point ## x 1 185484 -3178879 100 WGS 84 / UTM zone 20S NA ## y 1 185375 15434400 -100 WGS 84 / UTM zone 20S NA ## time 1 1 NA NA POSIXct FALSE ## values x/y ## x NULL [x] ## y NULL [y] ## time [2021-05-01,2021-06-01) Saving Data Cubes to Local Storage There are occasions when we need to manipulate data cubes using other software. For such purposes, we can save data cubes to our local disk as individual netCDF files or as a series of GeoTIFF files. In the case of the latter, each temporal segment of the cube is saved as a separate (multiband) GeoTIFF file. Both netCDF and GeoTIFF formats allow for file size reduction through compression and data packing. This process involves transforming double precision numbers into smaller integer values using a scale and offset, which can be particularly useful for managing disk space (for more details, refer to the ?write_ncdf and ?write_tif documentation). gdalcubes_options ( ncdf_compression_level = 1 ) write_ncdf ( cube , file.path ( \"~/Desktop\" , basename ( tempfile ( fileext = \".nc\" )))) gdalcubes_options ( ncdf_compression_level = 0 ) write_tif() and write_ncdf() both return the path(s) to created file(s) as a character vector. items_2020 <- s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( -105.694362 , 39.912886 , -105.052774 , 40.262785 ), datetime = \"2020-05-01/2020-06-30\" ) |> post_request () items_2021 <- s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( -105.694362 , 39.912886 , -105.052774 , 40.262785 ), datetime = \"2021-05-01/2021-06-30\" ) |> post_request () col_2020 = stac_image_collection ( items_2020 $ features , asset_names = assets ) col_2021 = stac_image_collection ( items_2021 $ features , asset_names = assets ) v_2020 = cube_view ( srs = \"EPSG:32720\" , extent = list ( t0 = \"2020-05-01\" , t1 = \"2020-06-30\" , left = bbox_32720_boulder [ \"xmin\" ], right = bbox_32720_boulder [ \"xmax\" ], top = bbox_32720_boulder [ \"ymax\" ], bottom = bbox_32720_boulder [ \"ymin\" ]), dx = 100 , dy = 100 , dt = \"P1D\" , aggregation = \"median\" , resampling = \"bilinear\" ) v_2021 = cube_view ( v_2020 , extent = list ( t0 = \"2021-05-01\" , t1 = \"2021-06-30\" )) max_ndvi_mosaic <- function ( col , v ) { raster_cube ( col , v ) |> select_bands ( c ( \"B04\" , \"B08\" )) |> apply_pixel ( c ( \"(B08-B04)/(B08+B04)\" ), names = \"NDVI\" ) |> reduce_time ( \"max(NDVI)\" ) } suppressPackageStartupMessages ( library ( stars )) max_ndvi_mosaic ( col_2020 , v_2020 ) -> maxndvi_2020 max_ndvi_mosaic ( col_2021 , v_2021 ) -> maxndvi_2021 maxndvi_2021 maxndvi_2020 difference = maxndvi_2021 - maxndvi_2020 difference [ difference > -0.15 ] = NA names ( difference ) <- \"Difference of max NDVI (2020 - 2019)\" flood_polygon_data3 <- glue ( \"/vsizip/vsicurl/https://data.hydrosheds.org/file/hydrosheds-associated/gloric/GloRiC_v10_shapefile.zip/GloRiC_v10_shapefile/GloRiC_v10.shp\" ) |> st_read () |> st_as_sf ( coords = c ( \"lon\" , \"lat\" )) flood_polygon_data3 #st_read(\"/Users/ty/Downloads/GloRiC_v10_geodatabase/GloRiC_v10.gdb\") flood_polygon_data3 <- glue ( \"/vsizip/vsicurl/https://data.hydrosheds.org/file/hydrosheds-associated/gloric/GloRiC_v10_geodatabase.zip/GloRiC_v10_geodatabase/GloRiC_v10.gdb\" ) |> st_read () |> st_as_sf ( coords = c ( \"lon\" , \"lat\" )) flood_polygon_data3","title":"Mounting data"},{"location":"data-library/stac_simple/","text":"Accessing data via STAC \u00b6 ESIIL, 2024 Ty Tuff & Tyler McIntosh SpatioTemporal Asset Catalog, is an open-source specification designed to standardize the way geospatial data is indexed and discovered. Developed by Element 84 among others, it facilitates better interoperability and sharing of geospatial assets by providing a common language for describing them. STAC\u2019s flexible design allows for easy cataloging of data, making it simpler for individuals and systems to search and retrieve geospatial information. By effectively organizing data about the Earth\u2019s spatial and temporal characteristics, STAC enables users to harness the full power of the cloud and modern data processing technologies, optimizing the way we access and analyze environmental data on a global scale. Element 84\u2019s Earth Search is a STAC compliant search and discovery API that offers users access to a vast collection of geospatial open datasets hosted on AWS. It serves as a centralized search catalog providing standardized metadata for these open datasets, designed to be freely used and integrated into various applications. Alongside the API, Element 84 also provides a web application named Earth Search Console, which is map-centric and allows users to explore and visualize the data contained within the Earth Search API\u2019s catalog. This suite of tools is part of Element 84\u2019s initiative to make geospatial data more accessible and actionable for a wide range of users and applications. First, we need an area of interest \u00b6 require(glue) require(sf) require(gdalcubes) require(rstac) #Access ecoregiosn via VSI epa_l3 <- glue::glue( \"/vsizip/vsicurl/\", #magic remote connection \"https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip\", #copied link to download location \"/us_eco_l3.shp\") |> #path inside zip file sf::st_read() #Get just S.Rockies and ensure that it is in EPSG:4326 southernRockies <- epa_l3 |> dplyr::filter(US_L3NAME == \"Southern Rockies\") |> dplyr::group_by(US_L3NAME) |> dplyr::summarize(geometry = sf::st_union(geometry)) |> sf::st_transform(\"EPSG:4326\") bboxSR4326 <- sf::st_bbox(southernRockies) To access data from STAC correctly, we need to request the data in a projected CRS. southernRockies <- southernRockies |> sf::st_transform(\"EPSG:32613\") bboxSRproj <- sf::st_bbox(southernRockies) Search the STAC catalog \u00b6 To get information about a STAC archive, you can use rstac::get_request(). You can also use gdalcubes::collection_formats() to see various collection formats that you may encounter. To search a STAC catalog online, stacindex.org is a useful tool. For example, here is the page for the Earth Search catalog by Element84 that we will use. stac(\"https://earth-search.aws.element84.com/v1\") |> get_request() ## ###STACCatalog ## - id: earth-search-aws ## - description: A STAC API of public datasets on AWS ## - field(s): stac_version, type, id, title, description, links, conformsTo collection_formats() Initialize a STAC connection (rstac::stac()) and search for data that you are interested in (rstac::stac_search()). Note that you will request a spatial area of interest as well as a temporal window of interest. To get more information on the data and how it is structured, you can examine the 'items' object we create. # Record start time a <- Sys.time() # Initialize STAC connection s = rstac::stac(\"https://earth-search.aws.element84.com/v0\") # Search for Sentinel-2 images within specified bounding box and date range #22 Million items items = s |> rstac::stac_search(collections = \"sentinel-s2-l2a-cogs\", bbox = c(bboxSR4326[\"xmin\"], bboxSR4326[\"ymin\"], bboxSR4326[\"xmax\"], bboxSR4326[\"ymax\"]), datetime = \"2021-05-15/2021-05-16\") |> post_request() |> items_fetch(progress = FALSE) # Print number of found items length(items$features) items There is data we want! Now, we need to prepare the assets for us to access. We will list the assets we want, and set any property filters that we would like to apply. # Prepare the assets for analysis library(gdalcubes) assets = c(\"B01\", \"B02\", \"B03\", \"B04\", \"B05\", \"B06\", \"B07\", \"B08\", \"B8A\", \"B09\", \"B11\", \"B12\", \"SCL\") s2_collection = gdalcubes::stac_image_collection(items$features, asset_names = assets, property_filter = function(x) {x[[\"eo:cloud_cover\"]] < 20}) #all images with less than 20% clouds b <- Sys.time() difftime(b, a) # Display the image collection s2_collection Access the data \u00b6 First, we need to set up our view on the collection. We will set our spatial and temporal resolution, as well as how we want the data temporally aggregated and spatially resampled. We then also set our spatial and temporal window. Note that the spatial extent here should be in a projected CRS! # Record start time a <- Sys.time() # Define a specific view on the satellite image collection v = gdalcubes::cube_view( srs = \"EPSG:32613\", dx = 100, dy = 100, dt = \"P1M\", aggregation = \"median\", resampling = \"near\", extent = list( t0 = \"2021-05-15\", t1 = \"2021-05-16\", left = bboxSRproj[1], right = bboxSRproj[2], top = bboxSRproj[4], bottom = bboxSRproj[3] ) ) b <- Sys.time() difftime(b, a) # Display the defined view v Finally, let's take our snapshot of the data! Let's also calculate NDVI and then view the data. ``` Record start time \u00b6 a <- Sys.time() s2_collection |> raster_cube(v) |> select_bands(c( \"B04\", \"B05\")) |> apply_pixel(c(\"(B05-B04)/(B05+B04)\"), names=\"NDVI\") |> write_tif() |> raster::stack() -> x View the product \u00b6 x b <- Sys.time() difftime(b, a) Let's view the dat \u00b6 mapview::mapview(x, layer.name = \"NDVI\") + mapview::mapview(southernRockies)","title":"Stream data (light)"},{"location":"data-library/stac_simple/#accessing-data-via-stac","text":"ESIIL, 2024 Ty Tuff & Tyler McIntosh SpatioTemporal Asset Catalog, is an open-source specification designed to standardize the way geospatial data is indexed and discovered. Developed by Element 84 among others, it facilitates better interoperability and sharing of geospatial assets by providing a common language for describing them. STAC\u2019s flexible design allows for easy cataloging of data, making it simpler for individuals and systems to search and retrieve geospatial information. By effectively organizing data about the Earth\u2019s spatial and temporal characteristics, STAC enables users to harness the full power of the cloud and modern data processing technologies, optimizing the way we access and analyze environmental data on a global scale. Element 84\u2019s Earth Search is a STAC compliant search and discovery API that offers users access to a vast collection of geospatial open datasets hosted on AWS. It serves as a centralized search catalog providing standardized metadata for these open datasets, designed to be freely used and integrated into various applications. Alongside the API, Element 84 also provides a web application named Earth Search Console, which is map-centric and allows users to explore and visualize the data contained within the Earth Search API\u2019s catalog. This suite of tools is part of Element 84\u2019s initiative to make geospatial data more accessible and actionable for a wide range of users and applications.","title":"Accessing data via STAC"},{"location":"data-library/stac_simple/#first-we-need-an-area-of-interest","text":"require(glue) require(sf) require(gdalcubes) require(rstac) #Access ecoregiosn via VSI epa_l3 <- glue::glue( \"/vsizip/vsicurl/\", #magic remote connection \"https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip\", #copied link to download location \"/us_eco_l3.shp\") |> #path inside zip file sf::st_read() #Get just S.Rockies and ensure that it is in EPSG:4326 southernRockies <- epa_l3 |> dplyr::filter(US_L3NAME == \"Southern Rockies\") |> dplyr::group_by(US_L3NAME) |> dplyr::summarize(geometry = sf::st_union(geometry)) |> sf::st_transform(\"EPSG:4326\") bboxSR4326 <- sf::st_bbox(southernRockies) To access data from STAC correctly, we need to request the data in a projected CRS. southernRockies <- southernRockies |> sf::st_transform(\"EPSG:32613\") bboxSRproj <- sf::st_bbox(southernRockies)","title":"First, we need an area of interest"},{"location":"data-library/stac_simple/#search-the-stac-catalog","text":"To get information about a STAC archive, you can use rstac::get_request(). You can also use gdalcubes::collection_formats() to see various collection formats that you may encounter. To search a STAC catalog online, stacindex.org is a useful tool. For example, here is the page for the Earth Search catalog by Element84 that we will use. stac(\"https://earth-search.aws.element84.com/v1\") |> get_request() ## ###STACCatalog ## - id: earth-search-aws ## - description: A STAC API of public datasets on AWS ## - field(s): stac_version, type, id, title, description, links, conformsTo collection_formats() Initialize a STAC connection (rstac::stac()) and search for data that you are interested in (rstac::stac_search()). Note that you will request a spatial area of interest as well as a temporal window of interest. To get more information on the data and how it is structured, you can examine the 'items' object we create. # Record start time a <- Sys.time() # Initialize STAC connection s = rstac::stac(\"https://earth-search.aws.element84.com/v0\") # Search for Sentinel-2 images within specified bounding box and date range #22 Million items items = s |> rstac::stac_search(collections = \"sentinel-s2-l2a-cogs\", bbox = c(bboxSR4326[\"xmin\"], bboxSR4326[\"ymin\"], bboxSR4326[\"xmax\"], bboxSR4326[\"ymax\"]), datetime = \"2021-05-15/2021-05-16\") |> post_request() |> items_fetch(progress = FALSE) # Print number of found items length(items$features) items There is data we want! Now, we need to prepare the assets for us to access. We will list the assets we want, and set any property filters that we would like to apply. # Prepare the assets for analysis library(gdalcubes) assets = c(\"B01\", \"B02\", \"B03\", \"B04\", \"B05\", \"B06\", \"B07\", \"B08\", \"B8A\", \"B09\", \"B11\", \"B12\", \"SCL\") s2_collection = gdalcubes::stac_image_collection(items$features, asset_names = assets, property_filter = function(x) {x[[\"eo:cloud_cover\"]] < 20}) #all images with less than 20% clouds b <- Sys.time() difftime(b, a) # Display the image collection s2_collection","title":"Search the STAC catalog"},{"location":"data-library/stac_simple/#access-the-data","text":"First, we need to set up our view on the collection. We will set our spatial and temporal resolution, as well as how we want the data temporally aggregated and spatially resampled. We then also set our spatial and temporal window. Note that the spatial extent here should be in a projected CRS! # Record start time a <- Sys.time() # Define a specific view on the satellite image collection v = gdalcubes::cube_view( srs = \"EPSG:32613\", dx = 100, dy = 100, dt = \"P1M\", aggregation = \"median\", resampling = \"near\", extent = list( t0 = \"2021-05-15\", t1 = \"2021-05-16\", left = bboxSRproj[1], right = bboxSRproj[2], top = bboxSRproj[4], bottom = bboxSRproj[3] ) ) b <- Sys.time() difftime(b, a) # Display the defined view v Finally, let's take our snapshot of the data! Let's also calculate NDVI and then view the data. ```","title":"Access the data"},{"location":"data-library/stac_simple/#record-start-time","text":"a <- Sys.time() s2_collection |> raster_cube(v) |> select_bands(c( \"B04\", \"B05\")) |> apply_pixel(c(\"(B05-B04)/(B05+B04)\"), names=\"NDVI\") |> write_tif() |> raster::stack() -> x","title":"Record start time"},{"location":"data-library/stac_simple/#view-the-product","text":"x b <- Sys.time() difftime(b, a)","title":"View the product"},{"location":"data-library/stac_simple/#lets-view-the-dat","text":"mapview::mapview(x, layer.name = \"NDVI\") + mapview::mapview(southernRockies)","title":"Let's view the dat"},{"location":"data-library/treemap/","text":"TreeMap \u00b6 TreeMap 2016 is a USFS tree-level model of the forests of the conterminous United States created by using machine learning algorithms to match forest plot data from Forest Inventory and Analysis (FIA) to a 30x30 meter (m) grid. The main output of this project is a raster map of imputed plot identifiers at 30\u00d730 m spatial resolution for the conterminous U.S. for landscape conditions circa 2016. The plot identifiers can be associated with data from FIA plots held in the associated csv and SQL files. An overview of the data product can be found here. The TreeMap data dictionary PDF can be found here. A portion of the TreeMap dataset covering the Southern Rockies has been prepared and placed in the CyVerse data store at the below directroy. The associated CSV and SQL DB files are in the same location. A script showing how to access it, as well as how the raster was accessed, is available in the code repository, as well as copied below. ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/TreeMap # This script demonstrates how to open and access pre-downloaded TreeMap data from the data store # It also, at the bottom, shows how the data was accessed via VSI. # A similar approach could be used to access the SnagHazard data in the zip file via VSI if desired. (Path inside zip: Data/SnagHazard2016.tif) # ESIIL, 2024 # Tyler L. McIntosh require ( terra ) #Move data from data store to instance system ( \"cp -r ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/TreeMap ~/TreeMap \" ) #Open the raster treemap <- terra :: rast ( \"~/TreeMap/treemap2016_southernrockies.tif\" ) terra :: plot ( treemap ) #Open the csv treemapCsv <- readr :: read_csv ( \"~/TreeMap/TreeMap2016_tree_table.csv\" ) head ( treemapCsv ) ####################################################### # DATA ACCESS SCRIPT ####################################################### # Access treemap data, crop to southern rockies, and save to data store require ( glue ) require ( terra ) require ( sf ) #Access EPA L3 data for cropping epa_l3 <- glue :: glue ( \"/vsizip/vsicurl/\" , #magic remote connection \"https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip\" , #copied link to download location \"/us_eco_l3.shp\" ) |> #path inside zip file sf :: st_read () #get just S.Rockies southernRockies <- epa_l3 |> dplyr :: filter ( US_L3NAME == \"Southern Rockies\" ) |> dplyr :: group_by ( US_L3NAME ) |> dplyr :: summarize ( geometry = sf :: st_union ( geometry )) #Access treemap data treemap <- glue :: glue ( \"/vsizip/vsicurl/\" , #magic remote connection \"https://s3-us-west-2.amazonaws.com/fs.usda.rds/RDS-2021-0074/RDS-2021-0074_Data.zip\" , #copied link to download location \"/Data/TreeMap2016.tif\" ) |> #path inside zip file terra :: rast () #Crop to s.rockies treemapSR <- treemap |> terra :: crop ( southernRockies , mask = FALSE ) #check data terra :: plot ( treemapSR ) #Write to instance terra :: writeRaster ( treemapSR , filename = '~/treemap2016_southernrockies.tif' , overwrite = TRUE , gdal = c ( \"COMPRESS=DEFLATE\" )) #Move data to data store system ( \"cp ~/treemap2016_southernrockies.tif ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/TreeMap/treemap2016_southernrockies_again.tif \" )","title":"TreeMap"},{"location":"data-library/treemap/#treemap","text":"TreeMap 2016 is a USFS tree-level model of the forests of the conterminous United States created by using machine learning algorithms to match forest plot data from Forest Inventory and Analysis (FIA) to a 30x30 meter (m) grid. The main output of this project is a raster map of imputed plot identifiers at 30\u00d730 m spatial resolution for the conterminous U.S. for landscape conditions circa 2016. The plot identifiers can be associated with data from FIA plots held in the associated csv and SQL files. An overview of the data product can be found here. The TreeMap data dictionary PDF can be found here. A portion of the TreeMap dataset covering the Southern Rockies has been prepared and placed in the CyVerse data store at the below directroy. The associated CSV and SQL DB files are in the same location. A script showing how to access it, as well as how the raster was accessed, is available in the code repository, as well as copied below. ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/TreeMap # This script demonstrates how to open and access pre-downloaded TreeMap data from the data store # It also, at the bottom, shows how the data was accessed via VSI. # A similar approach could be used to access the SnagHazard data in the zip file via VSI if desired. (Path inside zip: Data/SnagHazard2016.tif) # ESIIL, 2024 # Tyler L. McIntosh require ( terra ) #Move data from data store to instance system ( \"cp -r ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/TreeMap ~/TreeMap \" ) #Open the raster treemap <- terra :: rast ( \"~/TreeMap/treemap2016_southernrockies.tif\" ) terra :: plot ( treemap ) #Open the csv treemapCsv <- readr :: read_csv ( \"~/TreeMap/TreeMap2016_tree_table.csv\" ) head ( treemapCsv ) ####################################################### # DATA ACCESS SCRIPT ####################################################### # Access treemap data, crop to southern rockies, and save to data store require ( glue ) require ( terra ) require ( sf ) #Access EPA L3 data for cropping epa_l3 <- glue :: glue ( \"/vsizip/vsicurl/\" , #magic remote connection \"https://gaftp.epa.gov/EPADataCommons/ORD/Ecoregions/us/us_eco_l3.zip\" , #copied link to download location \"/us_eco_l3.shp\" ) |> #path inside zip file sf :: st_read () #get just S.Rockies southernRockies <- epa_l3 |> dplyr :: filter ( US_L3NAME == \"Southern Rockies\" ) |> dplyr :: group_by ( US_L3NAME ) |> dplyr :: summarize ( geometry = sf :: st_union ( geometry )) #Access treemap data treemap <- glue :: glue ( \"/vsizip/vsicurl/\" , #magic remote connection \"https://s3-us-west-2.amazonaws.com/fs.usda.rds/RDS-2021-0074/RDS-2021-0074_Data.zip\" , #copied link to download location \"/Data/TreeMap2016.tif\" ) |> #path inside zip file terra :: rast () #Crop to s.rockies treemapSR <- treemap |> terra :: crop ( southernRockies , mask = FALSE ) #check data terra :: plot ( treemapSR ) #Write to instance terra :: writeRaster ( treemapSR , filename = '~/treemap2016_southernrockies.tif' , overwrite = TRUE , gdal = c ( \"COMPRESS=DEFLATE\" )) #Move data to data store system ( \"cp ~/treemap2016_southernrockies.tif ~/data-store/data/iplant/home/shared/earthlab/forest_carbon_codefest/TreeMap/treemap2016_southernrockies_again.tif \" )","title":"TreeMap"},{"location":"project-documentation/methods/","text":"Project methods overview \u00b6 Data Sources \u00b6 List and describe data sources used, including links to cloud-optimized sources. Highlight permissions and compliance with data ownership guidelines. Data Processing Steps \u00b6 Describe data processing steps taken, the order of scripts, etc. Data Analysis \u00b6 Describe steps taken to analyze data and resulting files in team data store file structure. Visualizations \u00b6 Describe visualizations created and any specialized techniques or libraries that users should be aware of. Conclusions \u00b6 Summary of the full workflow and its outcomes. Reflect on the methods used. References \u00b6 Citations of tools, data sources, and other references used.","title":"Project methods overview"},{"location":"project-documentation/methods/#project-methods-overview","text":"","title":"Project methods overview"},{"location":"project-documentation/methods/#data-sources","text":"List and describe data sources used, including links to cloud-optimized sources. Highlight permissions and compliance with data ownership guidelines.","title":"Data Sources"},{"location":"project-documentation/methods/#data-processing-steps","text":"Describe data processing steps taken, the order of scripts, etc.","title":"Data Processing Steps"},{"location":"project-documentation/methods/#data-analysis","text":"Describe steps taken to analyze data and resulting files in team data store file structure.","title":"Data Analysis"},{"location":"project-documentation/methods/#visualizations","text":"Describe visualizations created and any specialized techniques or libraries that users should be aware of.","title":"Visualizations"},{"location":"project-documentation/methods/#conclusions","text":"Summary of the full workflow and its outcomes. Reflect on the methods used.","title":"Conclusions"},{"location":"project-documentation/methods/#references","text":"Citations of tools, data sources, and other references used.","title":"References"},{"location":"project-documentation/project-notes/","text":"Project discussion notes \u00b6 Virtual meeting #3 \u00b6 Team theme, tentative area of interest, or question: \u00b6 Day 1: March 12, 2024 - CU Boulder \u00b6 Selected scientific question: \u00b6 Day 2: March 13, 2024 - CU Boulder \u00b6 Day 3: March 14, 2024 - CU Boulder \u00b6","title":"Project discussion notes"},{"location":"project-documentation/project-notes/#project-discussion-notes","text":"","title":"Project discussion notes"},{"location":"project-documentation/project-notes/#virtual-meeting-3","text":"","title":"Virtual meeting #3"},{"location":"project-documentation/project-notes/#team-theme-tentative-area-of-interest-or-question","text":"","title":"Team theme, tentative area of interest, or question:"},{"location":"project-documentation/project-notes/#day-1-march-12-2024-cu-boulder","text":"","title":"Day 1: March 12, 2024 - CU Boulder"},{"location":"project-documentation/project-notes/#selected-scientific-question","text":"","title":"Selected scientific question:"},{"location":"project-documentation/project-notes/#day-2-march-13-2024-cu-boulder","text":"","title":"Day 2: March 13, 2024 - CU Boulder"},{"location":"project-documentation/project-notes/#day-3-march-14-2024-cu-boulder","text":"","title":"Day 3: March 14, 2024 - CU Boulder"},{"location":"project-documentation/project-presentation/","text":"Project presentation overview \u00b6 All project presentation materials should be made available on this page. Your team may present directly from this page if you would like to; alternatively, if you would prefer to use slides to present, please make sure to export your team's slides as a PDF, add them to your GitHub, and add the link to that PDF here below. Presentation \u00b6","title":"Project presentation overview"},{"location":"project-documentation/project-presentation/#project-presentation-overview","text":"All project presentation materials should be made available on this page. Your team may present directly from this page if you would like to; alternatively, if you would prefer to use slides to present, please make sure to export your team's slides as a PDF, add them to your GitHub, and add the link to that PDF here below.","title":"Project presentation overview"},{"location":"project-documentation/project-presentation/#presentation","text":"","title":"Presentation"},{"location":"resources/art%20gallery/","text":"science art \u00b6 2024-01-25 Ty\u2019s art opinion \u00b6 In the context of the ongoing discussions for the redesign of our ESIIL office space, I would like to offer my personal perspective on the art and aesthetic that might enrich our environment: Urban Realism with a Personal Touch : I have a strong appreciation for artworks that reflect a realistic depiction of nature and urban life but with an imaginative twist. Art that integrates with and elevates our daily surroundings could offer a fresh perspective on the mundane. Nature in the Workplace : On a personal note, I find that art which brings elements of the outdoors inside can create a serene and motivating atmosphere, conducive to the values of sustainability that ESIIL embodies. Interactive Art : I believe that art installations which invite interaction or present a playful exaggeration of reality can energize our space. They have the potential to foster a creative dialogue among the team and with visitors. Dimensionality and Engagement : From my viewpoint, art that breaks out of the traditional two-dimensional space and engages with the viewer in three dimensions can transform the feel of an office. Such dynamic pieces could encourage innovative thinking and collaboration. Art with a Message : It\u2019s my opinion that the art we choose should subtly reflect our collective social and environmental commitments. Pieces that prompt introspection about our role in larger societal issues could resonate well with our team\u2019s ethos. Community Connection : Lastly, I feel that our office should not just be a place for work but also a space that invites community interaction. Art can be a bridge between ESIIL and the public, making our office a hub for inspiration and engagement.","title":"science art"},{"location":"resources/art%20gallery/#science-art","text":"2024-01-25","title":"science art"},{"location":"resources/art%20gallery/#tys-art-opinion","text":"In the context of the ongoing discussions for the redesign of our ESIIL office space, I would like to offer my personal perspective on the art and aesthetic that might enrich our environment: Urban Realism with a Personal Touch : I have a strong appreciation for artworks that reflect a realistic depiction of nature and urban life but with an imaginative twist. Art that integrates with and elevates our daily surroundings could offer a fresh perspective on the mundane. Nature in the Workplace : On a personal note, I find that art which brings elements of the outdoors inside can create a serene and motivating atmosphere, conducive to the values of sustainability that ESIIL embodies. Interactive Art : I believe that art installations which invite interaction or present a playful exaggeration of reality can energize our space. They have the potential to foster a creative dialogue among the team and with visitors. Dimensionality and Engagement : From my viewpoint, art that breaks out of the traditional two-dimensional space and engages with the viewer in three dimensions can transform the feel of an office. Such dynamic pieces could encourage innovative thinking and collaboration. Art with a Message : It\u2019s my opinion that the art we choose should subtly reflect our collective social and environmental commitments. Pieces that prompt introspection about our role in larger societal issues could resonate well with our team\u2019s ethos. Community Connection : Lastly, I feel that our office should not just be a place for work but also a space that invites community interaction. Art can be a bridge between ESIIL and the public, making our office a hub for inspiration and engagement.","title":"Ty\u2019s art opinion"},{"location":"resources/citations/","text":"Citation Management and Notes Collection in Markdown \u00b6 Introduction \u00b6 This document serves as a guide for managing citations and collecting research notes for our project. We'll use a combination of a .bib file for bibliographic references and Markdown for note-taking. Part 1: Setting Up Your .bib File for Citations \u00b6 Creating a .bib File \u00b6 Create a new file with a .bib extension, for example, project_references.bib . Add bibliographic entries to this file. Each entry should follow the BibTeX format. Example of a .bib Entry \u00b6 ```bibtex @article {Doe2021, author = {Jane Doe and John Smith}, title = {Insights into Environmental Data Science}, journal = {Journal of Data Science}, year = {2021}, volume = {15}, number = {4}, pages = {123-145}, doi = {10.1000/jds.2021.15.4} } Part 2: Using Citations in Markdown \u00b6 Citing in Your Markdown Document \u00b6 Refer to works in your .bib file using citation keys, like [@Doe2021] . Converting Markdown to PDF with Citations \u00b6 Use Pandoc: pandoc yourdoc.md --bibliography=project_references.bib --citeproc -o output.pdf Part 3: Collecting Citations and Research Notes \u00b6 Structuring Your Notes \u00b6 Notes on Doe 2021 [@Doe2021] \u00b6 Key Points: Summary of the article's main arguments. Notable methodologies. Relevance to Our Project: How this research informs our project. Applicable methodologies or theories. Notes on Another Article [@Another2021] \u00b6 Key Points: ... Relevance to Our Project: ... Conclusion \u00b6 This document facilitates efficient management of references and collaborative knowledge building for our project.","title":"Citation Management and Notes Collection in Markdown"},{"location":"resources/citations/#citation-management-and-notes-collection-in-markdown","text":"","title":"Citation Management and Notes Collection in Markdown"},{"location":"resources/citations/#introduction","text":"This document serves as a guide for managing citations and collecting research notes for our project. We'll use a combination of a .bib file for bibliographic references and Markdown for note-taking.","title":"Introduction"},{"location":"resources/citations/#part-1-setting-up-your-bib-file-for-citations","text":"","title":"Part 1: Setting Up Your .bib File for Citations"},{"location":"resources/citations/#creating-a-bib-file","text":"Create a new file with a .bib extension, for example, project_references.bib . Add bibliographic entries to this file. Each entry should follow the BibTeX format.","title":"Creating a .bib File"},{"location":"resources/citations/#example-of-a-bib-entry","text":"```bibtex @article {Doe2021, author = {Jane Doe and John Smith}, title = {Insights into Environmental Data Science}, journal = {Journal of Data Science}, year = {2021}, volume = {15}, number = {4}, pages = {123-145}, doi = {10.1000/jds.2021.15.4} }","title":"Example of a .bib Entry"},{"location":"resources/citations/#part-2-using-citations-in-markdown","text":"","title":"Part 2: Using Citations in Markdown"},{"location":"resources/citations/#citing-in-your-markdown-document","text":"Refer to works in your .bib file using citation keys, like [@Doe2021] .","title":"Citing in Your Markdown Document"},{"location":"resources/citations/#converting-markdown-to-pdf-with-citations","text":"Use Pandoc: pandoc yourdoc.md --bibliography=project_references.bib --citeproc -o output.pdf","title":"Converting Markdown to PDF with Citations"},{"location":"resources/citations/#part-3-collecting-citations-and-research-notes","text":"","title":"Part 3: Collecting Citations and Research Notes"},{"location":"resources/citations/#structuring-your-notes","text":"","title":"Structuring Your Notes"},{"location":"resources/citations/#notes-on-doe-2021-doe2021","text":"Key Points: Summary of the article's main arguments. Notable methodologies. Relevance to Our Project: How this research informs our project. Applicable methodologies or theories.","title":"Notes on Doe 2021 [@Doe2021]"},{"location":"resources/citations/#notes-on-another-article-another2021","text":"Key Points: ... Relevance to Our Project: ...","title":"Notes on Another Article [@Another2021]"},{"location":"resources/citations/#conclusion","text":"This document facilitates efficient management of references and collaborative knowledge building for our project.","title":"Conclusion"},{"location":"resources/cyverse_basics/","text":"Connecting Cyverse to GitHub \u00b6 Log in to Cyverse \u00b6 Go to the Cyverse user account website https://user.cyverse.org/ Click Sign up (if you do not already have an account) Head over to the Cyverse Discovery Environment https://de.cyverse.org , and log in with your new account. You should now see the Discovery Environment: We will give you permissions to access the Hackathon app. If you haven't already, let us know that you need access Open up an analysis with the hackathon environment (Jupyter Lab) \u00b6 From the Cyverse Discovery Environment, click on Apps in the left menu Select JupyterLab ESIIL Configure and launch your analysis - when choosing the disk size, make sure to choose 64GB or greater. The rest of the settings you can change to suit your computing needs: Click Go to analysis : Now you should see Jupyter Lab! Set up your GitHub credentials \u00b6 If you would prefer to follow a video instead of a written outline, we have prepared a video here: \u00b6 From Jupyter Lab, click on the Git Extension icon on the left menu: Click Clone a Repository and Paste the link to the cyverse-utils https://github.com/CU-ESIIL/cyverse-utils.git and click Clone : You should now see the cyverse-utils folder in your directory tree (provided you haven't changed directories from the default /home/jovyan/data-store Go into the cyverse-utils folder: open up the create_github_keypair.ipynb notebook if you prefer Python or the 'create_github_keypair.R' script if you prefer R by double-clicking and then select the default 'macrosystems' kernel: Now you should see the notebook open. Click the play button at the top. You will be prompted to enter your GitHub username and email: You should now see your Public Key. Copy the WHOLE LINE including ssh-ed25519 at the beginning and the jovyan@... at the end Go to your GitHub settings page (you may need to log in to GitHub first): Select SSH and GPG keys Select New SSH key Give your key a descriptive name, paste your ENTIRE public key in the Key input box, and click Add SSH Key . You may need to re-authenticate with your password or two-factor authentication.: You should now see your new SSH key in your Authentication Keys list! Now you will be able to clone private repositories and push changes to GitHub from your Cyverse analysis! NOTE! Your GitHub authentication is ONLY for the analysis you're working with right now. You will be able to use it as long as you want there, but once you start a new analysis you will need to go through this process again. Feel free to delete keys from old analyses that have been shut down.","title":"Cyverse"},{"location":"resources/cyverse_basics/#connecting-cyverse-to-github","text":"","title":"Connecting Cyverse to GitHub"},{"location":"resources/cyverse_basics/#log-in-to-cyverse","text":"Go to the Cyverse user account website https://user.cyverse.org/ Click Sign up (if you do not already have an account) Head over to the Cyverse Discovery Environment https://de.cyverse.org , and log in with your new account. You should now see the Discovery Environment: We will give you permissions to access the Hackathon app. If you haven't already, let us know that you need access","title":"Log in to Cyverse"},{"location":"resources/cyverse_basics/#open-up-an-analysis-with-the-hackathon-environment-jupyter-lab","text":"From the Cyverse Discovery Environment, click on Apps in the left menu Select JupyterLab ESIIL Configure and launch your analysis - when choosing the disk size, make sure to choose 64GB or greater. The rest of the settings you can change to suit your computing needs: Click Go to analysis : Now you should see Jupyter Lab!","title":"Open up an analysis with the hackathon environment (Jupyter Lab)"},{"location":"resources/cyverse_basics/#set-up-your-github-credentials","text":"","title":"Set up your GitHub credentials"},{"location":"resources/cyverse_basics/#if-you-would-prefer-to-follow-a-video-instead-of-a-written-outline-we-have-prepared-a-video-here","text":"From Jupyter Lab, click on the Git Extension icon on the left menu: Click Clone a Repository and Paste the link to the cyverse-utils https://github.com/CU-ESIIL/cyverse-utils.git and click Clone : You should now see the cyverse-utils folder in your directory tree (provided you haven't changed directories from the default /home/jovyan/data-store Go into the cyverse-utils folder: open up the create_github_keypair.ipynb notebook if you prefer Python or the 'create_github_keypair.R' script if you prefer R by double-clicking and then select the default 'macrosystems' kernel: Now you should see the notebook open. Click the play button at the top. You will be prompted to enter your GitHub username and email: You should now see your Public Key. Copy the WHOLE LINE including ssh-ed25519 at the beginning and the jovyan@... at the end Go to your GitHub settings page (you may need to log in to GitHub first): Select SSH and GPG keys Select New SSH key Give your key a descriptive name, paste your ENTIRE public key in the Key input box, and click Add SSH Key . You may need to re-authenticate with your password or two-factor authentication.: You should now see your new SSH key in your Authentication Keys list! Now you will be able to clone private repositories and push changes to GitHub from your Cyverse analysis! NOTE! Your GitHub authentication is ONLY for the analysis you're working with right now. You will be able to use it as long as you want there, but once you start a new analysis you will need to go through this process again. Feel free to delete keys from old analyses that have been shut down.","title":"If you would prefer to follow a video instead of a written outline, we have prepared a video here:"},{"location":"resources/cyverse_hacks/","text":"Cyverse fixes \u00b6 Earth Lab Data Storage \u00b6 Path: /home/jovyan/data-store/iplant/home/shared/earthlab/ Ensure your project has a directory within the Earth Lab data storage. Setup \u00b6 CyVerse Account: Create an account if not already owned. Contact Tyson for account upgrades after maximizing current limits. GitHub Connection \u00b6 Follow Elsa Culler's guide for connecting GitHub to CyVerse. Select \u201cJupyterLab ESIIL\u201d and choose \u201cmacrosystems\u201d in the version dropdown. Clone into /home/jovyan/data-store . Clone innovation-summit-utils for SSH connection to GitHub. Run conda install -c conda-forge openssh in the terminal if encountering errors. GitHub authentication is session-specific. RStudio in DE \u00b6 Copy your instance ID. It can be found in your analyis URL in form https:// .cyverse.run/lab. Use your ID in these links: https://<id>.cyverse.run/rstudio/auth-sign-in https://<id>.cyverse.run/rstudio/ Package Requests \u00b6 List desired packages here for future container updates. Data Transfer to CyVerse \u00b6 Use GoCommands for HPC/CyVerse transfers. Installation: Linux: (Command) Windows Powershell: (Command) Usage: Use put for upload and get for download. Ensure correct CyVerse directory path.","title":"Cyverse hacks"},{"location":"resources/cyverse_hacks/#cyverse-fixes","text":"","title":"Cyverse fixes"},{"location":"resources/cyverse_hacks/#earth-lab-data-storage","text":"Path: /home/jovyan/data-store/iplant/home/shared/earthlab/ Ensure your project has a directory within the Earth Lab data storage.","title":"Earth Lab Data Storage"},{"location":"resources/cyverse_hacks/#setup","text":"CyVerse Account: Create an account if not already owned. Contact Tyson for account upgrades after maximizing current limits.","title":"Setup"},{"location":"resources/cyverse_hacks/#github-connection","text":"Follow Elsa Culler's guide for connecting GitHub to CyVerse. Select \u201cJupyterLab ESIIL\u201d and choose \u201cmacrosystems\u201d in the version dropdown. Clone into /home/jovyan/data-store . Clone innovation-summit-utils for SSH connection to GitHub. Run conda install -c conda-forge openssh in the terminal if encountering errors. GitHub authentication is session-specific.","title":"GitHub Connection"},{"location":"resources/cyverse_hacks/#rstudio-in-de","text":"Copy your instance ID. It can be found in your analyis URL in form https:// .cyverse.run/lab. Use your ID in these links: https://<id>.cyverse.run/rstudio/auth-sign-in https://<id>.cyverse.run/rstudio/","title":"RStudio in DE"},{"location":"resources/cyverse_hacks/#package-requests","text":"List desired packages here for future container updates.","title":"Package Requests"},{"location":"resources/cyverse_hacks/#data-transfer-to-cyverse","text":"Use GoCommands for HPC/CyVerse transfers. Installation: Linux: (Command) Windows Powershell: (Command) Usage: Use put for upload and get for download. Ensure correct CyVerse directory path.","title":"Data Transfer to CyVerse"},{"location":"resources/cyverse_move_and_save_data/","text":"Connecting Cyverse to GitHub \u00b6 Log in to Cyverse \u00b6 Go to the Cyverse user account website https://user.cyverse.org/ Click Sign up (if you do not already have an account) Head over to the Cyverse Discovery Environment https://de.cyverse.org , and log in with your new account. You should now see the Discovery Environment: We will give you permissions to access the Hackathon app. If you haven't already, let us know that you need access Open up an analysis with the hackathon environment (Jupyter Lab) \u00b6 From the Cyverse Discovery Environment, click on Apps in the left menu Select JupyterLab ESIIL Configure and launch your analysis - when choosing the disk size, make sure to choose 64GB or greater. The rest of the settings you can change to suit your computing needs: Click Go to analysis : Now you should see Jupyter Lab! Set up your GitHub credentials \u00b6 If you would prefer to follow a video instead of a written outline, we have prepared a video here: \u00b6 From Jupyter Lab, click on the Git Extension icon on the left menu: Click Clone a Repository and Paste the link to the cyverse-utils https://github.com/CU-ESIIL/cyverse-utils.git and click Clone : You should now see the cyverse-utils folder in your directory tree (provided you haven't changed directories from the default /home/jovyan/data-store Go into the cyverse-utils folder: open up the create_github_keypair.ipynb notebook if you prefer Python or the 'create_github_keypair.R' script if you prefer R by double-clicking and then select the default 'macrosystems' kernel: Now you should see the notebook open. Click the play button at the top. You will be prompted to enter your GitHub username and email: You should now see your Public Key. Copy the WHOLE LINE including ssh-ed25519 at the beginning and the jovyan@... at the end Go to your GitHub settings page (you may need to log in to GitHub first): Select SSH and GPG keys Select New SSH key Give your key a descriptive name, paste your ENTIRE public key in the Key input box, and click Add SSH Key . You may need to re-authenticate with your password or two-factor authentication.: You should now see your new SSH key in your Authentication Keys list! Now you will be able to clone private repositories and push changes to GitHub from your Cyverse analysis! NOTE! Your GitHub authentication is ONLY for the analysis you're working with right now. You will be able to use it as long as you want there, but once you start a new analysis you will need to go through this process again. Feel free to delete keys from old analyses that have been shut down.","title":"Connecting Cyverse to GitHub"},{"location":"resources/cyverse_move_and_save_data/#connecting-cyverse-to-github","text":"","title":"Connecting Cyverse to GitHub"},{"location":"resources/cyverse_move_and_save_data/#log-in-to-cyverse","text":"Go to the Cyverse user account website https://user.cyverse.org/ Click Sign up (if you do not already have an account) Head over to the Cyverse Discovery Environment https://de.cyverse.org , and log in with your new account. You should now see the Discovery Environment: We will give you permissions to access the Hackathon app. If you haven't already, let us know that you need access","title":"Log in to Cyverse"},{"location":"resources/cyverse_move_and_save_data/#open-up-an-analysis-with-the-hackathon-environment-jupyter-lab","text":"From the Cyverse Discovery Environment, click on Apps in the left menu Select JupyterLab ESIIL Configure and launch your analysis - when choosing the disk size, make sure to choose 64GB or greater. The rest of the settings you can change to suit your computing needs: Click Go to analysis : Now you should see Jupyter Lab!","title":"Open up an analysis with the hackathon environment (Jupyter Lab)"},{"location":"resources/cyverse_move_and_save_data/#set-up-your-github-credentials","text":"","title":"Set up your GitHub credentials"},{"location":"resources/cyverse_move_and_save_data/#if-you-would-prefer-to-follow-a-video-instead-of-a-written-outline-we-have-prepared-a-video-here","text":"From Jupyter Lab, click on the Git Extension icon on the left menu: Click Clone a Repository and Paste the link to the cyverse-utils https://github.com/CU-ESIIL/cyverse-utils.git and click Clone : You should now see the cyverse-utils folder in your directory tree (provided you haven't changed directories from the default /home/jovyan/data-store Go into the cyverse-utils folder: open up the create_github_keypair.ipynb notebook if you prefer Python or the 'create_github_keypair.R' script if you prefer R by double-clicking and then select the default 'macrosystems' kernel: Now you should see the notebook open. Click the play button at the top. You will be prompted to enter your GitHub username and email: You should now see your Public Key. Copy the WHOLE LINE including ssh-ed25519 at the beginning and the jovyan@... at the end Go to your GitHub settings page (you may need to log in to GitHub first): Select SSH and GPG keys Select New SSH key Give your key a descriptive name, paste your ENTIRE public key in the Key input box, and click Add SSH Key . You may need to re-authenticate with your password or two-factor authentication.: You should now see your new SSH key in your Authentication Keys list! Now you will be able to clone private repositories and push changes to GitHub from your Cyverse analysis! NOTE! Your GitHub authentication is ONLY for the analysis you're working with right now. You will be able to use it as long as you want there, but once you start a new analysis you will need to go through this process again. Feel free to delete keys from old analyses that have been shut down.","title":"If you would prefer to follow a video instead of a written outline, we have prepared a video here:"},{"location":"resources/cyverse_shutdown/","text":"Connecting Cyverse to GitHub \u00b6 Log in to Cyverse \u00b6 Go to the Cyverse user account website https://user.cyverse.org/ Click Sign up (if you do not already have an account) Head over to the Cyverse Discovery Environment https://de.cyverse.org , and log in with your new account. You should now see the Discovery Environment: We will give you permissions to access the Hackathon app. If you haven't already, let us know that you need access Open up an analysis with the hackathon environment (Jupyter Lab) \u00b6 From the Cyverse Discovery Environment, click on Apps in the left menu Select JupyterLab ESIIL Configure and launch your analysis - when choosing the disk size, make sure to choose 64GB or greater. The rest of the settings you can change to suit your computing needs: Click Go to analysis : Now you should see Jupyter Lab! Set up your GitHub credentials \u00b6 If you would prefer to follow a video instead of a written outline, we have prepared a video here: \u00b6 From Jupyter Lab, click on the Git Extension icon on the left menu: Click Clone a Repository and Paste the link to the cyverse-utils https://github.com/CU-ESIIL/cyverse-utils.git and click Clone : You should now see the cyverse-utils folder in your directory tree (provided you haven't changed directories from the default /home/jovyan/data-store Go into the cyverse-utils folder: open up the create_github_keypair.ipynb notebook if you prefer Python or the 'create_github_keypair.R' script if you prefer R by double-clicking and then select the default 'macrosystems' kernel: Now you should see the notebook open. Click the play button at the top. You will be prompted to enter your GitHub username and email: You should now see your Public Key. Copy the WHOLE LINE including ssh-ed25519 at the beginning and the jovyan@... at the end Go to your GitHub settings page (you may need to log in to GitHub first): Select SSH and GPG keys Select New SSH key Give your key a descriptive name, paste your ENTIRE public key in the Key input box, and click Add SSH Key . You may need to re-authenticate with your password or two-factor authentication.: You should now see your new SSH key in your Authentication Keys list! Now you will be able to clone private repositories and push changes to GitHub from your Cyverse analysis! NOTE! Your GitHub authentication is ONLY for the analysis you're working with right now. You will be able to use it as long as you want there, but once you start a new analysis you will need to go through this process again. Feel free to delete keys from old analyses that have been shut down.","title":"Shutdown procedure"},{"location":"resources/cyverse_shutdown/#connecting-cyverse-to-github","text":"","title":"Connecting Cyverse to GitHub"},{"location":"resources/cyverse_shutdown/#log-in-to-cyverse","text":"Go to the Cyverse user account website https://user.cyverse.org/ Click Sign up (if you do not already have an account) Head over to the Cyverse Discovery Environment https://de.cyverse.org , and log in with your new account. You should now see the Discovery Environment: We will give you permissions to access the Hackathon app. If you haven't already, let us know that you need access","title":"Log in to Cyverse"},{"location":"resources/cyverse_shutdown/#open-up-an-analysis-with-the-hackathon-environment-jupyter-lab","text":"From the Cyverse Discovery Environment, click on Apps in the left menu Select JupyterLab ESIIL Configure and launch your analysis - when choosing the disk size, make sure to choose 64GB or greater. The rest of the settings you can change to suit your computing needs: Click Go to analysis : Now you should see Jupyter Lab!","title":"Open up an analysis with the hackathon environment (Jupyter Lab)"},{"location":"resources/cyverse_shutdown/#set-up-your-github-credentials","text":"","title":"Set up your GitHub credentials"},{"location":"resources/cyverse_shutdown/#if-you-would-prefer-to-follow-a-video-instead-of-a-written-outline-we-have-prepared-a-video-here","text":"From Jupyter Lab, click on the Git Extension icon on the left menu: Click Clone a Repository and Paste the link to the cyverse-utils https://github.com/CU-ESIIL/cyverse-utils.git and click Clone : You should now see the cyverse-utils folder in your directory tree (provided you haven't changed directories from the default /home/jovyan/data-store Go into the cyverse-utils folder: open up the create_github_keypair.ipynb notebook if you prefer Python or the 'create_github_keypair.R' script if you prefer R by double-clicking and then select the default 'macrosystems' kernel: Now you should see the notebook open. Click the play button at the top. You will be prompted to enter your GitHub username and email: You should now see your Public Key. Copy the WHOLE LINE including ssh-ed25519 at the beginning and the jovyan@... at the end Go to your GitHub settings page (you may need to log in to GitHub first): Select SSH and GPG keys Select New SSH key Give your key a descriptive name, paste your ENTIRE public key in the Key input box, and click Add SSH Key . You may need to re-authenticate with your password or two-factor authentication.: You should now see your new SSH key in your Authentication Keys list! Now you will be able to clone private repositories and push changes to GitHub from your Cyverse analysis! NOTE! Your GitHub authentication is ONLY for the analysis you're working with right now. You will be able to use it as long as you want there, but once you start a new analysis you will need to go through this process again. Feel free to delete keys from old analyses that have been shut down.","title":"If you would prefer to follow a video instead of a written outline, we have prepared a video here:"},{"location":"resources/cyverse_startup/","text":"Connecting Cyverse to GitHub \u00b6 Log in to Cyverse \u00b6 Go to the Cyverse user account website https://user.cyverse.org/ Click Sign up (if you do not already have an account) Head over to the Cyverse Discovery Environment https://de.cyverse.org , and log in with your new account. You should now see the Discovery Environment: We will give you permissions to access the Hackathon app. If you haven't already, let us know that you need access Open up an analysis with the hackathon environment (Jupyter Lab) \u00b6 From the Cyverse Discovery Environment, click on Apps in the left menu Select JupyterLab ESIIL Configure and launch your analysis - when choosing the disk size, make sure to choose 64GB or greater. The rest of the settings you can change to suit your computing needs: Click Go to analysis : Now you should see Jupyter Lab! Set up your GitHub credentials \u00b6 If you would prefer to follow a video instead of a written outline, we have prepared a video here: \u00b6 From Jupyter Lab, click on the Git Extension icon on the left menu: Click Clone a Repository and Paste the link to the cyverse-utils https://github.com/CU-ESIIL/cyverse-utils.git and click Clone : You should now see the cyverse-utils folder in your directory tree (provided you haven't changed directories from the default /home/jovyan/data-store Go into the cyverse-utils folder: open up the create_github_keypair.ipynb notebook if you prefer Python or the 'create_github_keypair.R' script if you prefer R by double-clicking and then select the default 'macrosystems' kernel: Now you should see the notebook open. Click the play button at the top. You will be prompted to enter your GitHub username and email: You should now see your Public Key. Copy the WHOLE LINE including ssh-ed25519 at the beginning and the jovyan@... at the end Go to your GitHub settings page (you may need to log in to GitHub first): Select SSH and GPG keys Select New SSH key Give your key a descriptive name, paste your ENTIRE public key in the Key input box, and click Add SSH Key . You may need to re-authenticate with your password or two-factor authentication.: You should now see your new SSH key in your Authentication Keys list! Now you will be able to clone private repositories and push changes to GitHub from your Cyverse analysis! NOTE! Your GitHub authentication is ONLY for the analysis you're working with right now. You will be able to use it as long as you want there, but once you start a new analysis you will need to go through this process again. Feel free to delete keys from old analyses that have been shut down.","title":"Startup procedure"},{"location":"resources/cyverse_startup/#connecting-cyverse-to-github","text":"","title":"Connecting Cyverse to GitHub"},{"location":"resources/cyverse_startup/#log-in-to-cyverse","text":"Go to the Cyverse user account website https://user.cyverse.org/ Click Sign up (if you do not already have an account) Head over to the Cyverse Discovery Environment https://de.cyverse.org , and log in with your new account. You should now see the Discovery Environment: We will give you permissions to access the Hackathon app. If you haven't already, let us know that you need access","title":"Log in to Cyverse"},{"location":"resources/cyverse_startup/#open-up-an-analysis-with-the-hackathon-environment-jupyter-lab","text":"From the Cyverse Discovery Environment, click on Apps in the left menu Select JupyterLab ESIIL Configure and launch your analysis - when choosing the disk size, make sure to choose 64GB or greater. The rest of the settings you can change to suit your computing needs: Click Go to analysis : Now you should see Jupyter Lab!","title":"Open up an analysis with the hackathon environment (Jupyter Lab)"},{"location":"resources/cyverse_startup/#set-up-your-github-credentials","text":"","title":"Set up your GitHub credentials"},{"location":"resources/cyverse_startup/#if-you-would-prefer-to-follow-a-video-instead-of-a-written-outline-we-have-prepared-a-video-here","text":"From Jupyter Lab, click on the Git Extension icon on the left menu: Click Clone a Repository and Paste the link to the cyverse-utils https://github.com/CU-ESIIL/cyverse-utils.git and click Clone : You should now see the cyverse-utils folder in your directory tree (provided you haven't changed directories from the default /home/jovyan/data-store Go into the cyverse-utils folder: open up the create_github_keypair.ipynb notebook if you prefer Python or the 'create_github_keypair.R' script if you prefer R by double-clicking and then select the default 'macrosystems' kernel: Now you should see the notebook open. Click the play button at the top. You will be prompted to enter your GitHub username and email: You should now see your Public Key. Copy the WHOLE LINE including ssh-ed25519 at the beginning and the jovyan@... at the end Go to your GitHub settings page (you may need to log in to GitHub first): Select SSH and GPG keys Select New SSH key Give your key a descriptive name, paste your ENTIRE public key in the Key input box, and click Add SSH Key . You may need to re-authenticate with your password or two-factor authentication.: You should now see your new SSH key in your Authentication Keys list! Now you will be able to clone private repositories and push changes to GitHub from your Cyverse analysis! NOTE! Your GitHub authentication is ONLY for the analysis you're working with right now. You will be able to use it as long as you want there, but once you start a new analysis you will need to go through this process again. Feel free to delete keys from old analyses that have been shut down.","title":"If you would prefer to follow a video instead of a written outline, we have prepared a video here:"},{"location":"resources/cyverse_stream_data/","text":"Connecting Cyverse to GitHub \u00b6 Log in to Cyverse \u00b6 Go to the Cyverse user account website https://user.cyverse.org/ Click Sign up (if you do not already have an account) Head over to the Cyverse Discovery Environment https://de.cyverse.org , and log in with your new account. You should now see the Discovery Environment: We will give you permissions to access the Hackathon app. If you haven't already, let us know that you need access Open up an analysis with the hackathon environment (Jupyter Lab) \u00b6 From the Cyverse Discovery Environment, click on Apps in the left menu Select JupyterLab ESIIL Configure and launch your analysis - when choosing the disk size, make sure to choose 64GB or greater. The rest of the settings you can change to suit your computing needs: Click Go to analysis : Now you should see Jupyter Lab! Set up your GitHub credentials \u00b6 If you would prefer to follow a video instead of a written outline, we have prepared a video here: \u00b6 From Jupyter Lab, click on the Git Extension icon on the left menu: Click Clone a Repository and Paste the link to the cyverse-utils https://github.com/CU-ESIIL/cyverse-utils.git and click Clone : You should now see the cyverse-utils folder in your directory tree (provided you haven't changed directories from the default /home/jovyan/data-store Go into the cyverse-utils folder: open up the create_github_keypair.ipynb notebook if you prefer Python or the 'create_github_keypair.R' script if you prefer R by double-clicking and then select the default 'macrosystems' kernel: Now you should see the notebook open. Click the play button at the top. You will be prompted to enter your GitHub username and email: You should now see your Public Key. Copy the WHOLE LINE including ssh-ed25519 at the beginning and the jovyan@... at the end Go to your GitHub settings page (you may need to log in to GitHub first): Select SSH and GPG keys Select New SSH key Give your key a descriptive name, paste your ENTIRE public key in the Key input box, and click Add SSH Key . You may need to re-authenticate with your password or two-factor authentication.: You should now see your new SSH key in your Authentication Keys list! Now you will be able to clone private repositories and push changes to GitHub from your Cyverse analysis! NOTE! Your GitHub authentication is ONLY for the analysis you're working with right now. You will be able to use it as long as you want there, but once you start a new analysis you will need to go through this process again. Feel free to delete keys from old analyses that have been shut down.","title":"Connecting Cyverse to GitHub"},{"location":"resources/cyverse_stream_data/#connecting-cyverse-to-github","text":"","title":"Connecting Cyverse to GitHub"},{"location":"resources/cyverse_stream_data/#log-in-to-cyverse","text":"Go to the Cyverse user account website https://user.cyverse.org/ Click Sign up (if you do not already have an account) Head over to the Cyverse Discovery Environment https://de.cyverse.org , and log in with your new account. You should now see the Discovery Environment: We will give you permissions to access the Hackathon app. If you haven't already, let us know that you need access","title":"Log in to Cyverse"},{"location":"resources/cyverse_stream_data/#open-up-an-analysis-with-the-hackathon-environment-jupyter-lab","text":"From the Cyverse Discovery Environment, click on Apps in the left menu Select JupyterLab ESIIL Configure and launch your analysis - when choosing the disk size, make sure to choose 64GB or greater. The rest of the settings you can change to suit your computing needs: Click Go to analysis : Now you should see Jupyter Lab!","title":"Open up an analysis with the hackathon environment (Jupyter Lab)"},{"location":"resources/cyverse_stream_data/#set-up-your-github-credentials","text":"","title":"Set up your GitHub credentials"},{"location":"resources/cyverse_stream_data/#if-you-would-prefer-to-follow-a-video-instead-of-a-written-outline-we-have-prepared-a-video-here","text":"From Jupyter Lab, click on the Git Extension icon on the left menu: Click Clone a Repository and Paste the link to the cyverse-utils https://github.com/CU-ESIIL/cyverse-utils.git and click Clone : You should now see the cyverse-utils folder in your directory tree (provided you haven't changed directories from the default /home/jovyan/data-store Go into the cyverse-utils folder: open up the create_github_keypair.ipynb notebook if you prefer Python or the 'create_github_keypair.R' script if you prefer R by double-clicking and then select the default 'macrosystems' kernel: Now you should see the notebook open. Click the play button at the top. You will be prompted to enter your GitHub username and email: You should now see your Public Key. Copy the WHOLE LINE including ssh-ed25519 at the beginning and the jovyan@... at the end Go to your GitHub settings page (you may need to log in to GitHub first): Select SSH and GPG keys Select New SSH key Give your key a descriptive name, paste your ENTIRE public key in the Key input box, and click Add SSH Key . You may need to re-authenticate with your password or two-factor authentication.: You should now see your new SSH key in your Authentication Keys list! Now you will be able to clone private repositories and push changes to GitHub from your Cyverse analysis! NOTE! Your GitHub authentication is ONLY for the analysis you're working with right now. You will be able to use it as long as you want there, but once you start a new analysis you will need to go through this process again. Feel free to delete keys from old analyses that have been shut down.","title":"If you would prefer to follow a video instead of a written outline, we have prepared a video here:"},{"location":"resources/data_analysis/","text":"Data Analysis Documentation \u00b6 Overview \u00b6 Brief overview of the data analysis goals and the analytical questions being addressed. Analysis Methodology \u00b6 Description of the analytical approach, methods used, and justification for the chosen techniques. Code Overview \u00b6 Explanation of the structure of the analysis code, including key functions and their roles. Running the Analysis \u00b6 Instructions and example commands for executing the analysis scripts. python analysis_script.py Analysis Results \u00b6 Summary of key findings from the analysis, including interpretation and relevance. Challenges and Solutions \u00b6 Discussion of challenges faced during the analysis and solutions or workarounds implemented. Conclusions \u00b6 Concluding remarks on the analysis, insights gained, and their potential impact. Future Work \u00b6 Suggestions for extending or refining the analysis and potential areas for further research. References \u00b6 Citations or references to external sources or literature used.","title":"Data Analysis Documentation"},{"location":"resources/data_analysis/#data-analysis-documentation","text":"","title":"Data Analysis Documentation"},{"location":"resources/data_analysis/#overview","text":"Brief overview of the data analysis goals and the analytical questions being addressed.","title":"Overview"},{"location":"resources/data_analysis/#analysis-methodology","text":"Description of the analytical approach, methods used, and justification for the chosen techniques.","title":"Analysis Methodology"},{"location":"resources/data_analysis/#code-overview","text":"Explanation of the structure of the analysis code, including key functions and their roles.","title":"Code Overview"},{"location":"resources/data_analysis/#running-the-analysis","text":"Instructions and example commands for executing the analysis scripts. python analysis_script.py","title":"Running the Analysis"},{"location":"resources/data_analysis/#analysis-results","text":"Summary of key findings from the analysis, including interpretation and relevance.","title":"Analysis Results"},{"location":"resources/data_analysis/#challenges-and-solutions","text":"Discussion of challenges faced during the analysis and solutions or workarounds implemented.","title":"Challenges and Solutions"},{"location":"resources/data_analysis/#conclusions","text":"Concluding remarks on the analysis, insights gained, and their potential impact.","title":"Conclusions"},{"location":"resources/data_analysis/#future-work","text":"Suggestions for extending or refining the analysis and potential areas for further research.","title":"Future Work"},{"location":"resources/data_analysis/#references","text":"Citations or references to external sources or literature used.","title":"References"},{"location":"resources/data_processing/","text":"Data Processing Documentation \u00b6 Overview \u00b6 Brief description of the data processing objectives and scope. Reminder to adhere to data ownership and usage guidelines. Data Sources \u00b6 List and describe data sources used, including links to cloud-optimized sources. Highlight permissions and compliance with data ownership guidelines. CyVerse Discovery Environment \u00b6 Instructions for setting up and using the CyVerse Discovery Environment for data processing. Tips for cloud-based data access and processing. Data Processing Steps \u00b6 Using GDAL VSI \u00b6 Guidance on using GDAL VSI (Virtual System Interface) for data access and processing. Example commands or scripts: gdal_translate /vsicurl/http://example.com/data.tif output.tif Cloud-Optimized Data \u00b6 Advantages of using cloud-optimized data formats and processing data without downloading. Instructions for such processes. Data Storage \u00b6 Information on storing processed data, with guidelines for choosing between the repository and CyVerse Data Store. Best Practices \u00b6 Recommendations for efficient and responsible data processing in the cloud. Tips to ensure data integrity and reproducibility. Challenges and Troubleshooting \u00b6 Common challenges in data processing and potential solutions. Resources for troubleshooting in the CyVerse Discovery Environment. Conclusions \u00b6 Summary of the data processing phase and its outcomes. Reflect on the methods used. References \u00b6 Citations of tools, data sources, and other references used in the data processing phase.","title":"Data Processing Documentation"},{"location":"resources/data_processing/#data-processing-documentation","text":"","title":"Data Processing Documentation"},{"location":"resources/data_processing/#overview","text":"Brief description of the data processing objectives and scope. Reminder to adhere to data ownership and usage guidelines.","title":"Overview"},{"location":"resources/data_processing/#data-sources","text":"List and describe data sources used, including links to cloud-optimized sources. Highlight permissions and compliance with data ownership guidelines.","title":"Data Sources"},{"location":"resources/data_processing/#cyverse-discovery-environment","text":"Instructions for setting up and using the CyVerse Discovery Environment for data processing. Tips for cloud-based data access and processing.","title":"CyVerse Discovery Environment"},{"location":"resources/data_processing/#data-processing-steps","text":"","title":"Data Processing Steps"},{"location":"resources/data_processing/#using-gdal-vsi","text":"Guidance on using GDAL VSI (Virtual System Interface) for data access and processing. Example commands or scripts: gdal_translate /vsicurl/http://example.com/data.tif output.tif","title":"Using GDAL VSI"},{"location":"resources/data_processing/#cloud-optimized-data","text":"Advantages of using cloud-optimized data formats and processing data without downloading. Instructions for such processes.","title":"Cloud-Optimized Data"},{"location":"resources/data_processing/#data-storage","text":"Information on storing processed data, with guidelines for choosing between the repository and CyVerse Data Store.","title":"Data Storage"},{"location":"resources/data_processing/#best-practices","text":"Recommendations for efficient and responsible data processing in the cloud. Tips to ensure data integrity and reproducibility.","title":"Best Practices"},{"location":"resources/data_processing/#challenges-and-troubleshooting","text":"Common challenges in data processing and potential solutions. Resources for troubleshooting in the CyVerse Discovery Environment.","title":"Challenges and Troubleshooting"},{"location":"resources/data_processing/#conclusions","text":"Summary of the data processing phase and its outcomes. Reflect on the methods used.","title":"Conclusions"},{"location":"resources/data_processing/#references","text":"Citations of tools, data sources, and other references used in the data processing phase.","title":"References"},{"location":"resources/esiil_training/","text":"ESIIL Working Groups training sessions \u00b6 Introduction to ESIIL Training \u00b6 Brief overview of the training program. Objectives and expected outcomes for the working groups. Session 1: The Science of Team Science (2 Hours) \u00b6 Part 1: Creating Ethical and Innovative Work Spaces \u00b6 Strategies for fostering ethical and inclusive environments. Techniques for encouraging innovation and creativity in team settings. Part 2: Effective Communication and Collaboration \u00b6 Best practices for ensuring every team member's voice is heard. Approaches for maintaining productivity and positive team dynamics. Overview of the code of conduct and participant agreement. Session 2: Foundations of Environmental Data Science (2 Hours) \u00b6 Part 1: Data Management, Ethics, and GitHub Usage \u00b6 Principles of data management in environmental science. Understanding data ethics and ownership guidelines. Tour of GitHub repositories and setup instructions for effective collaboration. Part 2: Essential Tools and Technologies \u00b6 Introduction to key tools and technologies used in ESIIL. Basic training on software and platforms essential for data analysis. Session 3: Practical Application and Project Execution (2 Hours) \u00b6 Part 1: Travel Planning and Reimbursement \u00b6 Learn how to manage finances and submit paperwork to the University. Part 2: Hands-on Data Analysis Workflow \u00b6 Interactive session on constructing a data analysis pipeline using ESIIL/CyVerse tools. Practical exercises on data processing, analysis, and visualization techniques. Troubleshooting common issues and optimizing workflow efficiency. Part 3: Wrap-up and Project Planning \u00b6 Strategies for sustaining project momentum and managing long-term research goals. Planning for publication, data sharing, and broader impact. Final Q&A session to address any outstanding questions or concerns. Conclusion and Feedback \u00b6 Summary of key learnings from all sessions. Encouragement for participants to apply these skills in their respective projects. Collection of feedback for future training improvements. Additional Resources \u00b6 List of resources for further learning and exploration. Links to community forums or groups for ongoing support and collaboration. Roundtable Event 1: PI/Team Leads Discussion (2 Hours) \u00b6 A roundtable discussion for Principal Investigators and team leads. Sharing experiences, challenges, and strategies among group leaders. Fostering a collaborative network and problem-solving atmosphere. Roundtable Event 2: Technical Leads Office Hours (2 Hours) \u00b6 A roundtable and office hours session for technical leads. Ensuring a thorough understanding of the ESIIL/CyVerse cyberinfrastructure. Providing technical support and knowledge exchange. Conclusion and Feedback \u00b6 Recap of key takeaways from the training sessions and roundtables. Collection of feedback for continuous improvement of the training program. Additional Resources \u00b6 Supplementary materials, reading lists, and links to online tutorials and documentation.","title":"ESIIL Working Groups training sessions"},{"location":"resources/esiil_training/#esiil-working-groups-training-sessions","text":"","title":"ESIIL Working Groups training sessions"},{"location":"resources/esiil_training/#introduction-to-esiil-training","text":"Brief overview of the training program. Objectives and expected outcomes for the working groups.","title":"Introduction to ESIIL Training"},{"location":"resources/esiil_training/#session-1-the-science-of-team-science-2-hours","text":"","title":"Session 1: The Science of Team Science (2 Hours)"},{"location":"resources/esiil_training/#part-1-creating-ethical-and-innovative-work-spaces","text":"Strategies for fostering ethical and inclusive environments. Techniques for encouraging innovation and creativity in team settings.","title":"Part 1: Creating Ethical and Innovative Work Spaces"},{"location":"resources/esiil_training/#part-2-effective-communication-and-collaboration","text":"Best practices for ensuring every team member's voice is heard. Approaches for maintaining productivity and positive team dynamics. Overview of the code of conduct and participant agreement.","title":"Part 2: Effective Communication and Collaboration"},{"location":"resources/esiil_training/#session-2-foundations-of-environmental-data-science-2-hours","text":"","title":"Session 2: Foundations of Environmental Data Science (2 Hours)"},{"location":"resources/esiil_training/#part-1-data-management-ethics-and-github-usage","text":"Principles of data management in environmental science. Understanding data ethics and ownership guidelines. Tour of GitHub repositories and setup instructions for effective collaboration.","title":"Part 1: Data Management, Ethics, and GitHub Usage"},{"location":"resources/esiil_training/#part-2-essential-tools-and-technologies","text":"Introduction to key tools and technologies used in ESIIL. Basic training on software and platforms essential for data analysis.","title":"Part 2: Essential Tools and Technologies"},{"location":"resources/esiil_training/#session-3-practical-application-and-project-execution-2-hours","text":"","title":"Session 3: Practical Application and Project Execution (2 Hours)"},{"location":"resources/esiil_training/#part-1-travel-planning-and-reimbursement","text":"Learn how to manage finances and submit paperwork to the University.","title":"Part 1: Travel Planning and Reimbursement"},{"location":"resources/esiil_training/#part-2-hands-on-data-analysis-workflow","text":"Interactive session on constructing a data analysis pipeline using ESIIL/CyVerse tools. Practical exercises on data processing, analysis, and visualization techniques. Troubleshooting common issues and optimizing workflow efficiency.","title":"Part 2: Hands-on Data Analysis Workflow"},{"location":"resources/esiil_training/#part-3-wrap-up-and-project-planning","text":"Strategies for sustaining project momentum and managing long-term research goals. Planning for publication, data sharing, and broader impact. Final Q&A session to address any outstanding questions or concerns.","title":"Part 3: Wrap-up and Project Planning"},{"location":"resources/esiil_training/#conclusion-and-feedback","text":"Summary of key learnings from all sessions. Encouragement for participants to apply these skills in their respective projects. Collection of feedback for future training improvements.","title":"Conclusion and Feedback"},{"location":"resources/esiil_training/#additional-resources","text":"List of resources for further learning and exploration. Links to community forums or groups for ongoing support and collaboration.","title":"Additional Resources"},{"location":"resources/esiil_training/#roundtable-event-1-piteam-leads-discussion-2-hours","text":"A roundtable discussion for Principal Investigators and team leads. Sharing experiences, challenges, and strategies among group leaders. Fostering a collaborative network and problem-solving atmosphere.","title":"Roundtable Event 1: PI/Team Leads Discussion (2 Hours)"},{"location":"resources/esiil_training/#roundtable-event-2-technical-leads-office-hours-2-hours","text":"A roundtable and office hours session for technical leads. Ensuring a thorough understanding of the ESIIL/CyVerse cyberinfrastructure. Providing technical support and knowledge exchange.","title":"Roundtable Event 2: Technical Leads Office Hours (2 Hours)"},{"location":"resources/esiil_training/#conclusion-and-feedback_1","text":"Recap of key takeaways from the training sessions and roundtables. Collection of feedback for continuous improvement of the training program.","title":"Conclusion and Feedback"},{"location":"resources/esiil_training/#additional-resources_1","text":"Supplementary materials, reading lists, and links to online tutorials and documentation.","title":"Additional Resources"},{"location":"resources/first_meeting_notes/","text":"Primary Meeting 1 \u00b6 Day 1-5: Project Kickoff and Strategy \u00b6 Meeting Details \u00b6 Dates: Times: Location: Facilitator: Attendees \u00b6 List of attendees Daily Agenda \u00b6 Day 1: Setting the Stage \u00b6 Opening Remarks \u00b6 Welcoming speech and outline of the week's objectives. Project Overview \u00b6 Presentation of the project goals and significance. Theoretical Framework \u00b6 Discussion on the theoretical underpinnings of the project. Data Overview \u00b6 Review available data and any gaps that need addressing. Day 2-4: Deep Dives \u00b6 Daily Goals \u00b6 Outline specific goals for each day. Task Assignments \u00b6 Assign tasks and areas of responsibility to team members. Theory and Data Synthesis \u00b6 Host focused discussions on how theory will inform data analysis. Explore different methodological approaches and data integration strategies. Evening Social and Soft Work Sessions \u00b6 Casual gatherings to further discuss ideas and foster team bonding. Day 5: Roadmap and Closure \u00b6 Project Roadmap \u00b6 Draft a detailed plan of action for the project going forward. Responsibilities \u00b6 Confirm individual responsibilities and deadlines. Review and Feedback \u00b6 Reflect on the week's discussions and adjust the project plan as needed. Closing Remarks \u00b6 Summarize achievements and express appreciation for the team's efforts. Detailed Notes \u00b6 Day 1 Notes \u00b6 Summary of discussions, decisions, and key points. Day 2 Notes \u00b6 ... Day 3 Notes \u00b6 ... Day 4 Notes \u00b6 ... Day 5 Notes \u00b6 ... Action Items \u00b6 Specific task: Assigned to - Deadline Specific task: Assigned to - Deadline ... Reflections and Comments \u00b6 (Space for any additional thoughts, insights, or personal reflections on the meeting.) Next Steps \u00b6 Schedule for follow-up meetings or checkpoints. Outline of expected progress before the next primary meeting. Additional Documentation \u00b6 (Include or link to any additional documents, charts, or resources that were created or referenced during the meeting.)","title":"Primary Meeting 1"},{"location":"resources/first_meeting_notes/#primary-meeting-1","text":"","title":"Primary Meeting 1"},{"location":"resources/first_meeting_notes/#day-1-5-project-kickoff-and-strategy","text":"","title":"Day 1-5: Project Kickoff and Strategy"},{"location":"resources/first_meeting_notes/#meeting-details","text":"Dates: Times: Location: Facilitator:","title":"Meeting Details"},{"location":"resources/first_meeting_notes/#attendees","text":"List of attendees","title":"Attendees"},{"location":"resources/first_meeting_notes/#daily-agenda","text":"","title":"Daily Agenda"},{"location":"resources/first_meeting_notes/#day-1-setting-the-stage","text":"","title":"Day 1: Setting the Stage"},{"location":"resources/first_meeting_notes/#opening-remarks","text":"Welcoming speech and outline of the week's objectives.","title":"Opening Remarks"},{"location":"resources/first_meeting_notes/#project-overview","text":"Presentation of the project goals and significance.","title":"Project Overview"},{"location":"resources/first_meeting_notes/#theoretical-framework","text":"Discussion on the theoretical underpinnings of the project.","title":"Theoretical Framework"},{"location":"resources/first_meeting_notes/#data-overview","text":"Review available data and any gaps that need addressing.","title":"Data Overview"},{"location":"resources/first_meeting_notes/#day-2-4-deep-dives","text":"","title":"Day 2-4: Deep Dives"},{"location":"resources/first_meeting_notes/#daily-goals","text":"Outline specific goals for each day.","title":"Daily Goals"},{"location":"resources/first_meeting_notes/#task-assignments","text":"Assign tasks and areas of responsibility to team members.","title":"Task Assignments"},{"location":"resources/first_meeting_notes/#theory-and-data-synthesis","text":"Host focused discussions on how theory will inform data analysis. Explore different methodological approaches and data integration strategies.","title":"Theory and Data Synthesis"},{"location":"resources/first_meeting_notes/#evening-social-and-soft-work-sessions","text":"Casual gatherings to further discuss ideas and foster team bonding.","title":"Evening Social and Soft Work Sessions"},{"location":"resources/first_meeting_notes/#day-5-roadmap-and-closure","text":"","title":"Day 5: Roadmap and Closure"},{"location":"resources/first_meeting_notes/#project-roadmap","text":"Draft a detailed plan of action for the project going forward.","title":"Project Roadmap"},{"location":"resources/first_meeting_notes/#responsibilities","text":"Confirm individual responsibilities and deadlines.","title":"Responsibilities"},{"location":"resources/first_meeting_notes/#review-and-feedback","text":"Reflect on the week's discussions and adjust the project plan as needed.","title":"Review and Feedback"},{"location":"resources/first_meeting_notes/#closing-remarks","text":"Summarize achievements and express appreciation for the team's efforts.","title":"Closing Remarks"},{"location":"resources/first_meeting_notes/#detailed-notes","text":"","title":"Detailed Notes"},{"location":"resources/first_meeting_notes/#day-1-notes","text":"Summary of discussions, decisions, and key points.","title":"Day 1 Notes"},{"location":"resources/first_meeting_notes/#day-2-notes","text":"...","title":"Day 2 Notes"},{"location":"resources/first_meeting_notes/#day-3-notes","text":"...","title":"Day 3 Notes"},{"location":"resources/first_meeting_notes/#day-4-notes","text":"...","title":"Day 4 Notes"},{"location":"resources/first_meeting_notes/#day-5-notes","text":"...","title":"Day 5 Notes"},{"location":"resources/first_meeting_notes/#action-items","text":"Specific task: Assigned to - Deadline Specific task: Assigned to - Deadline ...","title":"Action Items"},{"location":"resources/first_meeting_notes/#reflections-and-comments","text":"(Space for any additional thoughts, insights, or personal reflections on the meeting.)","title":"Reflections and Comments"},{"location":"resources/first_meeting_notes/#next-steps","text":"Schedule for follow-up meetings or checkpoints. Outline of expected progress before the next primary meeting.","title":"Next Steps"},{"location":"resources/first_meeting_notes/#additional-documentation","text":"(Include or link to any additional documents, charts, or resources that were created or referenced during the meeting.)","title":"Additional Documentation"},{"location":"resources/github_basics/","text":"Github essentials \u00b6 I. Introduction (2 minutes) \u00b6 A. Brief overview of GitHub: \u00b6 GitHub is a web-based platform that provides version control and collaboration features using Git, a distributed version control system. It enables developers to work together on projects, track changes to code, and efficiently manage different versions of the project. GitHub is widely used in the software development industry and is an essential tool for collaborative projects and maintaining code quality. Image source: Artwork by @allison_horst B. Introduce GitHub Desktop and JupyterHub GitHub widget: \u00b6 GitHub Desktop is a graphical user interface (GUI) application that simplifies working with Git and GitHub by providing a more visual and intuitive way to manage repositories, branches, commits, and other Git features. JupyterHub GitHub widget, on the other hand, is a built-in widget that integrates Git and GitHub functionality directly into Jupyter notebooks, allowing users to perform version control and collaboration tasks within the Jupyter environment. Both tools help streamline the process of working with GitHub and make it more accessible to users with varying levels of experience with Git and version control. 1. Download GitHub Desktop \u00b6 Step 1: Download GitHub Desktop \u00b6 Go to the GitHub Desktop download page: https://desktop.github.com/ Click on the \u201cDownload for Windows\u201d or \u201cDownload for macOS\u201d button, depending on your operating system. The download should start automatically. Step 2: Install GitHub Desktop \u00b6 For Windows: Locate the downloaded installer file (usually in the Downloads folder) and double-click on it to run the installer. Follow the installation instructions that appear on the screen, accepting the default settings or customizing them as desired. Once the installation is complete, GitHub Desktop will launch automatically. For macOS: Locate the downloaded .zip file (usually in the Downloads folder) and double-click on it to extract the GitHub Desktop application. Drag the extracted \u201cGitHub Desktop\u201d application into the \u201cApplications\u201d folder. Open the \u201cApplications\u201d folder and double-click on \u201cGitHub Desktop\u201d to launch the application. Step 3: Set up GitHub Desktop \u00b6 When GitHub Desktop launches for the first time, you will be prompted to sign in with your GitHub account. If you don\u2019t have one, you can create one at https://github.com/join . Enter your GitHub username (or email) and password, and click on \u201cSign in.\u201d You will then be prompted to configure Git. Enter your name and email address, which will be used for your commit messages. Click \u201cContinue\u201d when you\u2019re done. Choose whether you want to submit usage data to help improve GitHub Desktop. Click \u201cFinish\u201d to complete the setup. Now, you have successfully installed and set up GitHub Desktop. You can start using it to clone repositories, make changes, commit, and sync with the remote repositories on GitHub. 1. Download GitHub for JupyterHub cloud service \u00b6 Step 1: Accessing JupyterHub on the cloud \u00b6 Visit the JupyterHub cloud service you want to use (e.g., Binder, Google Colab, or a custom JupyterHub deployment provided by your organization). Sign in with your credentials or authenticate using a third-party service if required. Step 2: Launch a new Jupyter Notebook or open an existing one \u00b6 Click on the \u201cNew\u201d button (usually located in the top right corner) and select \u201cPython\u201d to create a new Jupyter Notebook or open an existing one from the file browser. Once the notebook is open, you will see the Jupyter Notebook interface with the familiar cells for writing and executing code. Step 3: Install and enable the JupyterLab Git extension \u00b6 In your Jupyter Notebook, create a new code cell and run the following command to install the JupyterLab Git extension: !pip install jupyterlab-git Restart the Jupyter Notebook server for the changes to take effect. Step 4: Using the JupyterHub GitHub widget \u00b6 In the Jupyter Notebook interface, you should now see a Git icon on the left sidebar. Click on it to open the GitHub widget. To clone a repository, click on the \u201c+\u201d icon in the GitHub widget and enter the repository URL. This will clone the repository into your JupyterHub workspace. You can now navigate through the cloned repository, make changes, and use the GitHub widget to stage, commit, and push your changes back to the remote repository. To create and manage branches, use the branch icon in the GitHub widget. You can create new branches, switch between branches, and merge branches using this interface. To sync your local repository with the remote repository, use the \u201cPull\u201d and \u201cPush\u201d buttons in the GitHub widget. Now, you know how to access and use the JupyterHub GitHub widget running on the cloud. This allows you to work with Git and GitHub directly from your Jupyter Notebook interface, streamlining your workflow and making collaboration easier. C. GitHub in Rstudio: \u00b6 Integrating GitHub with RStudio allows users to manage their Git repositories and collaborate on projects directly within the RStudio environment. It offers similar functionality to GitHub Desktop but caters specifically to R users working within RStudio. By configuring RStudio to work with Git, creating or opening RStudio projects, and linking projects to GitHub repositories, users can enjoy a seamless workflow for version control and collaboration. RStudio\u2019s Git pane enables users to stage, commit, and push changes to remote repositories, as well as manage branches and sync local repositories with remote ones, providing a comprehensive solution for R developers working with GitHub. Step 1: Install Git \u00b6 Before integrating GitHub with RStudio, you need to have Git installed on your computer. Visit the official Git website ( https://git-scm.com/ ) to download and install the latest version of Git for your operating system. Step 2: Configure RStudio to work with Git \u00b6 Open RStudio. Go to \u201cTools\u201d > \u201cGlobal Options\u201d in the top menu. In the \u201cGlobal Options\u201d window, click on the \u201cGit/SVN\u201d tab. Check that the \u201cGit executable\u201d field is pointing to the correct location of the installed Git. If not, click \u201cBrowse\u201d and navigate to the location of the Git executable file (usually found in the \u201cbin\u201d folder of the Git installation directory). Click \u201cOK\u201d to save the changes. Step 3: Create or open an RStudio project \u00b6 To create a new RStudio project, go to \u201cFile\u201d > \u201cNew Project\u201d in the top menu. You can either create a new directory or choose an existing one for your project. To open an existing RStudio project, go to \u201cFile\u201d > \u201cOpen Project\u201d and navigate to the project\u2019s \u201c.Rproj\u201d file. Step 4: Link your RStudio project to a GitHub repository \u00b6 In the RStudio project, go to the \u201cTools\u201d menu and select \u201cVersion Control\u201d > \u201cProject Setup.\u201d In the \u201cProject Setup\u201d window, select \u201cGit\u201d as the version control system and click \u201cOK.\u201d A new \u201c.git\u201d folder will be created in your project directory, initializing it as a Git repository. Commit any changes you have made so far by clicking on the \u201cCommit\u201d button in the \u201cGit\u201d pane in RStudio. To link your local repository to a remote GitHub repository, go to your GitHub account and create a new repository. Copy the remote repository\u2019s URL (e.g., \u201c https://github.com/username/repository.git \u201d). In RStudio, open the \u201cShell\u201d by going to \u201cTools\u201d > \u201cShell.\u201d In the shell, run the following command to add the remote repository: git remote add origin https://github.com/username/repository.git Replace the URL with the one you copied from your GitHub repository. Push your changes to the remote repository by running the following command in the shell: git push -u origin master Now, your RStudio project is linked to a GitHub repository. You can use the \u201cGit\u201d pane in RStudio to stage, commit, and push changes to the remote repository, as well as manage branches and sync your local repository with the remote one. By integrating GitHub with RStudio, you can streamline your workflow, collaborate more effectively with your team, and manage your Git repositories directly from the RStudio interface. II. GitHub Basics (4 minutes) \u00b6 A. Repository: \u00b6 A repository, often abbreviated as \u201crepo,\u201d is the fundamental building block of GitHub. It is a storage space for your project files, including the code, documentation, and other related resources. Each repository also contains the complete history of all changes made to the project files, which is crucial for effective version control. Repositories can be public, allowing anyone to access and contribute, or private, restricting access to specific collaborators. B. Fork and Clone: \u00b6 Forking and cloning are two essential operations for working with repositories on GitHub. Forking creates a personal copy of someone else\u2019s repository under your GitHub account, enabling you to make changes to the project without affecting the original repo. Cloning, on the other hand, is the process of downloading a remote repository to your local machine for offline development. In GitHub Desktop, you can clone a repository by selecting \u201cClone a repository from the Internet\u201d and entering the repository URL. In JupyterHub GitHub widget, you can clone a repository by entering the repo URL in the \u201cClone Repository\u201d section of the widget. C. Branches: \u00b6 Branches are a critical aspect of Git version control, as they allow you to create multiple parallel versions of your project within a single repository. This is particularly useful when working on new features or bug fixes, as it prevents changes from interfering with the main (or \u201cmaster\u201d) branch until they are ready to be merged. Creating a new branch in GitHub Desktop can be done by clicking the \u201cCurrent Branch\u201d dropdown and selecting \u201cNew Branch.\u201d In JupyterHub GitHub widget, you can create a new branch by clicking the \u201cNew Branch\u201d button in the \u201cBranches\u201d section of the widget. D. Replace \u2018master\u2019 with \u2018main\u2019: \u00b6 In recent years, there has been a growing awareness of the importance of inclusive language in technology. One such example is the use of the term \u201cmaster\u201d in the context of the default branch in a GitHub repository. The term \u201cmaster\u201d has historical connections to the \u201cmaster/slave\u201d file structure, which evokes an unsavory colonial past associated with slavery. In light of this, many developers and organizations have begun to replace the term \u201cmaster\u201d with more neutral terms, such as \u201cmain.\u201d We encourage you to follow this practice and change the default branch name in your repositories from \u201cmaster\u201d to \u201cmain\u201d or another suitable alternative. This small change can help promote a more inclusive and welcoming environment within the technology community. III. Collaboration and Version Control (5 minutes) \u00b6 A. Commits: \u00b6 Commits are snapshots of your project\u2019s changes at a specific point in time, serving as the fundamental building blocks of Git\u2019s version control system. Commits make it possible to track changes, revert to previous versions, and collaborate with others. In GitHub Desktop, you can make a commit by staging the changes you want to include, adding a descriptive commit message, and clicking \u201cCommit to [branch_name].\u201d In JupyterHub GitHub widget, you can create a commit by selecting the files with changes, entering a commit message, and clicking the \u201cCommit\u201d button. B. Push: \u00b6 In GitHub, \u201cpush\u201d is a fundamental operation in the version control process that transfers commits from your local repository to a remote repository, such as the one hosted on GitHub. When you push changes, you synchronize the remote repository with the latest updates made to your local repository, making those changes accessible to other collaborators working on the same project. This operation ensures that the remote repository reflects the most recent state of your work and allows your team members to stay up to date with your changes. Pushing is an essential step in distributed version control systems like Git, as it promotes efficient collaboration among multiple contributors and provides a centralized location for tracking the project\u2019s history and progress. In GitHub, the concepts of \u201ccommit\u201d and \u201cpush\u201d represent two distinct steps in the version control process. A \u201ccommit\u201d is the action of saving changes to your local repository. When you commit changes, you create a snapshot of your work, accompanied by a unique identifier and an optional descriptive message. Commits allow you to track the progress of your work over time and make it easy to revert to a previous state if necessary. On the other hand, \u201cpush\u201d is the action of transferring your local commits to a remote repository, such as the one hosted on GitHub. Pushing makes your changes accessible to others collaborating on the same project and ensures that the remote repository stays up to date with your local repository. In summary, committing saves changes locally, while pushing synchronizes those changes with a remote repository, allowing for seamless collaboration among multiple contributors. C. Pull Requests: \u00b6 Pull requests are a collaboration feature on GitHub that enables developers to propose changes to a repository, discuss those changes, and ultimately merge them into the main branch. To create a pull request, you must first push your changes to a branch on your fork of the repository. Then, using either GitHub Desktop or JupyterHub GitHub widget, you can navigate to the original repository, click the \u201cPull Request\u201d tab, and create a new pull request. After the pull request is reviewed and approved, it can be merged into the main branch. D. Merging and Resolving Conflicts: \u00b6 Merging is the process of combining changes from one branch into another. This is typically done when a feature or bugfix has been completed and is ready to be integrated into the main branch. Conflicts can arise during the merging process if the same lines of code have been modified in both branches. To resolve conflicts, you must manually review the changes and decide which version to keep. In GitHub Desktop, you can merge branches by selecting the target branch and choosing \u201cMerge into Current Branch.\u201d Conflicts will be highlighted, and you can edit the files to resolve them before committing the changes. In JupyterHub GitHub widget, you can merge branches by selecting the target branch in the \u201cBranches\u201d section and clicking the \u201cMerge\u201d button. If conflicts occur, the widget will prompt you to resolve them before completing the merge. IV. Additional Features (2 minutes) \u00b6 A. Issues and Project Management: \u00b6 Issues are a powerful feature in GitHub that allows developers to track and manage bugs, enhancements, and other tasks within a project. Issues can be assigned to collaborators, labeled for easy organization, and linked to specific commits or pull requests. They provide a centralized location for discussing and addressing project-related concerns, fostering collaboration and transparent communication among team members. Using issues effectively can significantly improve the overall management and organization of your projects. B. GitHub Pages: \u00b6 GitHub Pages is a service offered by GitHub that allows you to host static websites directly from a repository. By creating a new branch named \u201cgh-pages\u201d in your repository and adding the necessary files (HTML, CSS, JavaScript, etc.), GitHub will automatically build and deploy your website to a publicly accessible URL. This is particularly useful for showcasing project documentation, creating personal portfolios, or hosting project demos. With GitHub Pages, you can take advantage of the version control and collaboration features of GitHub while easily sharing your work with others. V. Conclusion (2 minutes) \u00b6 A. Recap of the essentials of GitHub: \u00b6 In this brief introduction, we have covered the essentials of GitHub, including the basics of repositories, forking, cloning, branching, commits, pull requests, merging, and resolving conflicts. We have also discussed additional features like issues for project management and GitHub Pages for hosting websites directly from a repository. B. Encourage further exploration and learning: \u00b6 While this introduction provides a solid foundation for understanding and using GitHub, there is still much more to learn and explore. As you continue to use GitHub in your projects, you will discover new features and workflows that can enhance your productivity and collaboration. We encourage you to dive deeper into the platform and experiment with different tools and techniques. C. Share resources for learning more about GitHub: \u00b6 There are many resources available for learning more about GitHub and expanding your skills. Some popular resources include GitHub Guides ( https://guides.github.com/ ), which offers a collection of tutorials and best practices, the official GitHub documentation ( https://docs.github.com/ ), and various online tutorials and courses. By engaging with these resources and participating in the GitHub community, you can further develop your understanding of the platform and become a more proficient user. V. Conclusion (2 minutes) \u00b6 A. Recap of the essentials of GitHub: \u00b6 In this brief introduction, we have covered the essentials of GitHub, including the basics of repositories, forking, cloning, branching, commits, pull requests, merging, and resolving conflicts. We have also discussed additional features like issues for project management and GitHub Pages for hosting websites directly from a repository. B. Encourage further exploration and learning: \u00b6 While this introduction provides a solid foundation for understanding and using GitHub, there is still much more to learn and explore. As you continue to use GitHub in your projects, you will discover new features and workflows that can enhance your productivity and collaboration. We encourage you to dive deeper into the platform and experiment with different tools and techniques. C. Share resources for learning more about GitHub: \u00b6 There are many resources available for learning more about GitHub and expanding your skills. Some popular resources include GitHub Guides ( https://guides.github.com/ ), which offers a collection of tutorials and best practices, the official GitHub documentation ( https://docs.github.com/ ), and various online tutorials and courses. By engaging with these resources and participating in the GitHub community, you can further develop your understanding of the platform and become a more proficient user.","title":"Github"},{"location":"resources/github_basics/#github-essentials","text":"","title":"Github essentials"},{"location":"resources/github_basics/#i-introduction-2-minutes","text":"","title":"I. Introduction (2 minutes)"},{"location":"resources/github_basics/#a-brief-overview-of-github","text":"GitHub is a web-based platform that provides version control and collaboration features using Git, a distributed version control system. It enables developers to work together on projects, track changes to code, and efficiently manage different versions of the project. GitHub is widely used in the software development industry and is an essential tool for collaborative projects and maintaining code quality. Image source: Artwork by @allison_horst","title":"A. Brief overview of GitHub:"},{"location":"resources/github_basics/#b-introduce-github-desktop-and-jupyterhub-github-widget","text":"GitHub Desktop is a graphical user interface (GUI) application that simplifies working with Git and GitHub by providing a more visual and intuitive way to manage repositories, branches, commits, and other Git features. JupyterHub GitHub widget, on the other hand, is a built-in widget that integrates Git and GitHub functionality directly into Jupyter notebooks, allowing users to perform version control and collaboration tasks within the Jupyter environment. Both tools help streamline the process of working with GitHub and make it more accessible to users with varying levels of experience with Git and version control.","title":"B. Introduce GitHub Desktop and JupyterHub GitHub widget:"},{"location":"resources/github_basics/#1-download-github-desktop","text":"","title":"1. Download GitHub Desktop"},{"location":"resources/github_basics/#step-1-download-github-desktop","text":"Go to the GitHub Desktop download page: https://desktop.github.com/ Click on the \u201cDownload for Windows\u201d or \u201cDownload for macOS\u201d button, depending on your operating system. The download should start automatically.","title":"Step 1: Download GitHub Desktop"},{"location":"resources/github_basics/#step-2-install-github-desktop","text":"For Windows: Locate the downloaded installer file (usually in the Downloads folder) and double-click on it to run the installer. Follow the installation instructions that appear on the screen, accepting the default settings or customizing them as desired. Once the installation is complete, GitHub Desktop will launch automatically. For macOS: Locate the downloaded .zip file (usually in the Downloads folder) and double-click on it to extract the GitHub Desktop application. Drag the extracted \u201cGitHub Desktop\u201d application into the \u201cApplications\u201d folder. Open the \u201cApplications\u201d folder and double-click on \u201cGitHub Desktop\u201d to launch the application.","title":"Step 2: Install GitHub Desktop"},{"location":"resources/github_basics/#step-3-set-up-github-desktop","text":"When GitHub Desktop launches for the first time, you will be prompted to sign in with your GitHub account. If you don\u2019t have one, you can create one at https://github.com/join . Enter your GitHub username (or email) and password, and click on \u201cSign in.\u201d You will then be prompted to configure Git. Enter your name and email address, which will be used for your commit messages. Click \u201cContinue\u201d when you\u2019re done. Choose whether you want to submit usage data to help improve GitHub Desktop. Click \u201cFinish\u201d to complete the setup. Now, you have successfully installed and set up GitHub Desktop. You can start using it to clone repositories, make changes, commit, and sync with the remote repositories on GitHub.","title":"Step 3: Set up GitHub Desktop"},{"location":"resources/github_basics/#1-download-github-for-jupyterhub-cloud-service","text":"","title":"1. Download GitHub for JupyterHub cloud service"},{"location":"resources/github_basics/#step-1-accessing-jupyterhub-on-the-cloud","text":"Visit the JupyterHub cloud service you want to use (e.g., Binder, Google Colab, or a custom JupyterHub deployment provided by your organization). Sign in with your credentials or authenticate using a third-party service if required.","title":"Step 1: Accessing JupyterHub on the cloud"},{"location":"resources/github_basics/#step-2-launch-a-new-jupyter-notebook-or-open-an-existing-one","text":"Click on the \u201cNew\u201d button (usually located in the top right corner) and select \u201cPython\u201d to create a new Jupyter Notebook or open an existing one from the file browser. Once the notebook is open, you will see the Jupyter Notebook interface with the familiar cells for writing and executing code.","title":"Step 2: Launch a new Jupyter Notebook or open an existing one"},{"location":"resources/github_basics/#step-3-install-and-enable-the-jupyterlab-git-extension","text":"In your Jupyter Notebook, create a new code cell and run the following command to install the JupyterLab Git extension: !pip install jupyterlab-git Restart the Jupyter Notebook server for the changes to take effect.","title":"Step 3: Install and enable the JupyterLab Git extension"},{"location":"resources/github_basics/#step-4-using-the-jupyterhub-github-widget","text":"In the Jupyter Notebook interface, you should now see a Git icon on the left sidebar. Click on it to open the GitHub widget. To clone a repository, click on the \u201c+\u201d icon in the GitHub widget and enter the repository URL. This will clone the repository into your JupyterHub workspace. You can now navigate through the cloned repository, make changes, and use the GitHub widget to stage, commit, and push your changes back to the remote repository. To create and manage branches, use the branch icon in the GitHub widget. You can create new branches, switch between branches, and merge branches using this interface. To sync your local repository with the remote repository, use the \u201cPull\u201d and \u201cPush\u201d buttons in the GitHub widget. Now, you know how to access and use the JupyterHub GitHub widget running on the cloud. This allows you to work with Git and GitHub directly from your Jupyter Notebook interface, streamlining your workflow and making collaboration easier.","title":"Step 4: Using the JupyterHub GitHub widget"},{"location":"resources/github_basics/#c-github-in-rstudio","text":"Integrating GitHub with RStudio allows users to manage their Git repositories and collaborate on projects directly within the RStudio environment. It offers similar functionality to GitHub Desktop but caters specifically to R users working within RStudio. By configuring RStudio to work with Git, creating or opening RStudio projects, and linking projects to GitHub repositories, users can enjoy a seamless workflow for version control and collaboration. RStudio\u2019s Git pane enables users to stage, commit, and push changes to remote repositories, as well as manage branches and sync local repositories with remote ones, providing a comprehensive solution for R developers working with GitHub.","title":"C. GitHub in Rstudio:"},{"location":"resources/github_basics/#step-1-install-git","text":"Before integrating GitHub with RStudio, you need to have Git installed on your computer. Visit the official Git website ( https://git-scm.com/ ) to download and install the latest version of Git for your operating system.","title":"Step 1: Install Git"},{"location":"resources/github_basics/#step-2-configure-rstudio-to-work-with-git","text":"Open RStudio. Go to \u201cTools\u201d > \u201cGlobal Options\u201d in the top menu. In the \u201cGlobal Options\u201d window, click on the \u201cGit/SVN\u201d tab. Check that the \u201cGit executable\u201d field is pointing to the correct location of the installed Git. If not, click \u201cBrowse\u201d and navigate to the location of the Git executable file (usually found in the \u201cbin\u201d folder of the Git installation directory). Click \u201cOK\u201d to save the changes.","title":"Step 2: Configure RStudio to work with Git"},{"location":"resources/github_basics/#step-3-create-or-open-an-rstudio-project","text":"To create a new RStudio project, go to \u201cFile\u201d > \u201cNew Project\u201d in the top menu. You can either create a new directory or choose an existing one for your project. To open an existing RStudio project, go to \u201cFile\u201d > \u201cOpen Project\u201d and navigate to the project\u2019s \u201c.Rproj\u201d file.","title":"Step 3: Create or open an RStudio project"},{"location":"resources/github_basics/#step-4-link-your-rstudio-project-to-a-github-repository","text":"In the RStudio project, go to the \u201cTools\u201d menu and select \u201cVersion Control\u201d > \u201cProject Setup.\u201d In the \u201cProject Setup\u201d window, select \u201cGit\u201d as the version control system and click \u201cOK.\u201d A new \u201c.git\u201d folder will be created in your project directory, initializing it as a Git repository. Commit any changes you have made so far by clicking on the \u201cCommit\u201d button in the \u201cGit\u201d pane in RStudio. To link your local repository to a remote GitHub repository, go to your GitHub account and create a new repository. Copy the remote repository\u2019s URL (e.g., \u201c https://github.com/username/repository.git \u201d). In RStudio, open the \u201cShell\u201d by going to \u201cTools\u201d > \u201cShell.\u201d In the shell, run the following command to add the remote repository: git remote add origin https://github.com/username/repository.git Replace the URL with the one you copied from your GitHub repository. Push your changes to the remote repository by running the following command in the shell: git push -u origin master Now, your RStudio project is linked to a GitHub repository. You can use the \u201cGit\u201d pane in RStudio to stage, commit, and push changes to the remote repository, as well as manage branches and sync your local repository with the remote one. By integrating GitHub with RStudio, you can streamline your workflow, collaborate more effectively with your team, and manage your Git repositories directly from the RStudio interface.","title":"Step 4: Link your RStudio project to a GitHub repository"},{"location":"resources/github_basics/#ii-github-basics-4-minutes","text":"","title":"II. GitHub Basics (4 minutes)"},{"location":"resources/github_basics/#a-repository","text":"A repository, often abbreviated as \u201crepo,\u201d is the fundamental building block of GitHub. It is a storage space for your project files, including the code, documentation, and other related resources. Each repository also contains the complete history of all changes made to the project files, which is crucial for effective version control. Repositories can be public, allowing anyone to access and contribute, or private, restricting access to specific collaborators.","title":"A. Repository:"},{"location":"resources/github_basics/#b-fork-and-clone","text":"Forking and cloning are two essential operations for working with repositories on GitHub. Forking creates a personal copy of someone else\u2019s repository under your GitHub account, enabling you to make changes to the project without affecting the original repo. Cloning, on the other hand, is the process of downloading a remote repository to your local machine for offline development. In GitHub Desktop, you can clone a repository by selecting \u201cClone a repository from the Internet\u201d and entering the repository URL. In JupyterHub GitHub widget, you can clone a repository by entering the repo URL in the \u201cClone Repository\u201d section of the widget.","title":"B. Fork and Clone:"},{"location":"resources/github_basics/#c-branches","text":"Branches are a critical aspect of Git version control, as they allow you to create multiple parallel versions of your project within a single repository. This is particularly useful when working on new features or bug fixes, as it prevents changes from interfering with the main (or \u201cmaster\u201d) branch until they are ready to be merged. Creating a new branch in GitHub Desktop can be done by clicking the \u201cCurrent Branch\u201d dropdown and selecting \u201cNew Branch.\u201d In JupyterHub GitHub widget, you can create a new branch by clicking the \u201cNew Branch\u201d button in the \u201cBranches\u201d section of the widget.","title":"C. Branches:"},{"location":"resources/github_basics/#d-replace-master-with-main","text":"In recent years, there has been a growing awareness of the importance of inclusive language in technology. One such example is the use of the term \u201cmaster\u201d in the context of the default branch in a GitHub repository. The term \u201cmaster\u201d has historical connections to the \u201cmaster/slave\u201d file structure, which evokes an unsavory colonial past associated with slavery. In light of this, many developers and organizations have begun to replace the term \u201cmaster\u201d with more neutral terms, such as \u201cmain.\u201d We encourage you to follow this practice and change the default branch name in your repositories from \u201cmaster\u201d to \u201cmain\u201d or another suitable alternative. This small change can help promote a more inclusive and welcoming environment within the technology community.","title":"D. Replace \u2018master\u2019 with \u2018main\u2019:"},{"location":"resources/github_basics/#iii-collaboration-and-version-control-5-minutes","text":"","title":"III. Collaboration and Version Control (5 minutes)"},{"location":"resources/github_basics/#a-commits","text":"Commits are snapshots of your project\u2019s changes at a specific point in time, serving as the fundamental building blocks of Git\u2019s version control system. Commits make it possible to track changes, revert to previous versions, and collaborate with others. In GitHub Desktop, you can make a commit by staging the changes you want to include, adding a descriptive commit message, and clicking \u201cCommit to [branch_name].\u201d In JupyterHub GitHub widget, you can create a commit by selecting the files with changes, entering a commit message, and clicking the \u201cCommit\u201d button.","title":"A. Commits:"},{"location":"resources/github_basics/#b-push","text":"In GitHub, \u201cpush\u201d is a fundamental operation in the version control process that transfers commits from your local repository to a remote repository, such as the one hosted on GitHub. When you push changes, you synchronize the remote repository with the latest updates made to your local repository, making those changes accessible to other collaborators working on the same project. This operation ensures that the remote repository reflects the most recent state of your work and allows your team members to stay up to date with your changes. Pushing is an essential step in distributed version control systems like Git, as it promotes efficient collaboration among multiple contributors and provides a centralized location for tracking the project\u2019s history and progress. In GitHub, the concepts of \u201ccommit\u201d and \u201cpush\u201d represent two distinct steps in the version control process. A \u201ccommit\u201d is the action of saving changes to your local repository. When you commit changes, you create a snapshot of your work, accompanied by a unique identifier and an optional descriptive message. Commits allow you to track the progress of your work over time and make it easy to revert to a previous state if necessary. On the other hand, \u201cpush\u201d is the action of transferring your local commits to a remote repository, such as the one hosted on GitHub. Pushing makes your changes accessible to others collaborating on the same project and ensures that the remote repository stays up to date with your local repository. In summary, committing saves changes locally, while pushing synchronizes those changes with a remote repository, allowing for seamless collaboration among multiple contributors.","title":"B. Push:"},{"location":"resources/github_basics/#c-pull-requests","text":"Pull requests are a collaboration feature on GitHub that enables developers to propose changes to a repository, discuss those changes, and ultimately merge them into the main branch. To create a pull request, you must first push your changes to a branch on your fork of the repository. Then, using either GitHub Desktop or JupyterHub GitHub widget, you can navigate to the original repository, click the \u201cPull Request\u201d tab, and create a new pull request. After the pull request is reviewed and approved, it can be merged into the main branch.","title":"C. Pull Requests:"},{"location":"resources/github_basics/#d-merging-and-resolving-conflicts","text":"Merging is the process of combining changes from one branch into another. This is typically done when a feature or bugfix has been completed and is ready to be integrated into the main branch. Conflicts can arise during the merging process if the same lines of code have been modified in both branches. To resolve conflicts, you must manually review the changes and decide which version to keep. In GitHub Desktop, you can merge branches by selecting the target branch and choosing \u201cMerge into Current Branch.\u201d Conflicts will be highlighted, and you can edit the files to resolve them before committing the changes. In JupyterHub GitHub widget, you can merge branches by selecting the target branch in the \u201cBranches\u201d section and clicking the \u201cMerge\u201d button. If conflicts occur, the widget will prompt you to resolve them before completing the merge.","title":"D. Merging and Resolving Conflicts:"},{"location":"resources/github_basics/#iv-additional-features-2-minutes","text":"","title":"IV. Additional Features (2 minutes)"},{"location":"resources/github_basics/#a-issues-and-project-management","text":"Issues are a powerful feature in GitHub that allows developers to track and manage bugs, enhancements, and other tasks within a project. Issues can be assigned to collaborators, labeled for easy organization, and linked to specific commits or pull requests. They provide a centralized location for discussing and addressing project-related concerns, fostering collaboration and transparent communication among team members. Using issues effectively can significantly improve the overall management and organization of your projects.","title":"A. Issues and Project Management:"},{"location":"resources/github_basics/#b-github-pages","text":"GitHub Pages is a service offered by GitHub that allows you to host static websites directly from a repository. By creating a new branch named \u201cgh-pages\u201d in your repository and adding the necessary files (HTML, CSS, JavaScript, etc.), GitHub will automatically build and deploy your website to a publicly accessible URL. This is particularly useful for showcasing project documentation, creating personal portfolios, or hosting project demos. With GitHub Pages, you can take advantage of the version control and collaboration features of GitHub while easily sharing your work with others.","title":"B. GitHub Pages:"},{"location":"resources/github_basics/#v-conclusion-2-minutes","text":"","title":"V. Conclusion (2 minutes)"},{"location":"resources/github_basics/#a-recap-of-the-essentials-of-github","text":"In this brief introduction, we have covered the essentials of GitHub, including the basics of repositories, forking, cloning, branching, commits, pull requests, merging, and resolving conflicts. We have also discussed additional features like issues for project management and GitHub Pages for hosting websites directly from a repository.","title":"A. Recap of the essentials of GitHub:"},{"location":"resources/github_basics/#b-encourage-further-exploration-and-learning","text":"While this introduction provides a solid foundation for understanding and using GitHub, there is still much more to learn and explore. As you continue to use GitHub in your projects, you will discover new features and workflows that can enhance your productivity and collaboration. We encourage you to dive deeper into the platform and experiment with different tools and techniques.","title":"B. Encourage further exploration and learning:"},{"location":"resources/github_basics/#c-share-resources-for-learning-more-about-github","text":"There are many resources available for learning more about GitHub and expanding your skills. Some popular resources include GitHub Guides ( https://guides.github.com/ ), which offers a collection of tutorials and best practices, the official GitHub documentation ( https://docs.github.com/ ), and various online tutorials and courses. By engaging with these resources and participating in the GitHub community, you can further develop your understanding of the platform and become a more proficient user.","title":"C. Share resources for learning more about GitHub:"},{"location":"resources/github_basics/#v-conclusion-2-minutes_1","text":"","title":"V. Conclusion (2 minutes)"},{"location":"resources/github_basics/#a-recap-of-the-essentials-of-github_1","text":"In this brief introduction, we have covered the essentials of GitHub, including the basics of repositories, forking, cloning, branching, commits, pull requests, merging, and resolving conflicts. We have also discussed additional features like issues for project management and GitHub Pages for hosting websites directly from a repository.","title":"A. Recap of the essentials of GitHub:"},{"location":"resources/github_basics/#b-encourage-further-exploration-and-learning_1","text":"While this introduction provides a solid foundation for understanding and using GitHub, there is still much more to learn and explore. As you continue to use GitHub in your projects, you will discover new features and workflows that can enhance your productivity and collaboration. We encourage you to dive deeper into the platform and experiment with different tools and techniques.","title":"B. Encourage further exploration and learning:"},{"location":"resources/github_basics/#c-share-resources-for-learning-more-about-github_1","text":"There are many resources available for learning more about GitHub and expanding your skills. Some popular resources include GitHub Guides ( https://guides.github.com/ ), which offers a collection of tutorials and best practices, the official GitHub documentation ( https://docs.github.com/ ), and various online tutorials and courses. By engaging with these resources and participating in the GitHub community, you can further develop your understanding of the platform and become a more proficient user.","title":"C. Share resources for learning more about GitHub:"},{"location":"resources/manuscript/","text":"Manuscript Title \u00b6 Authors \u00b6 Author 1, Affiliation Author 2, Affiliation ... Abstract \u00b6 A brief summary of the research, its objectives, main findings, and conclusions. Introduction \u00b6 Background information and context setting for the research. Statement of the problem and research objectives. Overview of the methodology and approach. Literature Review \u00b6 Discussion of relevant previous work and how this research contributes to the field. Methodology \u00b6 Detailed description of the research methodology. Explanation of data collection and analysis techniques. Justification for methodological choices. Results \u00b6 Presentation of the research findings. Use of tables, graphs, and figures to illustrate key points. Analysis and interpretation of the results. Discussion \u00b6 Discussion of the implications of the findings. Comparison with previous research in the field. Consideration of the limitations of the study. Conclusion \u00b6 Summary of the main findings. Reflection on the research's significance and potential impact. Suggestions for future research directions. Acknowledgements \u00b6 Acknowledgement of any assistance, funding, or contributions from others. References \u00b6 Bibliographic details of the cited works. Use a consistent citation style throughout. Appendices \u00b6 Additional material that supports the manuscript but is too detailed for the main sections.","title":"Manuscript Title"},{"location":"resources/manuscript/#manuscript-title","text":"","title":"Manuscript Title"},{"location":"resources/manuscript/#authors","text":"Author 1, Affiliation Author 2, Affiliation ...","title":"Authors"},{"location":"resources/manuscript/#abstract","text":"A brief summary of the research, its objectives, main findings, and conclusions.","title":"Abstract"},{"location":"resources/manuscript/#introduction","text":"Background information and context setting for the research. Statement of the problem and research objectives. Overview of the methodology and approach.","title":"Introduction"},{"location":"resources/manuscript/#literature-review","text":"Discussion of relevant previous work and how this research contributes to the field.","title":"Literature Review"},{"location":"resources/manuscript/#methodology","text":"Detailed description of the research methodology. Explanation of data collection and analysis techniques. Justification for methodological choices.","title":"Methodology"},{"location":"resources/manuscript/#results","text":"Presentation of the research findings. Use of tables, graphs, and figures to illustrate key points. Analysis and interpretation of the results.","title":"Results"},{"location":"resources/manuscript/#discussion","text":"Discussion of the implications of the findings. Comparison with previous research in the field. Consideration of the limitations of the study.","title":"Discussion"},{"location":"resources/manuscript/#conclusion","text":"Summary of the main findings. Reflection on the research's significance and potential impact. Suggestions for future research directions.","title":"Conclusion"},{"location":"resources/manuscript/#acknowledgements","text":"Acknowledgement of any assistance, funding, or contributions from others.","title":"Acknowledgements"},{"location":"resources/manuscript/#references","text":"Bibliographic details of the cited works. Use a consistent citation style throughout.","title":"References"},{"location":"resources/manuscript/#appendices","text":"Additional material that supports the manuscript but is too detailed for the main sections.","title":"Appendices"},{"location":"resources/markdown_basics/","text":"Markdown for the Modern Researcher at ESIIL \u00b6 Join us on a HackMD page to practice Markdown Section 1: Mastering Markdown Syntax \u00b6 1. Fundamentals of Text Formatting \u00b6 Headings : Use # for different levels of headings. Heading Level 1 \u00b6 Heading Level 2 \u00b6 Heading Level 3 \u00b6 Lists : Bulleted lists use asterisks, numbers for ordered lists. Item 1 Item 2 Subitem 2.1 Subitem 2.2 First item Second item Bold and Italics : Use asterisks or underscores. Bold Text Italic Text 2. Advanced Structures \u00b6 Tables : Create tables using dashes and pipes. Header 1 Header 2 Header 3 Row 1 Data Data Row 2 Data Data Add a \":\"\" to change text justification. Here the : is added on the left for left justification. | Header 1 | Header 2 | Header 3 | |---------:|--------- |----------| | Row 1 | Data | Data | | Row 2 | Data | Data | A N A L Y T I C S E N R E I N V I R O N M E N T V E L O P M O C O M U N E G A G E L L A H C N E R A T A D E V E L O P W E I T S I T N E I C S R S O I G O L O I B H T L A H T L A E W E G N E L T I T S I T N E I C S N I E E S R E H T O E N I C S L L A H C E G L A N E G A L L E H C N E I C If you hit the boundaries of Markdown's capabilities, you can start to add html directly. Remember, this entire exercisse is to translate to html. Sudoku Puzzle Fill in the blank cells with numbers from 1 to 9, such that each row, column, and 3x3 subgrid contains all the numbers from 1 to 9 without repetition. 5 3 7 6 1 9 5 9 8 6 8 6 3 4 8 3 1 7 2 6 6 2 8 4 1 9 5 8 7 9 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 Blockquotes : Use > for blockquotes. This is a blockquote. It can span multiple lines. 3. Integrating Multimedia \u00b6 Images : Add images using the format ![alt text](image_url) . Videos : Embed videos using HTML in Markdown. <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" frameborder=\"0\" allowfullscreen></iframe> 4. Diagrams with Mermaid \u00b6 Flowcharts : graph TD A[Start] --> B[Analyze Data] B --> C{Is Data Large?} C -->|Yes| D[Apply Big Data Solutions] C -->|No| E[Use Traditional Methods] D --> F[Machine Learning] E --> G[Statistical Analysis] F --> H{Model Accurate?} G --> I[Report Results] H -->|Yes| J[Deploy Model] H -->|No| K[Refine Model] J --> L[Monitor Performance] K --> F L --> M[End: Success] I --> N[End: Report Generated] style A fill:#f9f,stroke:#333,stroke-width:2px style M fill:#9f9,stroke:#333,stroke-width:2px style N fill:#9f9,stroke:#333,stroke-width:2px Mind Maps : mindmap root((ESIIL)) section Data Sources Satellite Imagery ::icon(fa fa-satellite) Remote Sensing Data Drones Aircraft On-ground Sensors Weather Stations IoT Devices Open Environmental Data Public Datasets ::icon(fa fa-database) section Research Focus Climate Change Analysis Ice Melt Patterns Sea Level Rise Biodiversity Monitoring Species Distribution Habitat Fragmentation Geospatial Analysis Techniques Machine Learning Models Predictive Analytics section Applications Conservation Strategies ::icon(fa fa-leaf) Urban Planning Green Spaces Disaster Response Flood Mapping Wildfire Tracking section Tools and Technologies GIS Software QGIS ArcGIS Programming Languages Python R Cloud Computing Platforms AWS Google Earth Engine Data Visualization D3.js Tableau Timelines : gantt title ESIIL Year 2 Project Schedule dateFormat YYYY-MM-DD section CI Sovereign OASIS via private jupiterhubs :2024-08-01, 2024-10-30 OASIS documentation :2024-09-15, 70d Data cube OASIS via cyverse account :2024-09-15, 100d Integrate with ESIIL User Management system :2024-08-01, 2024-11-30 Build badges to deploy DE from mkdoc :2024-09-01, 2024-12-15 Streamline Github ssh key management :2024-10-01, 2024-12-31 Cyverse support (R proxy link) :2024-11-01, 2024-12-31 Cyverse use summary and statistics :2024-08-01, 2024-12-15 section CI Consultation and Education Conferences/Invited talks :2024-08-01, 2024-12-31 Office hours :2024-08-15, 2024-12-15 Proposals :2024-09-01, 2024-11-15 Private lessons :2024-09-15, 2024-11-30 Pre-event trainings :2024-10-01, 2024-12-15 Textbook development w/ education team :2024-08-01, 2024-12-15 Train the trainers / group lessons :2024-08-15, 2024-11-30 Tribal engagement :2024-09-01, 2024-12-15 Ethical Space training :2024-09-15, 2024-12-31 section CI Design and Build Data library (repository) :2024-08-01, 2024-10-30 Analytics library (repository) :2024-08-15, 2024-11-15 Containers (repository) :2024-09-01, 2024-11-30 Cloud infrastructure templates (repository) :2024-09-15, 2024-12-15 Tribal resilience Data Cube :2024-10-01, 2024-12-31 %%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%% gitGraph commit id: \"Start from template\" branch c1 commit id: \"Set up SSH key pair\" commit id: \"Modify _config.yml for GitHub Pages\" commit id: \"Initial website structure\" commit id: \"Add new markdown pages\" commit id: \"Update navigation tree\" commit id: \"Edit existing pages\" commit id: \"Delete old markdown pages\" commit id: \"Finalize website updates\" commit id: \"Add new markdown pages\" commit id: \"Update navigation tree\" checkout c1 branch b1 commit commit checkout c1 merge b1 %%{init: {\"quadrantChart\": {\"chartWidth\": 400, \"chartHeight\": 400}, \"themeVariables\": {\"quadrant1TextFill\": \"#ff0000\"} }}%% quadrantChart x-axis Urgent --> Not Urgent y-axis Not Important --> \"Important \u2764\" quadrant-1 Plan quadrant-2 Do quadrant-3 Delegate quadrant-4 Delete timeline title Major Events in Environmental Science and Data Science section Environmental Science 19th century : Foundations in Ecology and Conservation 1962 : Publication of 'Silent Spring' by Rachel Carson 1970 : First Earth Day 1987 : Brundtland Report introduces Sustainable Development 1992 : Rio Earth Summit 2015 : Paris Agreement on Climate Change section Data Science 1960s-1970s : Development of Database Management Systems 1980s : Emergence of Data Warehousing 1990s : Growth of the World Wide Web and Data Mining 2000s : Big Data and Predictive Analytics 2010s : AI and Machine Learning Revolution 2020s : Integration of AI in Environmental Research erDiagram CAR ||--o{ NAMED-DRIVER : allows CAR { string registrationNumber string make string model } PERSON ||--o{ NAMED-DRIVER : is PERSON { string firstName string lastName int age } --- config: sankey: showValues: false --- sankey-beta NASA Data,Big Data Harmonization,100 Satellite Imagery,Big Data Harmonization,80 Open Environmental Data,Big Data Harmonization,70 Remote Sensing Data,Big Data Harmonization,90 Big Data Harmonization, Data Analysis and Integration,340 Data Analysis and Integration,Climate Change Research,100 Data Analysis and Integration,Biodiversity Monitoring,80 Data Analysis and Integration,Geospatial Mapping,60 Data Analysis and Integration,Urban Planning,50 Data Analysis and Integration,Disaster Response,50 5. Interactive Elements \u00b6 Hyperlinks : Use the format [link text](URL) . Google Play Tetris Embedding Interactive Content : Use HTML tags or specific platform embed codes. <iframe src=\"https://example.com/interactive-content\" width=\"600\" height=\"400\"></iframe> 6. Math Notation \u00b6 Markdown can be combined with LaTeX for mathematical notation, useful in environmental data science for expressing statistical distributions, coordinate systems, and more. This requires a Markdown renderer with LaTeX support (like MathJax or KaTeX). Inline Math : Use single dollar signs for inline math expressions. Representing the normal distribution. Example: The probability density function of the normal distribution is given by \\(f(x|\\mu,\\sigma) = \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\\) .` Display Math : Use double dollar signs for standalone equations. Example: $$ f(x|\\mu,\\sigma) = \\frac{1}{\\sigma\\sqrt{2\\pi}}e {-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right) 2} $$ Common LaTeX Elements for Environmental Data Science : Statistical Distributions : Normal Distribution: \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2} for \\(\\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\\) Poisson Distribution: P(k; \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!} for \\(P(k; \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!}\\) Coordinate Systems : Spherical Coordinates: (r, \\theta, \\phi) for \\((r, \\theta, \\phi)\\) Cartesian Coordinates: (x, y, z) for \\((x, y, z)\\) Geospatial Equations : Haversine Formula for Distance: a = \\sin^2\\left(\\frac{\\Delta\\phi}{2}\\right) + \\cos(\\phi_1)\\cos(\\phi_2)\\sin^2\\left(\\frac{\\Delta\\lambda}{2}\\right) for \\(a = \\sin^2\\left(\\frac{\\Delta\\phi}{2}\\right) + \\cos(\\phi_1)\\cos(\\phi_2)\\sin^2\\left(\\frac{\\Delta\\lambda}{2}\\right)\\) Note: The rendering of these equations as formatted math will depend on your Markdown viewer's LaTeX capabilities. 7. Effective Citations in Markdown \u00b6 Inline Citations \u00b6 Objective: Learn how to use inline citations in Markdown. Example Usage: Inline citation of a single work: Some text with an inline citation. [ @jones :envstudy:2020] Inline citation with specific page or section: More text with a specific section cited. [See @jones :envstudy:2020, \u00a74.2] Contrasting views: Discussion of a topic with a contrasting view. [Contra @smith :climatechange:2019, p. 78] Footnote Citations \u00b6 Objective: Understand how to use footnote citations in Markdown. Example Usage: Citing with a footnote: Some statement in the text. 1 Multiple references to the same footnote: Another statement referring to the same source. 1 A different citation: Additional comment with a new citation. 2 Creating Footnotes \u00b6 Example Syntax: First reference details. Example: Emma Jones, \"Environmental Study,\" Nature Journal, May 2020, https://nature-journal.com/envstudy2020 . \u21a9 \u21a9 Second reference details. Example: David Smith, \"Climate Change Controversies,\" Science Daily, August 2019, https://sciencedaily.com/climatechange2019 . \u21a9","title":"Markdown"},{"location":"resources/markdown_basics/#markdown-for-the-modern-researcher-at-esiil","text":"Join us on a HackMD page to practice Markdown","title":"Markdown for the Modern Researcher at ESIIL"},{"location":"resources/markdown_basics/#section-1-mastering-markdown-syntax","text":"","title":"Section 1: Mastering Markdown Syntax"},{"location":"resources/markdown_basics/#1-fundamentals-of-text-formatting","text":"Headings : Use # for different levels of headings.","title":"1. Fundamentals of Text Formatting"},{"location":"resources/markdown_basics/#heading-level-1","text":"","title":"Heading Level 1"},{"location":"resources/markdown_basics/#heading-level-2","text":"","title":"Heading Level 2"},{"location":"resources/markdown_basics/#heading-level-3","text":"Lists : Bulleted lists use asterisks, numbers for ordered lists. Item 1 Item 2 Subitem 2.1 Subitem 2.2 First item Second item Bold and Italics : Use asterisks or underscores. Bold Text Italic Text","title":"Heading Level 3"},{"location":"resources/markdown_basics/#2-advanced-structures","text":"Tables : Create tables using dashes and pipes. Header 1 Header 2 Header 3 Row 1 Data Data Row 2 Data Data Add a \":\"\" to change text justification. Here the : is added on the left for left justification. | Header 1 | Header 2 | Header 3 | |---------:|--------- |----------| | Row 1 | Data | Data | | Row 2 | Data | Data | A N A L Y T I C S E N R E I N V I R O N M E N T V E L O P M O C O M U N E G A G E L L A H C N E R A T A D E V E L O P W E I T S I T N E I C S R S O I G O L O I B H T L A H T L A E W E G N E L T I T S I T N E I C S N I E E S R E H T O E N I C S L L A H C E G L A N E G A L L E H C N E I C If you hit the boundaries of Markdown's capabilities, you can start to add html directly. Remember, this entire exercisse is to translate to html. Sudoku Puzzle Fill in the blank cells with numbers from 1 to 9, such that each row, column, and 3x3 subgrid contains all the numbers from 1 to 9 without repetition. 5 3 7 6 1 9 5 9 8 6 8 6 3 4 8 3 1 7 2 6 6 2 8 4 1 9 5 8 7 9 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 Blockquotes : Use > for blockquotes. This is a blockquote. It can span multiple lines.","title":"2. Advanced Structures"},{"location":"resources/markdown_basics/#3-integrating-multimedia","text":"Images : Add images using the format ![alt text](image_url) . Videos : Embed videos using HTML in Markdown. <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" frameborder=\"0\" allowfullscreen></iframe>","title":"3. Integrating Multimedia"},{"location":"resources/markdown_basics/#4-diagrams-with-mermaid","text":"Flowcharts : graph TD A[Start] --> B[Analyze Data] B --> C{Is Data Large?} C -->|Yes| D[Apply Big Data Solutions] C -->|No| E[Use Traditional Methods] D --> F[Machine Learning] E --> G[Statistical Analysis] F --> H{Model Accurate?} G --> I[Report Results] H -->|Yes| J[Deploy Model] H -->|No| K[Refine Model] J --> L[Monitor Performance] K --> F L --> M[End: Success] I --> N[End: Report Generated] style A fill:#f9f,stroke:#333,stroke-width:2px style M fill:#9f9,stroke:#333,stroke-width:2px style N fill:#9f9,stroke:#333,stroke-width:2px Mind Maps : mindmap root((ESIIL)) section Data Sources Satellite Imagery ::icon(fa fa-satellite) Remote Sensing Data Drones Aircraft On-ground Sensors Weather Stations IoT Devices Open Environmental Data Public Datasets ::icon(fa fa-database) section Research Focus Climate Change Analysis Ice Melt Patterns Sea Level Rise Biodiversity Monitoring Species Distribution Habitat Fragmentation Geospatial Analysis Techniques Machine Learning Models Predictive Analytics section Applications Conservation Strategies ::icon(fa fa-leaf) Urban Planning Green Spaces Disaster Response Flood Mapping Wildfire Tracking section Tools and Technologies GIS Software QGIS ArcGIS Programming Languages Python R Cloud Computing Platforms AWS Google Earth Engine Data Visualization D3.js Tableau Timelines : gantt title ESIIL Year 2 Project Schedule dateFormat YYYY-MM-DD section CI Sovereign OASIS via private jupiterhubs :2024-08-01, 2024-10-30 OASIS documentation :2024-09-15, 70d Data cube OASIS via cyverse account :2024-09-15, 100d Integrate with ESIIL User Management system :2024-08-01, 2024-11-30 Build badges to deploy DE from mkdoc :2024-09-01, 2024-12-15 Streamline Github ssh key management :2024-10-01, 2024-12-31 Cyverse support (R proxy link) :2024-11-01, 2024-12-31 Cyverse use summary and statistics :2024-08-01, 2024-12-15 section CI Consultation and Education Conferences/Invited talks :2024-08-01, 2024-12-31 Office hours :2024-08-15, 2024-12-15 Proposals :2024-09-01, 2024-11-15 Private lessons :2024-09-15, 2024-11-30 Pre-event trainings :2024-10-01, 2024-12-15 Textbook development w/ education team :2024-08-01, 2024-12-15 Train the trainers / group lessons :2024-08-15, 2024-11-30 Tribal engagement :2024-09-01, 2024-12-15 Ethical Space training :2024-09-15, 2024-12-31 section CI Design and Build Data library (repository) :2024-08-01, 2024-10-30 Analytics library (repository) :2024-08-15, 2024-11-15 Containers (repository) :2024-09-01, 2024-11-30 Cloud infrastructure templates (repository) :2024-09-15, 2024-12-15 Tribal resilience Data Cube :2024-10-01, 2024-12-31 %%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%% gitGraph commit id: \"Start from template\" branch c1 commit id: \"Set up SSH key pair\" commit id: \"Modify _config.yml for GitHub Pages\" commit id: \"Initial website structure\" commit id: \"Add new markdown pages\" commit id: \"Update navigation tree\" commit id: \"Edit existing pages\" commit id: \"Delete old markdown pages\" commit id: \"Finalize website updates\" commit id: \"Add new markdown pages\" commit id: \"Update navigation tree\" checkout c1 branch b1 commit commit checkout c1 merge b1 %%{init: {\"quadrantChart\": {\"chartWidth\": 400, \"chartHeight\": 400}, \"themeVariables\": {\"quadrant1TextFill\": \"#ff0000\"} }}%% quadrantChart x-axis Urgent --> Not Urgent y-axis Not Important --> \"Important \u2764\" quadrant-1 Plan quadrant-2 Do quadrant-3 Delegate quadrant-4 Delete timeline title Major Events in Environmental Science and Data Science section Environmental Science 19th century : Foundations in Ecology and Conservation 1962 : Publication of 'Silent Spring' by Rachel Carson 1970 : First Earth Day 1987 : Brundtland Report introduces Sustainable Development 1992 : Rio Earth Summit 2015 : Paris Agreement on Climate Change section Data Science 1960s-1970s : Development of Database Management Systems 1980s : Emergence of Data Warehousing 1990s : Growth of the World Wide Web and Data Mining 2000s : Big Data and Predictive Analytics 2010s : AI and Machine Learning Revolution 2020s : Integration of AI in Environmental Research erDiagram CAR ||--o{ NAMED-DRIVER : allows CAR { string registrationNumber string make string model } PERSON ||--o{ NAMED-DRIVER : is PERSON { string firstName string lastName int age } --- config: sankey: showValues: false --- sankey-beta NASA Data,Big Data Harmonization,100 Satellite Imagery,Big Data Harmonization,80 Open Environmental Data,Big Data Harmonization,70 Remote Sensing Data,Big Data Harmonization,90 Big Data Harmonization, Data Analysis and Integration,340 Data Analysis and Integration,Climate Change Research,100 Data Analysis and Integration,Biodiversity Monitoring,80 Data Analysis and Integration,Geospatial Mapping,60 Data Analysis and Integration,Urban Planning,50 Data Analysis and Integration,Disaster Response,50","title":"4. Diagrams with Mermaid"},{"location":"resources/markdown_basics/#5-interactive-elements","text":"Hyperlinks : Use the format [link text](URL) . Google Play Tetris Embedding Interactive Content : Use HTML tags or specific platform embed codes. <iframe src=\"https://example.com/interactive-content\" width=\"600\" height=\"400\"></iframe>","title":"5. Interactive Elements"},{"location":"resources/markdown_basics/#6-math-notation","text":"Markdown can be combined with LaTeX for mathematical notation, useful in environmental data science for expressing statistical distributions, coordinate systems, and more. This requires a Markdown renderer with LaTeX support (like MathJax or KaTeX). Inline Math : Use single dollar signs for inline math expressions. Representing the normal distribution. Example: The probability density function of the normal distribution is given by \\(f(x|\\mu,\\sigma) = \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\\) .` Display Math : Use double dollar signs for standalone equations. Example: $$ f(x|\\mu,\\sigma) = \\frac{1}{\\sigma\\sqrt{2\\pi}}e {-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right) 2} $$ Common LaTeX Elements for Environmental Data Science : Statistical Distributions : Normal Distribution: \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2} for \\(\\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\\) Poisson Distribution: P(k; \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!} for \\(P(k; \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!}\\) Coordinate Systems : Spherical Coordinates: (r, \\theta, \\phi) for \\((r, \\theta, \\phi)\\) Cartesian Coordinates: (x, y, z) for \\((x, y, z)\\) Geospatial Equations : Haversine Formula for Distance: a = \\sin^2\\left(\\frac{\\Delta\\phi}{2}\\right) + \\cos(\\phi_1)\\cos(\\phi_2)\\sin^2\\left(\\frac{\\Delta\\lambda}{2}\\right) for \\(a = \\sin^2\\left(\\frac{\\Delta\\phi}{2}\\right) + \\cos(\\phi_1)\\cos(\\phi_2)\\sin^2\\left(\\frac{\\Delta\\lambda}{2}\\right)\\) Note: The rendering of these equations as formatted math will depend on your Markdown viewer's LaTeX capabilities.","title":"6. Math Notation"},{"location":"resources/markdown_basics/#7-effective-citations-in-markdown","text":"","title":"7. Effective Citations in Markdown"},{"location":"resources/markdown_basics/#inline-citations","text":"Objective: Learn how to use inline citations in Markdown. Example Usage: Inline citation of a single work: Some text with an inline citation. [ @jones :envstudy:2020] Inline citation with specific page or section: More text with a specific section cited. [See @jones :envstudy:2020, \u00a74.2] Contrasting views: Discussion of a topic with a contrasting view. [Contra @smith :climatechange:2019, p. 78]","title":"Inline Citations"},{"location":"resources/markdown_basics/#footnote-citations","text":"Objective: Understand how to use footnote citations in Markdown. Example Usage: Citing with a footnote: Some statement in the text. 1 Multiple references to the same footnote: Another statement referring to the same source. 1 A different citation: Additional comment with a new citation. 2","title":"Footnote Citations"},{"location":"resources/markdown_basics/#creating-footnotes","text":"Example Syntax: First reference details. Example: Emma Jones, \"Environmental Study,\" Nature Journal, May 2020, https://nature-journal.com/envstudy2020 . \u21a9 \u21a9 Second reference details. Example: David Smith, \"Climate Change Controversies,\" Science Daily, August 2019, https://sciencedaily.com/climatechange2019 . \u21a9","title":"Creating Footnotes"},{"location":"resources/notes_from_readings/","text":"Literature Reading Notes \u00b6 Reference Information \u00b6 Title: Authors: Publication Year: Journal/Source: DOI/URL: Summary \u00b6 Brief summary of the main objective, research question, or thesis of the literature. Key Findings \u00b6 Major findings or conclusions: Finding 1 Finding 2 ... Methodology \u00b6 Description of research methodology, techniques, or approaches. Notable tools, datasets, or analytical methods used. Theoretical Framework \u00b6 Theoretical models or frameworks underpinning the research. Positioning within the broader field. Critical Analysis \u00b6 Strengths: Well-executed aspects or convincing arguments. Limitations: Weaknesses, gaps, or biases. Insights: New understandings or perspectives gained. Connections to Other Work \u00b6 Similarities or differences with other readings. Complementarity to other studies. Quotations and Notes \u00b6 Significant quotes: \"Quote here.\" - Author Name, page number Additional notes or comments. Personal Reflections \u00b6 Influence on understanding or perspective. Potential impact on future research or studies. Action Items \u00b6 Follow-up actions such as readings, discussions, or research activities: Action item 1 Action item 2 ...","title":"Literature Reading Notes"},{"location":"resources/notes_from_readings/#literature-reading-notes","text":"","title":"Literature Reading Notes"},{"location":"resources/notes_from_readings/#reference-information","text":"Title: Authors: Publication Year: Journal/Source: DOI/URL:","title":"Reference Information"},{"location":"resources/notes_from_readings/#summary","text":"Brief summary of the main objective, research question, or thesis of the literature.","title":"Summary"},{"location":"resources/notes_from_readings/#key-findings","text":"Major findings or conclusions: Finding 1 Finding 2 ...","title":"Key Findings"},{"location":"resources/notes_from_readings/#methodology","text":"Description of research methodology, techniques, or approaches. Notable tools, datasets, or analytical methods used.","title":"Methodology"},{"location":"resources/notes_from_readings/#theoretical-framework","text":"Theoretical models or frameworks underpinning the research. Positioning within the broader field.","title":"Theoretical Framework"},{"location":"resources/notes_from_readings/#critical-analysis","text":"Strengths: Well-executed aspects or convincing arguments. Limitations: Weaknesses, gaps, or biases. Insights: New understandings or perspectives gained.","title":"Critical Analysis"},{"location":"resources/notes_from_readings/#connections-to-other-work","text":"Similarities or differences with other readings. Complementarity to other studies.","title":"Connections to Other Work"},{"location":"resources/notes_from_readings/#quotations-and-notes","text":"Significant quotes: \"Quote here.\" - Author Name, page number Additional notes or comments.","title":"Quotations and Notes"},{"location":"resources/notes_from_readings/#personal-reflections","text":"Influence on understanding or perspective. Potential impact on future research or studies.","title":"Personal Reflections"},{"location":"resources/notes_from_readings/#action-items","text":"Follow-up actions such as readings, discussions, or research activities: Action item 1 Action item 2 ...","title":"Action Items"},{"location":"resources/post_meeting_notes/","text":"Post-Meeting Notes Template \u00b6 Meeting Details \u00b6 Date: Time: Location: Facilitator: Attendees \u00b6 List of attendees Agenda \u00b6 1. Review of Meeting Goals \u00b6 Recap the primary objectives and if they were met. 2. Manuscript Development \u00b6 Discuss the status of current manuscript drafts. Assign writing and editing tasks for different sections of the manuscript. Set deadlines for draft completion and review. 3. Research Highlights \u00b6 Identify key findings and outcomes that should be emphasized in the publications. Discuss any new research insights that emerged from the meeting. 4. Publication Strategy \u00b6 Decide on target journals or conferences for publication submission. Discuss authorship order and contributions. Plan for any additional data or research needed to strengthen the manuscript. 5. Editing and Review Process \u00b6 Establish a peer-review process within the group for initial feedback. Assign members to focus on specific aspects of editing, such as clarity, grammar, and technical accuracy. Agree on a schedule for review rounds to ensure timely submission. 6. Responsibilities and Expectations \u00b6 Clearly define what is expected from each member before the next meeting. Discuss communication methods for progress updates and questions. 7. Closing Remarks \u00b6 Summarize the discussion and confirm the action plan. Reiterate the importance of meeting the set deadlines and maintaining communication. Action Items \u00b6 Draft introduction section: Responsible person(s) - Deadline Compile and analyze additional data: Responsible person(s) - Deadline Draft methodology section: Responsible person(s) - Deadline ... Coordinate manuscript peer review: Responsible person(s) - Deadline Next Steps \u00b6 Define the timeline for the submission process. Schedule follow-up meetings or check-ins to monitor progress. Notes \u00b6 (Additional notes, comments, or observations made during the meeting.)","title":"Post-Meeting Notes Template"},{"location":"resources/post_meeting_notes/#post-meeting-notes-template","text":"","title":"Post-Meeting Notes Template"},{"location":"resources/post_meeting_notes/#meeting-details","text":"Date: Time: Location: Facilitator:","title":"Meeting Details"},{"location":"resources/post_meeting_notes/#attendees","text":"List of attendees","title":"Attendees"},{"location":"resources/post_meeting_notes/#agenda","text":"","title":"Agenda"},{"location":"resources/post_meeting_notes/#1-review-of-meeting-goals","text":"Recap the primary objectives and if they were met.","title":"1. Review of Meeting Goals"},{"location":"resources/post_meeting_notes/#2-manuscript-development","text":"Discuss the status of current manuscript drafts. Assign writing and editing tasks for different sections of the manuscript. Set deadlines for draft completion and review.","title":"2. Manuscript Development"},{"location":"resources/post_meeting_notes/#3-research-highlights","text":"Identify key findings and outcomes that should be emphasized in the publications. Discuss any new research insights that emerged from the meeting.","title":"3. Research Highlights"},{"location":"resources/post_meeting_notes/#4-publication-strategy","text":"Decide on target journals or conferences for publication submission. Discuss authorship order and contributions. Plan for any additional data or research needed to strengthen the manuscript.","title":"4. Publication Strategy"},{"location":"resources/post_meeting_notes/#5-editing-and-review-process","text":"Establish a peer-review process within the group for initial feedback. Assign members to focus on specific aspects of editing, such as clarity, grammar, and technical accuracy. Agree on a schedule for review rounds to ensure timely submission.","title":"5. Editing and Review Process"},{"location":"resources/post_meeting_notes/#6-responsibilities-and-expectations","text":"Clearly define what is expected from each member before the next meeting. Discuss communication methods for progress updates and questions.","title":"6. Responsibilities and Expectations"},{"location":"resources/post_meeting_notes/#7-closing-remarks","text":"Summarize the discussion and confirm the action plan. Reiterate the importance of meeting the set deadlines and maintaining communication.","title":"7. Closing Remarks"},{"location":"resources/post_meeting_notes/#action-items","text":"Draft introduction section: Responsible person(s) - Deadline Compile and analyze additional data: Responsible person(s) - Deadline Draft methodology section: Responsible person(s) - Deadline ... Coordinate manuscript peer review: Responsible person(s) - Deadline","title":"Action Items"},{"location":"resources/post_meeting_notes/#next-steps","text":"Define the timeline for the submission process. Schedule follow-up meetings or check-ins to monitor progress.","title":"Next Steps"},{"location":"resources/post_meeting_notes/#notes","text":"(Additional notes, comments, or observations made during the meeting.)","title":"Notes"},{"location":"resources/pre_meeting_notes/","text":"Pre-Meeting Notes \u00b6 Meeting Details \u00b6 Date: Time: Location: Facilitator: Attendees \u00b6 List of attendees Agenda \u00b6 1. Opening Remarks \u00b6 Brief welcome and overview of the meeting's objectives. 2. Introductions \u00b6 Roundtable introductions for all attendees. Share a personal note or interesting fact to foster camaraderie. 3. Planning \u00b6 Discuss the agenda for the primary meetings. Outline the key topics and issues to address. Assign roles for note-taking, timekeeping, and facilitation in primary meetings. 4. Goal Setting \u00b6 Establish clear, actionable goals for the upcoming period. Identify specific outcomes desired from the primary meetings. Agree on metrics or indicators of success for these goals. 5. Camaraderie Building \u00b6 Icebreaker activity or team-building exercise. Share expectations and aspirations for the group's progress. Highlight the importance of collaboration and mutual support. 6. Open Discussion \u00b6 Allow for any additional topics, concerns, or ideas to be brought forward. 7. Closing Remarks \u00b6 Summarize the discussions and confirm the next steps. Confirm dates and times for primary meetings. Express appreciation for participation. Action Items \u00b6 Action item 1: Responsible person(s) - Deadline Action item 2: Responsible person(s) - Deadline ... Notes \u00b6 (Any additional notes or comments about the meeting.)","title":"Pre-Meeting Notes"},{"location":"resources/pre_meeting_notes/#pre-meeting-notes","text":"","title":"Pre-Meeting Notes"},{"location":"resources/pre_meeting_notes/#meeting-details","text":"Date: Time: Location: Facilitator:","title":"Meeting Details"},{"location":"resources/pre_meeting_notes/#attendees","text":"List of attendees","title":"Attendees"},{"location":"resources/pre_meeting_notes/#agenda","text":"","title":"Agenda"},{"location":"resources/pre_meeting_notes/#1-opening-remarks","text":"Brief welcome and overview of the meeting's objectives.","title":"1. Opening Remarks"},{"location":"resources/pre_meeting_notes/#2-introductions","text":"Roundtable introductions for all attendees. Share a personal note or interesting fact to foster camaraderie.","title":"2. Introductions"},{"location":"resources/pre_meeting_notes/#3-planning","text":"Discuss the agenda for the primary meetings. Outline the key topics and issues to address. Assign roles for note-taking, timekeeping, and facilitation in primary meetings.","title":"3. Planning"},{"location":"resources/pre_meeting_notes/#4-goal-setting","text":"Establish clear, actionable goals for the upcoming period. Identify specific outcomes desired from the primary meetings. Agree on metrics or indicators of success for these goals.","title":"4. Goal Setting"},{"location":"resources/pre_meeting_notes/#5-camaraderie-building","text":"Icebreaker activity or team-building exercise. Share expectations and aspirations for the group's progress. Highlight the importance of collaboration and mutual support.","title":"5. Camaraderie Building"},{"location":"resources/pre_meeting_notes/#6-open-discussion","text":"Allow for any additional topics, concerns, or ideas to be brought forward.","title":"6. Open Discussion"},{"location":"resources/pre_meeting_notes/#7-closing-remarks","text":"Summarize the discussions and confirm the next steps. Confirm dates and times for primary meetings. Express appreciation for participation.","title":"7. Closing Remarks"},{"location":"resources/pre_meeting_notes/#action-items","text":"Action item 1: Responsible person(s) - Deadline Action item 2: Responsible person(s) - Deadline ...","title":"Action Items"},{"location":"resources/pre_meeting_notes/#notes","text":"(Any additional notes or comments about the meeting.)","title":"Notes"},{"location":"resources/second_meeting_notes/","text":"Primary Meeting Day 6-10: Progress and Development \u00b6 Meeting Details \u00b6 Dates: Times: Location: Facilitator: Attendees \u00b6 List of attendees Daily Agenda \u00b6 Day 6: Review and Refine \u00b6 Recap of Previous Sessions \u00b6 Summary of progress made since the last meeting. Review of action items and milestones achieved. Refinement of Goals and Tasks \u00b6 Reassessment and adjustment of goals based on current progress. Identification of any new challenges or opportunities. Day 7-9: In-Depth Work Sessions \u00b6 Daily Goals \u00b6 Clear objectives for each day\u2019s work sessions. Task Progress Updates \u00b6 Brief reports from team members on their assigned tasks. Collaborative problem-solving for any issues encountered. Theory and Data Integration \u00b6 Continued discussions on aligning theoretical frameworks with data analysis. Workshops or breakout sessions for detailed aspects of the project. Evening Collaborative Activities \u00b6 Informal sessions to encourage ongoing dialogue and collaboration. Day 10: Mid-Point Review \u00b6 Progress Evaluation \u00b6 Assessment of the work done during the week. Feedback sessions to ensure quality and consistency in outputs. Documentation and Record-Keeping \u00b6 Ensure thorough documentation of methods, results, and decisions. Establish a system for organizing and sharing this documentation. Planning Forward \u00b6 Setting objectives for the next phase of the project. Adjusting the roadmap as necessary based on insights from the week\u2019s work. Detailed Notes \u00b6 Day 6 Notes \u00b6 ... Day 7 Notes \u00b6 ... Day 8 Notes \u00b6 ... Day 9 Notes \u00b6 ... Day 10 Notes \u00b6 ... Action Items \u00b6 Specific task: Assigned to - Deadline Specific task: Assigned to - Deadline ... Reflections and Comments \u00b6 (Space for any additional thoughts, insights, or personal reflections on the meeting.)","title":"Primary Meeting Day 6-10: Progress and Development"},{"location":"resources/second_meeting_notes/#primary-meeting-day-6-10-progress-and-development","text":"","title":"Primary Meeting Day 6-10: Progress and Development"},{"location":"resources/second_meeting_notes/#meeting-details","text":"Dates: Times: Location: Facilitator:","title":"Meeting Details"},{"location":"resources/second_meeting_notes/#attendees","text":"List of attendees","title":"Attendees"},{"location":"resources/second_meeting_notes/#daily-agenda","text":"","title":"Daily Agenda"},{"location":"resources/second_meeting_notes/#day-6-review-and-refine","text":"","title":"Day 6: Review and Refine"},{"location":"resources/second_meeting_notes/#recap-of-previous-sessions","text":"Summary of progress made since the last meeting. Review of action items and milestones achieved.","title":"Recap of Previous Sessions"},{"location":"resources/second_meeting_notes/#refinement-of-goals-and-tasks","text":"Reassessment and adjustment of goals based on current progress. Identification of any new challenges or opportunities.","title":"Refinement of Goals and Tasks"},{"location":"resources/second_meeting_notes/#day-7-9-in-depth-work-sessions","text":"","title":"Day 7-9: In-Depth Work Sessions"},{"location":"resources/second_meeting_notes/#daily-goals","text":"Clear objectives for each day\u2019s work sessions.","title":"Daily Goals"},{"location":"resources/second_meeting_notes/#task-progress-updates","text":"Brief reports from team members on their assigned tasks. Collaborative problem-solving for any issues encountered.","title":"Task Progress Updates"},{"location":"resources/second_meeting_notes/#theory-and-data-integration","text":"Continued discussions on aligning theoretical frameworks with data analysis. Workshops or breakout sessions for detailed aspects of the project.","title":"Theory and Data Integration"},{"location":"resources/second_meeting_notes/#evening-collaborative-activities","text":"Informal sessions to encourage ongoing dialogue and collaboration.","title":"Evening Collaborative Activities"},{"location":"resources/second_meeting_notes/#day-10-mid-point-review","text":"","title":"Day 10: Mid-Point Review"},{"location":"resources/second_meeting_notes/#progress-evaluation","text":"Assessment of the work done during the week. Feedback sessions to ensure quality and consistency in outputs.","title":"Progress Evaluation"},{"location":"resources/second_meeting_notes/#documentation-and-record-keeping","text":"Ensure thorough documentation of methods, results, and decisions. Establish a system for organizing and sharing this documentation.","title":"Documentation and Record-Keeping"},{"location":"resources/second_meeting_notes/#planning-forward","text":"Setting objectives for the next phase of the project. Adjusting the roadmap as necessary based on insights from the week\u2019s work.","title":"Planning Forward"},{"location":"resources/second_meeting_notes/#detailed-notes","text":"","title":"Detailed Notes"},{"location":"resources/second_meeting_notes/#day-6-notes","text":"...","title":"Day 6 Notes"},{"location":"resources/second_meeting_notes/#day-7-notes","text":"...","title":"Day 7 Notes"},{"location":"resources/second_meeting_notes/#day-8-notes","text":"...","title":"Day 8 Notes"},{"location":"resources/second_meeting_notes/#day-9-notes","text":"...","title":"Day 9 Notes"},{"location":"resources/second_meeting_notes/#day-10-notes","text":"...","title":"Day 10 Notes"},{"location":"resources/second_meeting_notes/#action-items","text":"Specific task: Assigned to - Deadline Specific task: Assigned to - Deadline ...","title":"Action Items"},{"location":"resources/second_meeting_notes/#reflections-and-comments","text":"(Space for any additional thoughts, insights, or personal reflections on the meeting.)","title":"Reflections and Comments"},{"location":"resources/third_meeting_notes/","text":"Primary Meeting Day 11-15: Finalization and Conclusion \u00b6 Meeting Details \u00b6 Dates: Times: Location: Facilitator: Attendees \u00b6 List of attendees Daily Agenda \u00b6 Day 11: Alignment and Focus \u00b6 Realigning Objectives \u00b6 Review the project's main goals to ensure alignment with the final output. Address any misalignments or deviations from the original plan. Prioritization of Tasks \u00b6 Identify critical tasks that need to be completed. Allocate resources and efforts to ensure these priorities are met. Day 12-14: Intensive Work Period \u00b6 Task Completion \u00b6 Dedicated time for team members to complete their individual contributions. Regular check-ins to track progress and address any blockers. Integration of Work \u00b6 Begin to combine individual contributions into a cohesive whole. Review the integration to ensure consistency and coherency across the project. Final Reviews and Edits \u00b6 Conduct thorough reviews of the project's outputs. Perform final edits to refine the quality of the work. Day 15: Closure and Celebration \u00b6 Final Presentation \u00b6 Present the completed project to the group. Discuss any last-minute adjustments or refinements needed. Reflective Session \u00b6 Reflect on the achievements and learnings from the project. Share appreciation for the team's hard work and dedication. Celebration \u00b6 Acknowledge the successful completion of the project. Plan for any dissemination of the project's findings or outputs. Detailed Notes \u00b6 Day 11 Notes \u00b6 ... Day 12 Notes \u00b6 ... Day 13 Notes \u00b6 ... Day 14 Notes \u00b6 ... Day 15 Notes \u00b6 ... Action Items \u00b6 Finalize manuscript for publication: Assigned to - Deadline Prepare data for repository submission: Assigned to - Deadline Organize project materials for archival: Assigned to - Deadline ... Reflections and Comments \u00b6 (Space for any additional thoughts, insights, or personal reflections on the meeting and the project as a whole.) Next Steps \u00b6 Define the publication and dissemination plan. Outline any follow-up research or projects that have stemmed from this work. Additional Documentation \u00b6 (Include or link to any additional documents, charts, or resources that were created or referenced during the meeting.)","title":"Primary Meeting Day 11-15: Finalization and Conclusion"},{"location":"resources/third_meeting_notes/#primary-meeting-day-11-15-finalization-and-conclusion","text":"","title":"Primary Meeting Day 11-15: Finalization and Conclusion"},{"location":"resources/third_meeting_notes/#meeting-details","text":"Dates: Times: Location: Facilitator:","title":"Meeting Details"},{"location":"resources/third_meeting_notes/#attendees","text":"List of attendees","title":"Attendees"},{"location":"resources/third_meeting_notes/#daily-agenda","text":"","title":"Daily Agenda"},{"location":"resources/third_meeting_notes/#day-11-alignment-and-focus","text":"","title":"Day 11: Alignment and Focus"},{"location":"resources/third_meeting_notes/#realigning-objectives","text":"Review the project's main goals to ensure alignment with the final output. Address any misalignments or deviations from the original plan.","title":"Realigning Objectives"},{"location":"resources/third_meeting_notes/#prioritization-of-tasks","text":"Identify critical tasks that need to be completed. Allocate resources and efforts to ensure these priorities are met.","title":"Prioritization of Tasks"},{"location":"resources/third_meeting_notes/#day-12-14-intensive-work-period","text":"","title":"Day 12-14: Intensive Work Period"},{"location":"resources/third_meeting_notes/#task-completion","text":"Dedicated time for team members to complete their individual contributions. Regular check-ins to track progress and address any blockers.","title":"Task Completion"},{"location":"resources/third_meeting_notes/#integration-of-work","text":"Begin to combine individual contributions into a cohesive whole. Review the integration to ensure consistency and coherency across the project.","title":"Integration of Work"},{"location":"resources/third_meeting_notes/#final-reviews-and-edits","text":"Conduct thorough reviews of the project's outputs. Perform final edits to refine the quality of the work.","title":"Final Reviews and Edits"},{"location":"resources/third_meeting_notes/#day-15-closure-and-celebration","text":"","title":"Day 15: Closure and Celebration"},{"location":"resources/third_meeting_notes/#final-presentation","text":"Present the completed project to the group. Discuss any last-minute adjustments or refinements needed.","title":"Final Presentation"},{"location":"resources/third_meeting_notes/#reflective-session","text":"Reflect on the achievements and learnings from the project. Share appreciation for the team's hard work and dedication.","title":"Reflective Session"},{"location":"resources/third_meeting_notes/#celebration","text":"Acknowledge the successful completion of the project. Plan for any dissemination of the project's findings or outputs.","title":"Celebration"},{"location":"resources/third_meeting_notes/#detailed-notes","text":"","title":"Detailed Notes"},{"location":"resources/third_meeting_notes/#day-11-notes","text":"...","title":"Day 11 Notes"},{"location":"resources/third_meeting_notes/#day-12-notes","text":"...","title":"Day 12 Notes"},{"location":"resources/third_meeting_notes/#day-13-notes","text":"...","title":"Day 13 Notes"},{"location":"resources/third_meeting_notes/#day-14-notes","text":"...","title":"Day 14 Notes"},{"location":"resources/third_meeting_notes/#day-15-notes","text":"...","title":"Day 15 Notes"},{"location":"resources/third_meeting_notes/#action-items","text":"Finalize manuscript for publication: Assigned to - Deadline Prepare data for repository submission: Assigned to - Deadline Organize project materials for archival: Assigned to - Deadline ...","title":"Action Items"},{"location":"resources/third_meeting_notes/#reflections-and-comments","text":"(Space for any additional thoughts, insights, or personal reflections on the meeting and the project as a whole.)","title":"Reflections and Comments"},{"location":"resources/third_meeting_notes/#next-steps","text":"Define the publication and dissemination plan. Outline any follow-up research or projects that have stemmed from this work.","title":"Next Steps"},{"location":"resources/third_meeting_notes/#additional-documentation","text":"(Include or link to any additional documents, charts, or resources that were created or referenced during the meeting.)","title":"Additional Documentation"},{"location":"resources/visualizations/","text":"Visualization Strategy and Development Documentation \u00b6 Overview \u00b6 Brief overview of the visualization goals and their alignment with the overall project objectives. Visualization Strategy \u00b6 Identifying Key Messages \u00b6 Discuss main messages or insights to communicate through visualizations. Identify target audience and their specific needs. Selecting Appropriate Visualization Types \u00b6 Explore different types of visualizations (charts, graphs, 3D, interactive elements) suitable for the data and message. Brainstorm creative visualization approaches. Visualization Development \u00b6 Code-Generated Visualizations \u00b6 Outline initial visualizations generated from the data pipeline. Include code snippets and explanations. # Example Python code for a basic plot import matplotlib.pyplot as plt plt . plot ( data [ 'x' ], data [ 'y' ]) plt . show () Enhancing Visualizations \u00b6 Steps for annotating, animating, creating 3D, immersive, or interactive visualizations. Discuss challenges and solutions in enhancing visuals. Versioning and Iterations \u00b6 Document different versions and iterations of visualizations. Reflect on improvements or changes in each version. Finalizing Visualizations \u00b6 Process of finalizing visuals for presentation or publication. Feedback incorporation from team or test audiences. Documentation of Tools and Resources \u00b6 List software, libraries, and tools used for visualization. Reference external resources or tutorials. Conclusions \u00b6 Summarize the visualization process and contributions to the project. Reflect on lessons learned and potential future improvements. References \u00b6 Cite external sources, inspirations, or frameworks used in visualization.","title":"Visualization Strategy and Development Documentation"},{"location":"resources/visualizations/#visualization-strategy-and-development-documentation","text":"","title":"Visualization Strategy and Development Documentation"},{"location":"resources/visualizations/#overview","text":"Brief overview of the visualization goals and their alignment with the overall project objectives.","title":"Overview"},{"location":"resources/visualizations/#visualization-strategy","text":"","title":"Visualization Strategy"},{"location":"resources/visualizations/#identifying-key-messages","text":"Discuss main messages or insights to communicate through visualizations. Identify target audience and their specific needs.","title":"Identifying Key Messages"},{"location":"resources/visualizations/#selecting-appropriate-visualization-types","text":"Explore different types of visualizations (charts, graphs, 3D, interactive elements) suitable for the data and message. Brainstorm creative visualization approaches.","title":"Selecting Appropriate Visualization Types"},{"location":"resources/visualizations/#visualization-development","text":"","title":"Visualization Development"},{"location":"resources/visualizations/#code-generated-visualizations","text":"Outline initial visualizations generated from the data pipeline. Include code snippets and explanations. # Example Python code for a basic plot import matplotlib.pyplot as plt plt . plot ( data [ 'x' ], data [ 'y' ]) plt . show ()","title":"Code-Generated Visualizations"},{"location":"resources/visualizations/#enhancing-visualizations","text":"Steps for annotating, animating, creating 3D, immersive, or interactive visualizations. Discuss challenges and solutions in enhancing visuals.","title":"Enhancing Visualizations"},{"location":"resources/visualizations/#versioning-and-iterations","text":"Document different versions and iterations of visualizations. Reflect on improvements or changes in each version.","title":"Versioning and Iterations"},{"location":"resources/visualizations/#finalizing-visualizations","text":"Process of finalizing visuals for presentation or publication. Feedback incorporation from team or test audiences.","title":"Finalizing Visualizations"},{"location":"resources/visualizations/#documentation-of-tools-and-resources","text":"List software, libraries, and tools used for visualization. Reference external resources or tutorials.","title":"Documentation of Tools and Resources"},{"location":"resources/visualizations/#conclusions","text":"Summarize the visualization process and contributions to the project. Reflect on lessons learned and potential future improvements.","title":"Conclusions"},{"location":"resources/visualizations/#references","text":"Cite external sources, inspirations, or frameworks used in visualization.","title":"References"},{"location":"resources/working_groups_and_postdocs/","text":"ESIIL Postdoctoral Researcher Responsibilities and Opportunities \u00b6 Primary Responsibilities \u00b6 Independent Research: Conducting self-proposed research projects. Adhering to open data principles. Data and Code Storage: Storing all research code and data in the designated ESIIL repository. Use of CyVerse: Utilizing CyVerse as the primary computational platform. Opportunities for Collaboration \u00b6 Joining Working Groups: Opportunity to collaborate with working groups within ESIIL, subject to invitation. Networking and Collaboration: Engaging in regular meetings and seminars for networking. Additional Responsibilities \u00b6 Reviewing Working Group Applications: Assisting in the review process of working group applications. Supporting Working Groups: Providing support to working groups in various capacities, even if not an author. Note \u00b6 Primary research commitments should be prioritized unless otherwise directed by supervisors or ESIIL's administrative body. This framework ensures that ESIIL postdocs balance independent research with collaborative opportunities, adhering to open data principles, and utilizing designated platforms for their work.","title":"ESIIL Postdoctoral Researcher Responsibilities and Opportunities"},{"location":"resources/working_groups_and_postdocs/#esiil-postdoctoral-researcher-responsibilities-and-opportunities","text":"","title":"ESIIL Postdoctoral Researcher Responsibilities and Opportunities"},{"location":"resources/working_groups_and_postdocs/#primary-responsibilities","text":"Independent Research: Conducting self-proposed research projects. Adhering to open data principles. Data and Code Storage: Storing all research code and data in the designated ESIIL repository. Use of CyVerse: Utilizing CyVerse as the primary computational platform.","title":"Primary Responsibilities"},{"location":"resources/working_groups_and_postdocs/#opportunities-for-collaboration","text":"Joining Working Groups: Opportunity to collaborate with working groups within ESIIL, subject to invitation. Networking and Collaboration: Engaging in regular meetings and seminars for networking.","title":"Opportunities for Collaboration"},{"location":"resources/working_groups_and_postdocs/#additional-responsibilities","text":"Reviewing Working Group Applications: Assisting in the review process of working group applications. Supporting Working Groups: Providing support to working groups in various capacities, even if not an author.","title":"Additional Responsibilities"},{"location":"resources/working_groups_and_postdocs/#note","text":"Primary research commitments should be prioritized unless otherwise directed by supervisors or ESIIL's administrative body. This framework ensures that ESIIL postdocs balance independent research with collaborative opportunities, adhering to open data principles, and utilizing designated platforms for their work.","title":"Note"},{"location":"trainings/training_2_code/","text":"Pre-summit training \u00b6","title":"Pre-summit training"},{"location":"trainings/training_2_code/#pre-summit-training","text":"","title":"Pre-summit training"},{"location":"trainings/training_one/","text":"Markdown for the Modern Researcher at ESIIL \u00b6 Introduction \u00b6 Overview of Markdown's relevance and utility in modern research. How Markdown streamlines documentation in diverse scientific and coding environments. Section 1: Mastering Markdown Syntax \u00b6 Objective: Equip researchers with a thorough understanding of Markdown syntax and its diverse applications. Topics Covered: Fundamentals of Text Formatting (headings, lists, bold, italics) Advanced Structures (tables, blockquotes) Integrating Multimedia (image and video links) Diagrams with Mermaid (creating flowcharts, mind maps, timelines) Interactive Elements (hyperlinks, embedding interactive content) Activities: Crafting a Markdown document with various formatting elements. Developing diagrams using Mermaid for research presentations. Embedding multimedia elements in a Markdown document for enhanced communication. Section 2: Markdown in Research Tools \u00b6 Objective: Showcase the integration of Markdown in RStudio and Jupyter Notebooks for scientific documentation. Topics Covered: Implementing Markdown in RStudio (R Markdown, knitting to HTML/PDF) Utilizing Markdown in Jupyter Notebooks (code and Markdown cells) Best practices for documenting research code Including code outputs and visualizations in documentation Activities: Creating and sharing an R Markdown document with annotated research data. Building a comprehensive Jupyter Notebook with integrated Markdown annotations. Section 3: Disseminating Research with Markdown and GitHub Pages \u00b6 Objective: Teach researchers how to publish and manage Markdown-based documentation as web pages. Topics Covered: Setting up a GitHub repository for hosting documentation Transforming Markdown files into web-friendly formats Customizing web page layouts and themes Advanced features using Jekyll Version control and content management for documentation Activities: Publishing a research project documentation on GitHub Pages. Applying custom themes and layouts to enhance online documentation. Conclusion \u00b6 Review of Markdown's role in enhancing research efficiency and clarity. Encouraging the integration of Markdown into daily research activities for improved documentation and dissemination. Additional Resources \u00b6 Curated list of advanced Markdown tutorials, guides for GitHub Pages, and Jekyll resources for researchers. Section 1: Mastering Markdown Syntax \u00b6 1. Fundamentals of Text Formatting \u00b6 Headings : Use # for different levels of headings. Heading Level 1 \u00b6 Heading Level 2 \u00b6 Heading Level 3 \u00b6 Lists : Bulleted lists use asterisks, numbers for ordered lists. Item 1 Item 2 Subitem 2.1 Subitem 2.2 First item Second item Bold and Italics : Use asterisks or underscores. Bold Text Italic Text 2. Advanced Structures \u00b6 Tables : Create tables using dashes and pipes. Header 1 Header 2 Header 3 Row 1 Data Data Row 2 Data Data Add a \":\"\" to change text justification. Here the : is added on the left for left justification. | Header 1 | Header 2 | Header 3 | |---------:|--------- |----------| | Row 1 | Data | Data | | Row 2 | Data | Data | A N A L Y T I C S E N R E I N V I R O N M E N T V E L O P M O C O M U N E G A G E L L A H C N E R A T A D E V E L O P W E I T S I T N E I C S R S O I G O L O I B H T L A H T L A E W E G N E L T I T S I T N E I C S N I E E S R E H T O E N I C S L L A H C E G L A N E G A L L E H C N E I C If you hit the boundaries of Markdown's capabilities, you can start to add html directly. Remember, this entire exercisse is to translate to html. Sudoku Puzzle Fill in the blank cells with numbers from 1 to 9, such that each row, column, and 3x3 subgrid contains all the numbers from 1 to 9 without repetition. 5 3 7 6 1 9 5 9 8 6 8 6 3 4 8 3 1 7 2 6 6 2 8 4 1 9 5 8 7 9 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 Blockquotes : Use > for blockquotes. This is a blockquote. It can span multiple lines. 3. Integrating Multimedia \u00b6 Images : Add images using the format ![alt text](image_url) . Videos : Embed videos using HTML in Markdown. <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" frameborder=\"0\" allowfullscreen></iframe> 4. Diagrams with Mermaid \u00b6 Flowcharts : graph TD A[Start] --> B[Analyze Data] B --> C{Is Data Large?} C -->|Yes| D[Apply Big Data Solutions] C -->|No| E[Use Traditional Methods] D --> F[Machine Learning] E --> G[Statistical Analysis] F --> H{Model Accurate?} G --> I[Report Results] H -->|Yes| J[Deploy Model] H -->|No| K[Refine Model] J --> L[Monitor Performance] K --> F L --> M[End: Success] I --> N[End: Report Generated] style A fill:#f9f,stroke:#333,stroke-width:2px style M fill:#9f9,stroke:#333,stroke-width:2px style N fill:#9f9,stroke:#333,stroke-width:2px Mind Maps : mindmap root((ESIIL)) section Data Sources Satellite Imagery ::icon(fa fa-satellite) Remote Sensing Data Drones Aircraft On-ground Sensors Weather Stations IoT Devices Open Environmental Data Public Datasets ::icon(fa fa-database) section Research Focus Climate Change Analysis Ice Melt Patterns Sea Level Rise Biodiversity Monitoring Species Distribution Habitat Fragmentation Geospatial Analysis Techniques Machine Learning Models Predictive Analytics section Applications Conservation Strategies ::icon(fa fa-leaf) Urban Planning Green Spaces Disaster Response Flood Mapping Wildfire Tracking section Tools and Technologies GIS Software QGIS ArcGIS Programming Languages Python R Cloud Computing Platforms AWS Google Earth Engine Data Visualization D3.js Tableau Timelines : gantt title ESIIL Year 2 Project Schedule dateFormat YYYY-MM-DD section CI Sovereign OASIS via private jupiterhubs :2024-08-01, 2024-10-30 OASIS documentation :2024-09-15, 70d Data cube OASIS via cyverse account :2024-09-15, 100d Integrate with ESIIL User Management system :2024-08-01, 2024-11-30 Build badges to deploy DE from mkdoc :2024-09-01, 2024-12-15 Streamline Github ssh key management :2024-10-01, 2024-12-31 Cyverse support (R proxy link) :2024-11-01, 2024-12-31 Cyverse use summary and statistics :2024-08-01, 2024-12-15 section CI Consultation and Education Conferences/Invited talks :2024-08-01, 2024-12-31 Office hours :2024-08-15, 2024-12-15 Proposals :2024-09-01, 2024-11-15 Private lessons :2024-09-15, 2024-11-30 Pre-event trainings :2024-10-01, 2024-12-15 Textbook development w/ education team :2024-08-01, 2024-12-15 Train the trainers / group lessons :2024-08-15, 2024-11-30 Tribal engagement :2024-09-01, 2024-12-15 Ethical Space training :2024-09-15, 2024-12-31 section CI Design and Build Data library (repository) :2024-08-01, 2024-10-30 Analytics library (repository) :2024-08-15, 2024-11-15 Containers (repository) :2024-09-01, 2024-11-30 Cloud infrastructure templates (repository) :2024-09-15, 2024-12-15 Tribal resilience Data Cube :2024-10-01, 2024-12-31 %%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%% gitGraph commit id: \"Start from template\" branch c1 commit id: \"Set up SSH key pair\" commit id: \"Modify _config.yml for GitHub Pages\" commit id: \"Initial website structure\" commit id: \"Add new markdown pages\" commit id: \"Update navigation tree\" commit id: \"Edit existing pages\" commit id: \"Delete old markdown pages\" commit id: \"Finalize website updates\" commit id: \"Add new markdown pages\" commit id: \"Update navigation tree\" checkout c1 branch b1 commit commit checkout c1 merge b1 %%{init: {\"quadrantChart\": {\"chartWidth\": 400, \"chartHeight\": 400}, \"themeVariables\": {\"quadrant1TextFill\": \"#ff0000\"} }}%% quadrantChart x-axis Urgent --> Not Urgent y-axis Not Important --> \"Important \u2764\" quadrant-1 Plan quadrant-2 Do quadrant-3 Delegate quadrant-4 Delete timeline title Major Events in Environmental Science and Data Science section Environmental Science 19th century : Foundations in Ecology and Conservation 1962 : Publication of 'Silent Spring' by Rachel Carson 1970 : First Earth Day 1987 : Brundtland Report introduces Sustainable Development 1992 : Rio Earth Summit 2015 : Paris Agreement on Climate Change section Data Science 1960s-1970s : Development of Database Management Systems 1980s : Emergence of Data Warehousing 1990s : Growth of the World Wide Web and Data Mining 2000s : Big Data and Predictive Analytics 2010s : AI and Machine Learning Revolution 2020s : Integration of AI in Environmental Research erDiagram CAR ||--o{ NAMED-DRIVER : allows CAR { string registrationNumber string make string model } PERSON ||--o{ NAMED-DRIVER : is PERSON { string firstName string lastName int age } --- config: sankey: showValues: false --- sankey-beta NASA Data,Big Data Harmonization,100 Satellite Imagery,Big Data Harmonization,80 Open Environmental Data,Big Data Harmonization,70 Remote Sensing Data,Big Data Harmonization,90 Big Data Harmonization, Data Analysis and Integration,340 Data Analysis and Integration,Climate Change Research,100 Data Analysis and Integration,Biodiversity Monitoring,80 Data Analysis and Integration,Geospatial Mapping,60 Data Analysis and Integration,Urban Planning,50 Data Analysis and Integration,Disaster Response,50 5. Interactive Elements \u00b6 Hyperlinks : Use the format [link text](URL) . Google Play Tetris Embedding Interactive Content : Use HTML tags or specific platform embed codes. <iframe src=\"https://example.com/interactive-content\" width=\"600\" height=\"400\"></iframe> 6. Math Notation \u00b6 Markdown can be combined with LaTeX for mathematical notation, useful in environmental data science for expressing statistical distributions, coordinate systems, and more. This requires a Markdown renderer with LaTeX support (like MathJax or KaTeX). Inline Math : Use single dollar signs for inline math expressions. Representing the normal distribution. Example: The probability density function of the normal distribution is given by \\(f(x|\\mu,\\sigma) = \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\\) .` Display Math : Use double dollar signs for standalone equations. Example: $$ f(x|\\mu,\\sigma) = \\frac{1}{\\sigma\\sqrt{2\\pi}}e {-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right) 2} $$ Common LaTeX Elements for Environmental Data Science : Statistical Distributions : Normal Distribution: \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2} for \\(\\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\\) Poisson Distribution: P(k; \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!} for \\(P(k; \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!}\\) Coordinate Systems : Spherical Coordinates: (r, \\theta, \\phi) for \\((r, \\theta, \\phi)\\) Cartesian Coordinates: (x, y, z) for \\((x, y, z)\\) Geospatial Equations : Haversine Formula for Distance: a = \\sin^2\\left(\\frac{\\Delta\\phi}{2}\\right) + \\cos(\\phi_1)\\cos(\\phi_2)\\sin^2\\left(\\frac{\\Delta\\lambda}{2}\\right) for \\(a = \\sin^2\\left(\\frac{\\Delta\\phi}{2}\\right) + \\cos(\\phi_1)\\cos(\\phi_2)\\sin^2\\left(\\frac{\\Delta\\lambda}{2}\\right)\\) Note: The rendering of these equations as formatted math will depend on your Markdown viewer's LaTeX capabilities. 7. Effective Citations in Markdown \u00b6 Inline Citations \u00b6 Objective: Learn how to use inline citations in Markdown. Example Usage: Inline citation of a single work: Some text with an inline citation. [ @jones :envstudy:2020] Inline citation with specific page or section: More text with a specific section cited. [See @jones :envstudy:2020, \u00a74.2] Contrasting views: Discussion of a topic with a contrasting view. [Contra @smith :climatechange:2019, p. 78] Footnote Citations \u00b6 Objective: Understand how to use footnote citations in Markdown. Example Usage: Citing with a footnote: Some statement in the text. 1 Multiple references to the same footnote: Another statement referring to the same source. 1 A different citation: Additional comment with a new citation. 2 Creating Footnotes \u00b6 Example Syntax: First reference details. Example: Emma Jones, \"Environmental Study,\" Nature Journal, May 2020, https://nature-journal.com/envstudy2020 . \u21a9 \u21a9 Second reference details. Example: David Smith, \"Climate Change Controversies,\" Science Daily, August 2019, https://sciencedaily.com/climatechange2019 . \u21a9","title":"Markdown for the Modern Researcher at ESIIL"},{"location":"trainings/training_one/#markdown-for-the-modern-researcher-at-esiil","text":"","title":"Markdown for the Modern Researcher at ESIIL"},{"location":"trainings/training_one/#introduction","text":"Overview of Markdown's relevance and utility in modern research. How Markdown streamlines documentation in diverse scientific and coding environments.","title":"Introduction"},{"location":"trainings/training_one/#section-1-mastering-markdown-syntax","text":"Objective: Equip researchers with a thorough understanding of Markdown syntax and its diverse applications. Topics Covered: Fundamentals of Text Formatting (headings, lists, bold, italics) Advanced Structures (tables, blockquotes) Integrating Multimedia (image and video links) Diagrams with Mermaid (creating flowcharts, mind maps, timelines) Interactive Elements (hyperlinks, embedding interactive content) Activities: Crafting a Markdown document with various formatting elements. Developing diagrams using Mermaid for research presentations. Embedding multimedia elements in a Markdown document for enhanced communication.","title":"Section 1: Mastering Markdown Syntax"},{"location":"trainings/training_one/#section-2-markdown-in-research-tools","text":"Objective: Showcase the integration of Markdown in RStudio and Jupyter Notebooks for scientific documentation. Topics Covered: Implementing Markdown in RStudio (R Markdown, knitting to HTML/PDF) Utilizing Markdown in Jupyter Notebooks (code and Markdown cells) Best practices for documenting research code Including code outputs and visualizations in documentation Activities: Creating and sharing an R Markdown document with annotated research data. Building a comprehensive Jupyter Notebook with integrated Markdown annotations.","title":"Section 2: Markdown in Research Tools"},{"location":"trainings/training_one/#section-3-disseminating-research-with-markdown-and-github-pages","text":"Objective: Teach researchers how to publish and manage Markdown-based documentation as web pages. Topics Covered: Setting up a GitHub repository for hosting documentation Transforming Markdown files into web-friendly formats Customizing web page layouts and themes Advanced features using Jekyll Version control and content management for documentation Activities: Publishing a research project documentation on GitHub Pages. Applying custom themes and layouts to enhance online documentation.","title":"Section 3: Disseminating Research with Markdown and GitHub Pages"},{"location":"trainings/training_one/#conclusion","text":"Review of Markdown's role in enhancing research efficiency and clarity. Encouraging the integration of Markdown into daily research activities for improved documentation and dissemination.","title":"Conclusion"},{"location":"trainings/training_one/#additional-resources","text":"Curated list of advanced Markdown tutorials, guides for GitHub Pages, and Jekyll resources for researchers.","title":"Additional Resources"},{"location":"trainings/training_one/#section-1-mastering-markdown-syntax_1","text":"","title":"Section 1: Mastering Markdown Syntax"},{"location":"trainings/training_one/#1-fundamentals-of-text-formatting","text":"Headings : Use # for different levels of headings.","title":"1. Fundamentals of Text Formatting"},{"location":"trainings/training_one/#heading-level-1","text":"","title":"Heading Level 1"},{"location":"trainings/training_one/#heading-level-2","text":"","title":"Heading Level 2"},{"location":"trainings/training_one/#heading-level-3","text":"Lists : Bulleted lists use asterisks, numbers for ordered lists. Item 1 Item 2 Subitem 2.1 Subitem 2.2 First item Second item Bold and Italics : Use asterisks or underscores. Bold Text Italic Text","title":"Heading Level 3"},{"location":"trainings/training_one/#2-advanced-structures","text":"Tables : Create tables using dashes and pipes. Header 1 Header 2 Header 3 Row 1 Data Data Row 2 Data Data Add a \":\"\" to change text justification. Here the : is added on the left for left justification. | Header 1 | Header 2 | Header 3 | |---------:|--------- |----------| | Row 1 | Data | Data | | Row 2 | Data | Data | A N A L Y T I C S E N R E I N V I R O N M E N T V E L O P M O C O M U N E G A G E L L A H C N E R A T A D E V E L O P W E I T S I T N E I C S R S O I G O L O I B H T L A H T L A E W E G N E L T I T S I T N E I C S N I E E S R E H T O E N I C S L L A H C E G L A N E G A L L E H C N E I C If you hit the boundaries of Markdown's capabilities, you can start to add html directly. Remember, this entire exercisse is to translate to html. Sudoku Puzzle Fill in the blank cells with numbers from 1 to 9, such that each row, column, and 3x3 subgrid contains all the numbers from 1 to 9 without repetition. 5 3 7 6 1 9 5 9 8 6 8 6 3 4 8 3 1 7 2 6 6 2 8 4 1 9 5 8 7 9 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 Blockquotes : Use > for blockquotes. This is a blockquote. It can span multiple lines.","title":"2. Advanced Structures"},{"location":"trainings/training_one/#3-integrating-multimedia","text":"Images : Add images using the format ![alt text](image_url) . Videos : Embed videos using HTML in Markdown. <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" frameborder=\"0\" allowfullscreen></iframe>","title":"3. Integrating Multimedia"},{"location":"trainings/training_one/#4-diagrams-with-mermaid","text":"Flowcharts : graph TD A[Start] --> B[Analyze Data] B --> C{Is Data Large?} C -->|Yes| D[Apply Big Data Solutions] C -->|No| E[Use Traditional Methods] D --> F[Machine Learning] E --> G[Statistical Analysis] F --> H{Model Accurate?} G --> I[Report Results] H -->|Yes| J[Deploy Model] H -->|No| K[Refine Model] J --> L[Monitor Performance] K --> F L --> M[End: Success] I --> N[End: Report Generated] style A fill:#f9f,stroke:#333,stroke-width:2px style M fill:#9f9,stroke:#333,stroke-width:2px style N fill:#9f9,stroke:#333,stroke-width:2px Mind Maps : mindmap root((ESIIL)) section Data Sources Satellite Imagery ::icon(fa fa-satellite) Remote Sensing Data Drones Aircraft On-ground Sensors Weather Stations IoT Devices Open Environmental Data Public Datasets ::icon(fa fa-database) section Research Focus Climate Change Analysis Ice Melt Patterns Sea Level Rise Biodiversity Monitoring Species Distribution Habitat Fragmentation Geospatial Analysis Techniques Machine Learning Models Predictive Analytics section Applications Conservation Strategies ::icon(fa fa-leaf) Urban Planning Green Spaces Disaster Response Flood Mapping Wildfire Tracking section Tools and Technologies GIS Software QGIS ArcGIS Programming Languages Python R Cloud Computing Platforms AWS Google Earth Engine Data Visualization D3.js Tableau Timelines : gantt title ESIIL Year 2 Project Schedule dateFormat YYYY-MM-DD section CI Sovereign OASIS via private jupiterhubs :2024-08-01, 2024-10-30 OASIS documentation :2024-09-15, 70d Data cube OASIS via cyverse account :2024-09-15, 100d Integrate with ESIIL User Management system :2024-08-01, 2024-11-30 Build badges to deploy DE from mkdoc :2024-09-01, 2024-12-15 Streamline Github ssh key management :2024-10-01, 2024-12-31 Cyverse support (R proxy link) :2024-11-01, 2024-12-31 Cyverse use summary and statistics :2024-08-01, 2024-12-15 section CI Consultation and Education Conferences/Invited talks :2024-08-01, 2024-12-31 Office hours :2024-08-15, 2024-12-15 Proposals :2024-09-01, 2024-11-15 Private lessons :2024-09-15, 2024-11-30 Pre-event trainings :2024-10-01, 2024-12-15 Textbook development w/ education team :2024-08-01, 2024-12-15 Train the trainers / group lessons :2024-08-15, 2024-11-30 Tribal engagement :2024-09-01, 2024-12-15 Ethical Space training :2024-09-15, 2024-12-31 section CI Design and Build Data library (repository) :2024-08-01, 2024-10-30 Analytics library (repository) :2024-08-15, 2024-11-15 Containers (repository) :2024-09-01, 2024-11-30 Cloud infrastructure templates (repository) :2024-09-15, 2024-12-15 Tribal resilience Data Cube :2024-10-01, 2024-12-31 %%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%% gitGraph commit id: \"Start from template\" branch c1 commit id: \"Set up SSH key pair\" commit id: \"Modify _config.yml for GitHub Pages\" commit id: \"Initial website structure\" commit id: \"Add new markdown pages\" commit id: \"Update navigation tree\" commit id: \"Edit existing pages\" commit id: \"Delete old markdown pages\" commit id: \"Finalize website updates\" commit id: \"Add new markdown pages\" commit id: \"Update navigation tree\" checkout c1 branch b1 commit commit checkout c1 merge b1 %%{init: {\"quadrantChart\": {\"chartWidth\": 400, \"chartHeight\": 400}, \"themeVariables\": {\"quadrant1TextFill\": \"#ff0000\"} }}%% quadrantChart x-axis Urgent --> Not Urgent y-axis Not Important --> \"Important \u2764\" quadrant-1 Plan quadrant-2 Do quadrant-3 Delegate quadrant-4 Delete timeline title Major Events in Environmental Science and Data Science section Environmental Science 19th century : Foundations in Ecology and Conservation 1962 : Publication of 'Silent Spring' by Rachel Carson 1970 : First Earth Day 1987 : Brundtland Report introduces Sustainable Development 1992 : Rio Earth Summit 2015 : Paris Agreement on Climate Change section Data Science 1960s-1970s : Development of Database Management Systems 1980s : Emergence of Data Warehousing 1990s : Growth of the World Wide Web and Data Mining 2000s : Big Data and Predictive Analytics 2010s : AI and Machine Learning Revolution 2020s : Integration of AI in Environmental Research erDiagram CAR ||--o{ NAMED-DRIVER : allows CAR { string registrationNumber string make string model } PERSON ||--o{ NAMED-DRIVER : is PERSON { string firstName string lastName int age } --- config: sankey: showValues: false --- sankey-beta NASA Data,Big Data Harmonization,100 Satellite Imagery,Big Data Harmonization,80 Open Environmental Data,Big Data Harmonization,70 Remote Sensing Data,Big Data Harmonization,90 Big Data Harmonization, Data Analysis and Integration,340 Data Analysis and Integration,Climate Change Research,100 Data Analysis and Integration,Biodiversity Monitoring,80 Data Analysis and Integration,Geospatial Mapping,60 Data Analysis and Integration,Urban Planning,50 Data Analysis and Integration,Disaster Response,50","title":"4. Diagrams with Mermaid"},{"location":"trainings/training_one/#5-interactive-elements","text":"Hyperlinks : Use the format [link text](URL) . Google Play Tetris Embedding Interactive Content : Use HTML tags or specific platform embed codes. <iframe src=\"https://example.com/interactive-content\" width=\"600\" height=\"400\"></iframe>","title":"5. Interactive Elements"},{"location":"trainings/training_one/#6-math-notation","text":"Markdown can be combined with LaTeX for mathematical notation, useful in environmental data science for expressing statistical distributions, coordinate systems, and more. This requires a Markdown renderer with LaTeX support (like MathJax or KaTeX). Inline Math : Use single dollar signs for inline math expressions. Representing the normal distribution. Example: The probability density function of the normal distribution is given by \\(f(x|\\mu,\\sigma) = \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\\) .` Display Math : Use double dollar signs for standalone equations. Example: $$ f(x|\\mu,\\sigma) = \\frac{1}{\\sigma\\sqrt{2\\pi}}e {-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right) 2} $$ Common LaTeX Elements for Environmental Data Science : Statistical Distributions : Normal Distribution: \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2} for \\(\\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\\) Poisson Distribution: P(k; \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!} for \\(P(k; \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!}\\) Coordinate Systems : Spherical Coordinates: (r, \\theta, \\phi) for \\((r, \\theta, \\phi)\\) Cartesian Coordinates: (x, y, z) for \\((x, y, z)\\) Geospatial Equations : Haversine Formula for Distance: a = \\sin^2\\left(\\frac{\\Delta\\phi}{2}\\right) + \\cos(\\phi_1)\\cos(\\phi_2)\\sin^2\\left(\\frac{\\Delta\\lambda}{2}\\right) for \\(a = \\sin^2\\left(\\frac{\\Delta\\phi}{2}\\right) + \\cos(\\phi_1)\\cos(\\phi_2)\\sin^2\\left(\\frac{\\Delta\\lambda}{2}\\right)\\) Note: The rendering of these equations as formatted math will depend on your Markdown viewer's LaTeX capabilities.","title":"6. Math Notation"},{"location":"trainings/training_one/#7-effective-citations-in-markdown","text":"","title":"7. Effective Citations in Markdown"},{"location":"trainings/training_one/#inline-citations","text":"Objective: Learn how to use inline citations in Markdown. Example Usage: Inline citation of a single work: Some text with an inline citation. [ @jones :envstudy:2020] Inline citation with specific page or section: More text with a specific section cited. [See @jones :envstudy:2020, \u00a74.2] Contrasting views: Discussion of a topic with a contrasting view. [Contra @smith :climatechange:2019, p. 78]","title":"Inline Citations"},{"location":"trainings/training_one/#footnote-citations","text":"Objective: Understand how to use footnote citations in Markdown. Example Usage: Citing with a footnote: Some statement in the text. 1 Multiple references to the same footnote: Another statement referring to the same source. 1 A different citation: Additional comment with a new citation. 2","title":"Footnote Citations"},{"location":"trainings/training_one/#creating-footnotes","text":"Example Syntax: First reference details. Example: Emma Jones, \"Environmental Study,\" Nature Journal, May 2020, https://nature-journal.com/envstudy2020 . \u21a9 \u21a9 Second reference details. Example: David Smith, \"Climate Change Controversies,\" Science Daily, August 2019, https://sciencedaily.com/climatechange2019 . \u21a9","title":"Creating Footnotes"},{"location":"trainings/training_three/","text":"Team Science Community Skills ESIIL Behavior Expectations Poster Calling People In Handout Tool: Interrupting Microagressions How to Apologize Voices in Concert Jamboard Cultural Intelligence","title":"Voices in Concert"},{"location":"trainings/training_two/","text":"Markdown for the Modern Researcher at ESIIL \u00b6 Definitions \"Open Science is defined as an inclusive construct that combines various movements and practices aiming to make multilingual scientific knowledge openly available, accessible and reusable for everyone, to increase scientific collaborations and sharing of information for the benefits of science and society, and to open the processes of scientific knowledge creation, evaluation and communication to societal actors beyond the traditional scientific community.\" - UNESCO Definition UNESCO's Recommendation on Open Science \"Open Science is the movement to make scientific research (including publications, data, physical samples, and software) and its dissemination accessible to all levels of society, amateur or professional...\" Wikipedia definition Open and Collaborative Science Network's Open Science Manifesto Six Pillars of Open Science Open Access Publications Open Data Open Educational Resources Open Methodology Open Peer Review Open Source Software Wait, how many pillars of Open Science Really Are There? The number can be from 4 to 8 Foster Open Science Diagram Graphic by Foster Open Science Introduction \u00b6 Overview of Markdown's relevance and utility in modern research. How Markdown streamlines documentation in diverse scientific and coding environments. Section 1: Mastering Markdown Syntax \u00b6 Objective: Equip researchers with a thorough understanding of Markdown syntax and its diverse applications. Topics Covered: Fundamentals of Text Formatting (headings, lists, bold, italics) Advanced Structures (tables, blockquotes) Integrating Multimedia (image and video links) Diagrams with Mermaid (creating flowcharts, mind maps, timelines) Interactive Elements (hyperlinks, embedding interactive content) Activities: Crafting a Markdown document with various formatting elements. Developing diagrams using Mermaid for research presentations. Embedding multimedia elements in a Markdown document for enhanced communication. Section 2: Markdown in Research Tools \u00b6 Objective: Showcase the integration of Markdown in RStudio and Jupyter Notebooks for scientific documentation. Topics Covered: Implementing Markdown in RStudio (R Markdown, knitting to HTML/PDF) Utilizing Markdown in Jupyter Notebooks (code and Markdown cells) Best practices for documenting research code Including code outputs and visualizations in documentation Activities: Creating and sharing an R Markdown document with annotated research data. Building a comprehensive Jupyter Notebook with integrated Markdown annotations. Section 3: Disseminating Research with Markdown and GitHub Pages \u00b6 Objective: Teach researchers how to publish and manage Markdown-based documentation as web pages. Topics Covered: Setting up a GitHub repository for hosting documentation Transforming Markdown files into web-friendly formats Customizing web page layouts and themes Advanced features using Jekyll Version control and content management for documentation Activities: Publishing a research project documentation on GitHub Pages. Applying custom themes and layouts to enhance online documentation. Conclusion \u00b6 Review of Markdown's role in enhancing research efficiency and clarity. Encouraging the integration of Markdown into daily research activities for improved documentation and dissemination. Additional Resources \u00b6 Curated list of advanced Markdown tutorials, guides for GitHub Pages, and Jekyll resources for researchers. Section 1: Mastering Markdown Syntax \u00b6 1. Fundamentals of Text Formatting \u00b6 Headings : Use # for different levels of headings. Heading Level 1 \u00b6 Heading Level 2 \u00b6 Heading Level 3 \u00b6 Lists : Bulleted lists use asterisks, numbers for ordered lists. Item 1 Item 2 Subitem 2.1 Subitem 2.2 First item Second item Bold and Italics : Use asterisks or underscores. Bold Text Italic Text 2. Advanced Structures \u00b6 Tables : Create tables using dashes and pipes. Header 1 Header 2 Header 3 Row 1 Data Data Row 2 Data Data Add a \":\"\" to change text justification. Here the : is added on the left for left justification. | Header 1 | Header 2 | Header 3 | |---------:|--------- |----------| | Row 1 | Data | Data | | Row 2 | Data | Data | A N A L Y T I C S E N R E I N V I R O N M E N T V E L O P M O C O M U N E G A G E L L A H C N E R A T A D E V E L O P W E I T S I T N E I C S R S O I G O L O I B H T L A H T L A E W E G N E L T I T S I T N E I C S N I E E S R E H T O E N I C S L L A H C E G L A N E G A L L E H C N E I C If you hit the boundaries of Markdown's capabilities, you can start to add html directly. Remember, this entire exercisse is to translate to html. Sudoku Puzzle Fill in the blank cells with numbers from 1 to 9, such that each row, column, and 3x3 subgrid contains all the numbers from 1 to 9 without repetition. 5 3 7 6 1 9 5 9 8 6 8 6 3 4 8 3 1 7 2 6 6 2 8 4 1 9 5 8 7 9 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 Blockquotes : Use > for blockquotes. This is a blockquote. It can span multiple lines. 3. Integrating Multimedia \u00b6 Images : Add images using the format ![alt text](image_url) . Videos : Embed videos using HTML in Markdown. <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" frameborder=\"0\" allowfullscreen></iframe> 4. Diagrams with Mermaid \u00b6 Flowcharts : graph TD A[Start] --> B[Analyze Data] B --> C{Is Data Large?} C -->|Yes| D[Apply Big Data Solutions] C -->|No| E[Use Traditional Methods] D --> F[Machine Learning] E --> G[Statistical Analysis] F --> H{Model Accurate?} G --> I[Report Results] H -->|Yes| J[Deploy Model] H -->|No| K[Refine Model] J --> L[Monitor Performance] K --> F L --> M[End: Success] I --> N[End: Report Generated] style A fill:#f9f,stroke:#333,stroke-width:2px style M fill:#9f9,stroke:#333,stroke-width:2px style N fill:#9f9,stroke:#333,stroke-width:2px Mind Maps : mindmap root((ESIIL)) section Data Sources Satellite Imagery ::icon(fa fa-satellite) Remote Sensing Data Drones Aircraft On-ground Sensors Weather Stations IoT Devices Open Environmental Data Public Datasets ::icon(fa fa-database) section Research Focus Climate Change Analysis Ice Melt Patterns Sea Level Rise Biodiversity Monitoring Species Distribution Habitat Fragmentation Geospatial Analysis Techniques Machine Learning Models Predictive Analytics section Applications Conservation Strategies ::icon(fa fa-leaf) Urban Planning Green Spaces Disaster Response Flood Mapping Wildfire Tracking section Tools and Technologies GIS Software QGIS ArcGIS Programming Languages Python R Cloud Computing Platforms AWS Google Earth Engine Data Visualization D3.js Tableau Timelines : gantt title ESIIL Year 2 Project Schedule dateFormat YYYY-MM-DD section CI Sovereign OASIS via private jupiterhubs :2024-08-01, 2024-10-30 OASIS documentation :2024-09-15, 70d Data cube OASIS via cyverse account :2024-09-15, 100d Integrate with ESIIL User Management system :2024-08-01, 2024-11-30 Build badges to deploy DE from mkdoc :2024-09-01, 2024-12-15 Streamline Github ssh key management :2024-10-01, 2024-12-31 Cyverse support (R proxy link) :2024-11-01, 2024-12-31 Cyverse use summary and statistics :2024-08-01, 2024-12-15 section CI Consultation and Education Conferences/Invited talks :2024-08-01, 2024-12-31 Office hours :2024-08-15, 2024-12-15 Proposals :2024-09-01, 2024-11-15 Private lessons :2024-09-15, 2024-11-30 Pre-event trainings :2024-10-01, 2024-12-15 Textbook development w/ education team :2024-08-01, 2024-12-15 Train the trainers / group lessons :2024-08-15, 2024-11-30 Tribal engagement :2024-09-01, 2024-12-15 Ethical Space training :2024-09-15, 2024-12-31 section CI Design and Build Data library (repository) :2024-08-01, 2024-10-30 Analytics library (repository) :2024-08-15, 2024-11-15 Containers (repository) :2024-09-01, 2024-11-30 Cloud infrastructure templates (repository) :2024-09-15, 2024-12-15 Tribal resilience Data Cube :2024-10-01, 2024-12-31 %%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%% gitGraph commit id: \"Start from template\" branch c1 commit id: \"Set up SSH key pair\" commit id: \"Modify _config.yml for GitHub Pages\" commit id: \"Initial website structure\" commit id: \"Add new markdown pages\" commit id: \"Update navigation tree\" commit id: \"Edit existing pages\" commit id: \"Delete old markdown pages\" commit id: \"Finalize website updates\" commit id: \"Add new markdown pages\" commit id: \"Update navigation tree\" checkout c1 branch b1 commit commit checkout c1 merge b1 %%{init: {\"quadrantChart\": {\"chartWidth\": 400, \"chartHeight\": 400}, \"themeVariables\": {\"quadrant1TextFill\": \"#ff0000\"} }}%% quadrantChart x-axis Urgent --> Not Urgent y-axis Not Important --> \"Important \u2764\" quadrant-1 Plan quadrant-2 Do quadrant-3 Delegate quadrant-4 Delete timeline title Major Events in Environmental Science and Data Science section Environmental Science 19th century : Foundations in Ecology and Conservation 1962 : Publication of 'Silent Spring' by Rachel Carson 1970 : First Earth Day 1987 : Brundtland Report introduces Sustainable Development 1992 : Rio Earth Summit 2015 : Paris Agreement on Climate Change section Data Science 1960s-1970s : Development of Database Management Systems 1980s : Emergence of Data Warehousing 1990s : Growth of the World Wide Web and Data Mining 2000s : Big Data and Predictive Analytics 2010s : AI and Machine Learning Revolution 2020s : Integration of AI in Environmental Research erDiagram CAR ||--o{ NAMED-DRIVER : allows CAR { string registrationNumber string make string model } PERSON ||--o{ NAMED-DRIVER : is PERSON { string firstName string lastName int age } --- config: sankey: showValues: false --- sankey-beta NASA Data,Big Data Harmonization,100 Satellite Imagery,Big Data Harmonization,80 Open Environmental Data,Big Data Harmonization,70 Remote Sensing Data,Big Data Harmonization,90 Big Data Harmonization, Data Analysis and Integration,340 Data Analysis and Integration,Climate Change Research,100 Data Analysis and Integration,Biodiversity Monitoring,80 Data Analysis and Integration,Geospatial Mapping,60 Data Analysis and Integration,Urban Planning,50 Data Analysis and Integration,Disaster Response,50 5. Interactive Elements \u00b6 Hyperlinks : Use the format [link text](URL) . Google Play Tetris Embedding Interactive Content : Use HTML tags or specific platform embed codes. <iframe src=\"https://example.com/interactive-content\" width=\"600\" height=\"400\"></iframe> 6. Math Notation \u00b6 Markdown can be combined with LaTeX for mathematical notation, useful in environmental data science for expressing statistical distributions, coordinate systems, and more. This requires a Markdown renderer with LaTeX support (like MathJax or KaTeX). Inline Math : Use single dollar signs for inline math expressions. Representing the normal distribution. Example: The probability density function of the normal distribution is given by \\(f(x|\\mu,\\sigma) = \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\\) .` Display Math : Use double dollar signs for standalone equations. Example: $$ f(x|\\mu,\\sigma) = \\frac{1}{\\sigma\\sqrt{2\\pi}}e {-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right) 2} $$ Common LaTeX Elements for Environmental Data Science : Statistical Distributions : Normal Distribution: \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2} for \\(\\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\\) Poisson Distribution: P(k; \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!} for \\(P(k; \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!}\\) Coordinate Systems : Spherical Coordinates: (r, \\theta, \\phi) for \\((r, \\theta, \\phi)\\) Cartesian Coordinates: (x, y, z) for \\((x, y, z)\\) Geospatial Equations : Haversine Formula for Distance: a = \\sin^2\\left(\\frac{\\Delta\\phi}{2}\\right) + \\cos(\\phi_1)\\cos(\\phi_2)\\sin^2\\left(\\frac{\\Delta\\lambda}{2}\\right) for \\(a = \\sin^2\\left(\\frac{\\Delta\\phi}{2}\\right) + \\cos(\\phi_1)\\cos(\\phi_2)\\sin^2\\left(\\frac{\\Delta\\lambda}{2}\\right)\\) Note: The rendering of these equations as formatted math will depend on your Markdown viewer's LaTeX capabilities. 7. Effective Citations in Markdown \u00b6 Inline Citations \u00b6 Objective: Learn how to use inline citations in Markdown. Example Usage: Inline citation of a single work: Some text with an inline citation. [ @jones :envstudy:2020] Inline citation with specific page or section: More text with a specific section cited. [See @jones :envstudy:2020, \u00a74.2] Contrasting views: Discussion of a topic with a contrasting view. [Contra @smith :climatechange:2019, p. 78] Footnote Citations \u00b6 Objective: Understand how to use footnote citations in Markdown. Example Usage: Citing with a footnote: Some statement in the text. 1 Multiple references to the same footnote: Another statement referring to the same source. 1 A different citation: Additional comment with a new citation. 2 Creating Footnotes \u00b6 Example Syntax: First reference details. Example: Emma Jones, \"Environmental Study,\" Nature Journal, May 2020, https://nature-journal.com/envstudy2020 . \u21a9 \u21a9 Second reference details. Example: David Smith, \"Climate Change Controversies,\" Science Daily, August 2019, https://sciencedaily.com/climatechange2019 . \u21a9","title":"Markdown for the Modern Researcher at ESIIL"},{"location":"trainings/training_two/#markdown-for-the-modern-researcher-at-esiil","text":"Definitions \"Open Science is defined as an inclusive construct that combines various movements and practices aiming to make multilingual scientific knowledge openly available, accessible and reusable for everyone, to increase scientific collaborations and sharing of information for the benefits of science and society, and to open the processes of scientific knowledge creation, evaluation and communication to societal actors beyond the traditional scientific community.\" - UNESCO Definition UNESCO's Recommendation on Open Science \"Open Science is the movement to make scientific research (including publications, data, physical samples, and software) and its dissemination accessible to all levels of society, amateur or professional...\" Wikipedia definition Open and Collaborative Science Network's Open Science Manifesto Six Pillars of Open Science Open Access Publications Open Data Open Educational Resources Open Methodology Open Peer Review Open Source Software Wait, how many pillars of Open Science Really Are There? The number can be from 4 to 8 Foster Open Science Diagram Graphic by Foster Open Science","title":"Markdown for the Modern Researcher at ESIIL"},{"location":"trainings/training_two/#introduction","text":"Overview of Markdown's relevance and utility in modern research. How Markdown streamlines documentation in diverse scientific and coding environments.","title":"Introduction"},{"location":"trainings/training_two/#section-1-mastering-markdown-syntax","text":"Objective: Equip researchers with a thorough understanding of Markdown syntax and its diverse applications. Topics Covered: Fundamentals of Text Formatting (headings, lists, bold, italics) Advanced Structures (tables, blockquotes) Integrating Multimedia (image and video links) Diagrams with Mermaid (creating flowcharts, mind maps, timelines) Interactive Elements (hyperlinks, embedding interactive content) Activities: Crafting a Markdown document with various formatting elements. Developing diagrams using Mermaid for research presentations. Embedding multimedia elements in a Markdown document for enhanced communication.","title":"Section 1: Mastering Markdown Syntax"},{"location":"trainings/training_two/#section-2-markdown-in-research-tools","text":"Objective: Showcase the integration of Markdown in RStudio and Jupyter Notebooks for scientific documentation. Topics Covered: Implementing Markdown in RStudio (R Markdown, knitting to HTML/PDF) Utilizing Markdown in Jupyter Notebooks (code and Markdown cells) Best practices for documenting research code Including code outputs and visualizations in documentation Activities: Creating and sharing an R Markdown document with annotated research data. Building a comprehensive Jupyter Notebook with integrated Markdown annotations.","title":"Section 2: Markdown in Research Tools"},{"location":"trainings/training_two/#section-3-disseminating-research-with-markdown-and-github-pages","text":"Objective: Teach researchers how to publish and manage Markdown-based documentation as web pages. Topics Covered: Setting up a GitHub repository for hosting documentation Transforming Markdown files into web-friendly formats Customizing web page layouts and themes Advanced features using Jekyll Version control and content management for documentation Activities: Publishing a research project documentation on GitHub Pages. Applying custom themes and layouts to enhance online documentation.","title":"Section 3: Disseminating Research with Markdown and GitHub Pages"},{"location":"trainings/training_two/#conclusion","text":"Review of Markdown's role in enhancing research efficiency and clarity. Encouraging the integration of Markdown into daily research activities for improved documentation and dissemination.","title":"Conclusion"},{"location":"trainings/training_two/#additional-resources","text":"Curated list of advanced Markdown tutorials, guides for GitHub Pages, and Jekyll resources for researchers.","title":"Additional Resources"},{"location":"trainings/training_two/#section-1-mastering-markdown-syntax_1","text":"","title":"Section 1: Mastering Markdown Syntax"},{"location":"trainings/training_two/#1-fundamentals-of-text-formatting","text":"Headings : Use # for different levels of headings.","title":"1. Fundamentals of Text Formatting"},{"location":"trainings/training_two/#heading-level-1","text":"","title":"Heading Level 1"},{"location":"trainings/training_two/#heading-level-2","text":"","title":"Heading Level 2"},{"location":"trainings/training_two/#heading-level-3","text":"Lists : Bulleted lists use asterisks, numbers for ordered lists. Item 1 Item 2 Subitem 2.1 Subitem 2.2 First item Second item Bold and Italics : Use asterisks or underscores. Bold Text Italic Text","title":"Heading Level 3"},{"location":"trainings/training_two/#2-advanced-structures","text":"Tables : Create tables using dashes and pipes. Header 1 Header 2 Header 3 Row 1 Data Data Row 2 Data Data Add a \":\"\" to change text justification. Here the : is added on the left for left justification. | Header 1 | Header 2 | Header 3 | |---------:|--------- |----------| | Row 1 | Data | Data | | Row 2 | Data | Data | A N A L Y T I C S E N R E I N V I R O N M E N T V E L O P M O C O M U N E G A G E L L A H C N E R A T A D E V E L O P W E I T S I T N E I C S R S O I G O L O I B H T L A H T L A E W E G N E L T I T S I T N E I C S N I E E S R E H T O E N I C S L L A H C E G L A N E G A L L E H C N E I C If you hit the boundaries of Markdown's capabilities, you can start to add html directly. Remember, this entire exercisse is to translate to html. Sudoku Puzzle Fill in the blank cells with numbers from 1 to 9, such that each row, column, and 3x3 subgrid contains all the numbers from 1 to 9 without repetition. 5 3 7 6 1 9 5 9 8 6 8 6 3 4 8 3 1 7 2 6 6 2 8 4 1 9 5 8 7 9 5 3 4 6 7 8 9 1 2 6 7 2 1 9 5 3 4 8 1 9 8 3 4 2 5 6 7 8 5 9 7 6 1 4 2 3 4 2 6 8 5 3 7 9 1 7 1 3 9 2 4 8 5 6 9 6 1 5 3 7 2 8 4 2 8 7 4 1 9 6 3 5 3 4 5 2 8 6 1 7 9 Blockquotes : Use > for blockquotes. This is a blockquote. It can span multiple lines.","title":"2. Advanced Structures"},{"location":"trainings/training_two/#3-integrating-multimedia","text":"Images : Add images using the format ![alt text](image_url) . Videos : Embed videos using HTML in Markdown. <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" frameborder=\"0\" allowfullscreen></iframe>","title":"3. Integrating Multimedia"},{"location":"trainings/training_two/#4-diagrams-with-mermaid","text":"Flowcharts : graph TD A[Start] --> B[Analyze Data] B --> C{Is Data Large?} C -->|Yes| D[Apply Big Data Solutions] C -->|No| E[Use Traditional Methods] D --> F[Machine Learning] E --> G[Statistical Analysis] F --> H{Model Accurate?} G --> I[Report Results] H -->|Yes| J[Deploy Model] H -->|No| K[Refine Model] J --> L[Monitor Performance] K --> F L --> M[End: Success] I --> N[End: Report Generated] style A fill:#f9f,stroke:#333,stroke-width:2px style M fill:#9f9,stroke:#333,stroke-width:2px style N fill:#9f9,stroke:#333,stroke-width:2px Mind Maps : mindmap root((ESIIL)) section Data Sources Satellite Imagery ::icon(fa fa-satellite) Remote Sensing Data Drones Aircraft On-ground Sensors Weather Stations IoT Devices Open Environmental Data Public Datasets ::icon(fa fa-database) section Research Focus Climate Change Analysis Ice Melt Patterns Sea Level Rise Biodiversity Monitoring Species Distribution Habitat Fragmentation Geospatial Analysis Techniques Machine Learning Models Predictive Analytics section Applications Conservation Strategies ::icon(fa fa-leaf) Urban Planning Green Spaces Disaster Response Flood Mapping Wildfire Tracking section Tools and Technologies GIS Software QGIS ArcGIS Programming Languages Python R Cloud Computing Platforms AWS Google Earth Engine Data Visualization D3.js Tableau Timelines : gantt title ESIIL Year 2 Project Schedule dateFormat YYYY-MM-DD section CI Sovereign OASIS via private jupiterhubs :2024-08-01, 2024-10-30 OASIS documentation :2024-09-15, 70d Data cube OASIS via cyverse account :2024-09-15, 100d Integrate with ESIIL User Management system :2024-08-01, 2024-11-30 Build badges to deploy DE from mkdoc :2024-09-01, 2024-12-15 Streamline Github ssh key management :2024-10-01, 2024-12-31 Cyverse support (R proxy link) :2024-11-01, 2024-12-31 Cyverse use summary and statistics :2024-08-01, 2024-12-15 section CI Consultation and Education Conferences/Invited talks :2024-08-01, 2024-12-31 Office hours :2024-08-15, 2024-12-15 Proposals :2024-09-01, 2024-11-15 Private lessons :2024-09-15, 2024-11-30 Pre-event trainings :2024-10-01, 2024-12-15 Textbook development w/ education team :2024-08-01, 2024-12-15 Train the trainers / group lessons :2024-08-15, 2024-11-30 Tribal engagement :2024-09-01, 2024-12-15 Ethical Space training :2024-09-15, 2024-12-31 section CI Design and Build Data library (repository) :2024-08-01, 2024-10-30 Analytics library (repository) :2024-08-15, 2024-11-15 Containers (repository) :2024-09-01, 2024-11-30 Cloud infrastructure templates (repository) :2024-09-15, 2024-12-15 Tribal resilience Data Cube :2024-10-01, 2024-12-31 %%{init: { 'logLevel': 'debug', 'theme': 'base', 'gitGraph': {'rotateCommitLabel': true}} }%% gitGraph commit id: \"Start from template\" branch c1 commit id: \"Set up SSH key pair\" commit id: \"Modify _config.yml for GitHub Pages\" commit id: \"Initial website structure\" commit id: \"Add new markdown pages\" commit id: \"Update navigation tree\" commit id: \"Edit existing pages\" commit id: \"Delete old markdown pages\" commit id: \"Finalize website updates\" commit id: \"Add new markdown pages\" commit id: \"Update navigation tree\" checkout c1 branch b1 commit commit checkout c1 merge b1 %%{init: {\"quadrantChart\": {\"chartWidth\": 400, \"chartHeight\": 400}, \"themeVariables\": {\"quadrant1TextFill\": \"#ff0000\"} }}%% quadrantChart x-axis Urgent --> Not Urgent y-axis Not Important --> \"Important \u2764\" quadrant-1 Plan quadrant-2 Do quadrant-3 Delegate quadrant-4 Delete timeline title Major Events in Environmental Science and Data Science section Environmental Science 19th century : Foundations in Ecology and Conservation 1962 : Publication of 'Silent Spring' by Rachel Carson 1970 : First Earth Day 1987 : Brundtland Report introduces Sustainable Development 1992 : Rio Earth Summit 2015 : Paris Agreement on Climate Change section Data Science 1960s-1970s : Development of Database Management Systems 1980s : Emergence of Data Warehousing 1990s : Growth of the World Wide Web and Data Mining 2000s : Big Data and Predictive Analytics 2010s : AI and Machine Learning Revolution 2020s : Integration of AI in Environmental Research erDiagram CAR ||--o{ NAMED-DRIVER : allows CAR { string registrationNumber string make string model } PERSON ||--o{ NAMED-DRIVER : is PERSON { string firstName string lastName int age } --- config: sankey: showValues: false --- sankey-beta NASA Data,Big Data Harmonization,100 Satellite Imagery,Big Data Harmonization,80 Open Environmental Data,Big Data Harmonization,70 Remote Sensing Data,Big Data Harmonization,90 Big Data Harmonization, Data Analysis and Integration,340 Data Analysis and Integration,Climate Change Research,100 Data Analysis and Integration,Biodiversity Monitoring,80 Data Analysis and Integration,Geospatial Mapping,60 Data Analysis and Integration,Urban Planning,50 Data Analysis and Integration,Disaster Response,50","title":"4. Diagrams with Mermaid"},{"location":"trainings/training_two/#5-interactive-elements","text":"Hyperlinks : Use the format [link text](URL) . Google Play Tetris Embedding Interactive Content : Use HTML tags or specific platform embed codes. <iframe src=\"https://example.com/interactive-content\" width=\"600\" height=\"400\"></iframe>","title":"5. Interactive Elements"},{"location":"trainings/training_two/#6-math-notation","text":"Markdown can be combined with LaTeX for mathematical notation, useful in environmental data science for expressing statistical distributions, coordinate systems, and more. This requires a Markdown renderer with LaTeX support (like MathJax or KaTeX). Inline Math : Use single dollar signs for inline math expressions. Representing the normal distribution. Example: The probability density function of the normal distribution is given by \\(f(x|\\mu,\\sigma) = \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\\) .` Display Math : Use double dollar signs for standalone equations. Example: $$ f(x|\\mu,\\sigma) = \\frac{1}{\\sigma\\sqrt{2\\pi}}e {-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right) 2} $$ Common LaTeX Elements for Environmental Data Science : Statistical Distributions : Normal Distribution: \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2} for \\(\\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^2}\\) Poisson Distribution: P(k; \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!} for \\(P(k; \\lambda) = \\frac{\\lambda^k e^{-\\lambda}}{k!}\\) Coordinate Systems : Spherical Coordinates: (r, \\theta, \\phi) for \\((r, \\theta, \\phi)\\) Cartesian Coordinates: (x, y, z) for \\((x, y, z)\\) Geospatial Equations : Haversine Formula for Distance: a = \\sin^2\\left(\\frac{\\Delta\\phi}{2}\\right) + \\cos(\\phi_1)\\cos(\\phi_2)\\sin^2\\left(\\frac{\\Delta\\lambda}{2}\\right) for \\(a = \\sin^2\\left(\\frac{\\Delta\\phi}{2}\\right) + \\cos(\\phi_1)\\cos(\\phi_2)\\sin^2\\left(\\frac{\\Delta\\lambda}{2}\\right)\\) Note: The rendering of these equations as formatted math will depend on your Markdown viewer's LaTeX capabilities.","title":"6. Math Notation"},{"location":"trainings/training_two/#7-effective-citations-in-markdown","text":"","title":"7. Effective Citations in Markdown"},{"location":"trainings/training_two/#inline-citations","text":"Objective: Learn how to use inline citations in Markdown. Example Usage: Inline citation of a single work: Some text with an inline citation. [ @jones :envstudy:2020] Inline citation with specific page or section: More text with a specific section cited. [See @jones :envstudy:2020, \u00a74.2] Contrasting views: Discussion of a topic with a contrasting view. [Contra @smith :climatechange:2019, p. 78]","title":"Inline Citations"},{"location":"trainings/training_two/#footnote-citations","text":"Objective: Understand how to use footnote citations in Markdown. Example Usage: Citing with a footnote: Some statement in the text. 1 Multiple references to the same footnote: Another statement referring to the same source. 1 A different citation: Additional comment with a new citation. 2","title":"Footnote Citations"},{"location":"trainings/training_two/#creating-footnotes","text":"Example Syntax: First reference details. Example: Emma Jones, \"Environmental Study,\" Nature Journal, May 2020, https://nature-journal.com/envstudy2020 . \u21a9 \u21a9 Second reference details. Example: David Smith, \"Climate Change Controversies,\" Science Daily, August 2019, https://sciencedaily.com/climatechange2019 . \u21a9","title":"Creating Footnotes"},{"location":"worksheets/worksheet_0/","text":"Exploring Resilience with Data in your Third Space (CyVerse) \u00b6 Instructions \u00b6 Work through the prompts below with the people at your table. Please use a decision-making method to decide before moving to a new section of the activity. Introductions \u00b6 Please share the following information with your team: - Name - Pronouns - Where did you travel from? - Reflecting back on the polarities exercise, share one thing you observed about yourself. Objectives of this group activity \u00b6 Increase comfort with Cyverse Practice decision-making with a group Get to know other Summit participants Explore how historic policies continue to affect the spatial distribution of environmental amenities. Background \u00b6 Introduction to Redlining \u00b6 This group exploration delves into the long-term impacts of historical redlining on urban greenspace, emphasizing the powerful role of maps in shaping environmental and social landscapes. By drawing on the research by Nardone et al. (2021), you will collaboratively investigate how discriminatory practices encoded in maps have led to persistent disparities in urban settings. This exploration aims to uncover the resilience of communities in adapting to these entrenched injustices and to foster a deeper understanding of how mapping can serve both as a tool of exclusion and as a means for promoting social equity. Understanding Redlining as a Systemic Disturbance \u00b6 Redlining originated in the 1930s as a discriminatory practice where the Home Owners' Loan Corporation (HOLC) systematically denied mortgages or offered unfavorable terms based on racial and ethnic compositions. This methodical exclusion, executed through maps that color-coded \"risky\" investment areas in red, marked minority-populated areas, denying them crucial investment and development opportunities and initiating a profound and lasting disturbance in the urban fabric. Maps serve as powerful tools beyond navigation; they communicate and enforce control. By defining neighborhood boundaries through redlining, HOLC maps not only mirrored societal biases but also perpetuated and embedded them into the urban landscape. This manipulation of geographic data set a trajectory that limited economic growth, dictated the allocation of services, and influenced the development or deterioration of community infrastructure. Figure 1: 1938 Map of Atlanta uses colors as grades for neighborhoods. The red swaths identify each area with large African-American populations that were deemed \u201cless safe.\u201d Explore the Story Map: Click on the image above to explore the interactive story map about [subject of the story map]. Resilience and Adaptation in Urban Environments \u00b6 The legacy of redlining presents both a challenge and an opportunity for resilience and adaptation. Economically and socially, redlining entrenched cycles of poverty and racial segregation, creating a resilient wealth gap that has been difficult to dismantle. Environmentally, the neighborhoods targeted by redlining continue to face significant challenges\u2014they generally feature less greenspace, suffer from higher pollution levels, and are more vulnerable to the impacts of climate change. These factors compound the health and wellness challenges faced by residents. Despite these adversities, urban communities have continually demonstrated remarkable resilience. Adaptation strategies, such as community-led green initiatives, urban agriculture, and grassroots activism, have emerged as responses to these systemic disturbances. By enhancing green infrastructure and advocating for equitable environmental policies, these communities strive to increase their resilience against both historical inequities and environmental challenges. The following group exercise will uncover the impact of redlining on urban greenspace and highlight the adaptive strategies developed in response to this enduring disturbance. Through mapping and analysis, we aim to illustrate the powerful role that geographic data can play in understanding and fostering urban resilience and social equity. References \u00b6 Nardone, A., Rudolph, K. E., Morello-Frosch, R., & Casey, J. A. (2021). Redlines and Greenspace: The Relationship between Historical Redlining and 2010 Greenspace across the United States. Environmental Health Perspectives , 129(1), 017006. DOI:10.1289/EHP7495. Hoffman, J. S., Shandas, V., & Pendleton, N. (2020). The Effects of Historical Housing Policies on Resident Exposure to Intra-Urban Heat: A Study of 108 US Urban Areas. Climate , 8(1), 12. DOI:10.3390/cli8010012. Group Activity \u00b6 Setting up CyVerse \u00b6 Log into CyVerse Use the startup procedure to start an instance on CyVerse. Be sure to: Create an SSH key and add it to your Github account (2 nd half of start-up procedure instructions) Clone the Innovation-Summit-2024 repository Complete the R Studio hack Please raise your hand if you have questions or run into technical issues. ESIIL represenatives will be walking around to help. Once you initiate your CyVerse instance, DO NOT close it . You can keep this instance running the entire Summit so you don't have to do the start-up procedure again. Create a Map \u00b6 We'll be using pre-developed code to visualize redlining impacts on Denver, CO. Please follow these steps: Open R Studio in CyVerse Use \"files\" (lower right) to navigate to this markdown document: innovation-summit-2024/code/worksheet_redlining_student_edition.qmd Start at the beginning of the code and complete the following: Create a map of historically redlined districts in Denver Overlay current-day NDVI (vegetation greenness) data onto your map You can choose \"Run All\" to run all the code at once. Note: It will take about 5 minutes to run. Now, it's your turn to choose a variable to observe. Use the provided code to select the variable you want to add to your map. More detailed instructions are included in the code. Variable Options: Tree inventory Traffic accidents Stream sampling effort Soil sampling effort Public art density Liquor license density Crime density Decision-Making \u00b6 Use the gradient of agreement (Kaner 2014) to make a decision as a team about which variable you want to explore. Unique Title \u00b6 Come up with a unique title for your anaylysis. Write it down on a sticky note at your table. Discussion Questions \u00b6 After completing your anaylysis, discuss these questions with your group: What patterns do you notice? What are the immediate questions that come to mind? How does big data help illustrate resilience? Redlining has a long-term impact. How is the impact of redlining still evident today? Still have time? \u00b6 As a group, choose another variable to explore and then discuss your findings. Look through all the variables: \u00b6 Once you're done, you can see all the code and variable maps on the \"Teacher Edition\" version of the activity: https://cu-esiil.github.io/Innovation-Summit-2024/worksheets/worksheet_redlining/","title":"Explore an example (student edition)"},{"location":"worksheets/worksheet_0/#exploring-resilience-with-data-in-your-third-space-cyverse","text":"","title":"Exploring Resilience with Data in your Third Space (CyVerse)"},{"location":"worksheets/worksheet_0/#instructions","text":"Work through the prompts below with the people at your table. Please use a decision-making method to decide before moving to a new section of the activity.","title":"Instructions"},{"location":"worksheets/worksheet_0/#introductions","text":"Please share the following information with your team: - Name - Pronouns - Where did you travel from? - Reflecting back on the polarities exercise, share one thing you observed about yourself.","title":"Introductions"},{"location":"worksheets/worksheet_0/#objectives-of-this-group-activity","text":"Increase comfort with Cyverse Practice decision-making with a group Get to know other Summit participants Explore how historic policies continue to affect the spatial distribution of environmental amenities.","title":"Objectives of this group activity"},{"location":"worksheets/worksheet_0/#background","text":"","title":"Background"},{"location":"worksheets/worksheet_0/#introduction-to-redlining","text":"This group exploration delves into the long-term impacts of historical redlining on urban greenspace, emphasizing the powerful role of maps in shaping environmental and social landscapes. By drawing on the research by Nardone et al. (2021), you will collaboratively investigate how discriminatory practices encoded in maps have led to persistent disparities in urban settings. This exploration aims to uncover the resilience of communities in adapting to these entrenched injustices and to foster a deeper understanding of how mapping can serve both as a tool of exclusion and as a means for promoting social equity.","title":"Introduction to Redlining"},{"location":"worksheets/worksheet_0/#understanding-redlining-as-a-systemic-disturbance","text":"Redlining originated in the 1930s as a discriminatory practice where the Home Owners' Loan Corporation (HOLC) systematically denied mortgages or offered unfavorable terms based on racial and ethnic compositions. This methodical exclusion, executed through maps that color-coded \"risky\" investment areas in red, marked minority-populated areas, denying them crucial investment and development opportunities and initiating a profound and lasting disturbance in the urban fabric. Maps serve as powerful tools beyond navigation; they communicate and enforce control. By defining neighborhood boundaries through redlining, HOLC maps not only mirrored societal biases but also perpetuated and embedded them into the urban landscape. This manipulation of geographic data set a trajectory that limited economic growth, dictated the allocation of services, and influenced the development or deterioration of community infrastructure. Figure 1: 1938 Map of Atlanta uses colors as grades for neighborhoods. The red swaths identify each area with large African-American populations that were deemed \u201cless safe.\u201d Explore the Story Map: Click on the image above to explore the interactive story map about [subject of the story map].","title":"Understanding Redlining as a Systemic Disturbance"},{"location":"worksheets/worksheet_0/#resilience-and-adaptation-in-urban-environments","text":"The legacy of redlining presents both a challenge and an opportunity for resilience and adaptation. Economically and socially, redlining entrenched cycles of poverty and racial segregation, creating a resilient wealth gap that has been difficult to dismantle. Environmentally, the neighborhoods targeted by redlining continue to face significant challenges\u2014they generally feature less greenspace, suffer from higher pollution levels, and are more vulnerable to the impacts of climate change. These factors compound the health and wellness challenges faced by residents. Despite these adversities, urban communities have continually demonstrated remarkable resilience. Adaptation strategies, such as community-led green initiatives, urban agriculture, and grassroots activism, have emerged as responses to these systemic disturbances. By enhancing green infrastructure and advocating for equitable environmental policies, these communities strive to increase their resilience against both historical inequities and environmental challenges. The following group exercise will uncover the impact of redlining on urban greenspace and highlight the adaptive strategies developed in response to this enduring disturbance. Through mapping and analysis, we aim to illustrate the powerful role that geographic data can play in understanding and fostering urban resilience and social equity.","title":"Resilience and Adaptation in Urban Environments"},{"location":"worksheets/worksheet_0/#references","text":"Nardone, A., Rudolph, K. E., Morello-Frosch, R., & Casey, J. A. (2021). Redlines and Greenspace: The Relationship between Historical Redlining and 2010 Greenspace across the United States. Environmental Health Perspectives , 129(1), 017006. DOI:10.1289/EHP7495. Hoffman, J. S., Shandas, V., & Pendleton, N. (2020). The Effects of Historical Housing Policies on Resident Exposure to Intra-Urban Heat: A Study of 108 US Urban Areas. Climate , 8(1), 12. DOI:10.3390/cli8010012.","title":"References"},{"location":"worksheets/worksheet_0/#group-activity","text":"","title":"Group Activity"},{"location":"worksheets/worksheet_0/#setting-up-cyverse","text":"Log into CyVerse Use the startup procedure to start an instance on CyVerse. Be sure to: Create an SSH key and add it to your Github account (2 nd half of start-up procedure instructions) Clone the Innovation-Summit-2024 repository Complete the R Studio hack Please raise your hand if you have questions or run into technical issues. ESIIL represenatives will be walking around to help. Once you initiate your CyVerse instance, DO NOT close it . You can keep this instance running the entire Summit so you don't have to do the start-up procedure again.","title":"Setting up CyVerse"},{"location":"worksheets/worksheet_0/#create-a-map","text":"We'll be using pre-developed code to visualize redlining impacts on Denver, CO. Please follow these steps: Open R Studio in CyVerse Use \"files\" (lower right) to navigate to this markdown document: innovation-summit-2024/code/worksheet_redlining_student_edition.qmd Start at the beginning of the code and complete the following: Create a map of historically redlined districts in Denver Overlay current-day NDVI (vegetation greenness) data onto your map You can choose \"Run All\" to run all the code at once. Note: It will take about 5 minutes to run. Now, it's your turn to choose a variable to observe. Use the provided code to select the variable you want to add to your map. More detailed instructions are included in the code. Variable Options: Tree inventory Traffic accidents Stream sampling effort Soil sampling effort Public art density Liquor license density Crime density","title":"Create a Map"},{"location":"worksheets/worksheet_0/#decision-making","text":"Use the gradient of agreement (Kaner 2014) to make a decision as a team about which variable you want to explore.","title":"Decision-Making"},{"location":"worksheets/worksheet_0/#unique-title","text":"Come up with a unique title for your anaylysis. Write it down on a sticky note at your table.","title":"Unique Title"},{"location":"worksheets/worksheet_0/#discussion-questions","text":"After completing your anaylysis, discuss these questions with your group: What patterns do you notice? What are the immediate questions that come to mind? How does big data help illustrate resilience? Redlining has a long-term impact. How is the impact of redlining still evident today?","title":"Discussion Questions"},{"location":"worksheets/worksheet_0/#still-have-time","text":"As a group, choose another variable to explore and then discuss your findings.","title":"Still have time?"},{"location":"worksheets/worksheet_0/#look-through-all-the-variables","text":"Once you're done, you can see all the code and variable maps on the \"Teacher Edition\" version of the activity: https://cu-esiil.github.io/Innovation-Summit-2024/worksheets/worksheet_redlining/","title":"Look through all the variables:"},{"location":"worksheets/worksheet_2/","text":"TEAM ACTIVITY Day 1: Make a plan \u00b6 Instructions \u00b6 Work through the prompts in order. Please use a decision-making method \u201cto decide\u201d before moving to a new section of the activity. Day 1 Objectives \u00b6 Get to know your group members. Decide on a research question and project title. Start exploring potential datasets. Introductions (approx. time: 10 mins total or \"1-2 breaths\" per prompt) \u00b6 Please share the following information about yourself. Each team member should type their response in the space below (create more as needed). Name: [Your Name] Pronouns: [Your Pronouns] Expertise: [Your Expertise] Environmental Data Science Superpower: [Describe your unique skill or interest in environmental data science] Reflection on Polarities Exercise: [Share one thing you observed about yourself] Name: [Your Name] Pronouns: [Your Pronouns] Expertise: [Your Expertise] Environmental Data Science Superpower: [Describe your unique skill or interest in environmental data science] Reflection on Polarities Exercise: [Share one thing you observed about yourself] Name: [Your Name] Pronouns: [Your Pronouns] Expertise: [Your Expertise] Environmental Data Science Superpower: [Describe your unique skill or interest in environmental data science] Reflection on Polarities Exercise: [Share one thing you observed about yourself] Name: [Your Name] Pronouns: [Your Pronouns] Expertise: [Your Expertise] Environmental Data Science Superpower: [Describe your unique skill or interest in environmental data science] Reflection on Polarities Exercise: [Share one thing you observed about yourself] Continue adding more team members following the same format, with a line break after each person. Research Question: Innovation for Inclusion or Computation (approx. time: 5-10 mins) \u00b6 Write the research question your team selected in the space below. Feel free to revise the original question. [Insert research question here] Project Title (approx. time: 5-10 mins) \u00b6 Craft a catchy title for your team\u2019s project. Think of something that would grab attention at a conference or in a headline. [Insert title here] Promoting Resilience and Adaptation \u00b6 Describe how your proposed project aligns with the Summit's themes of resilience and adaptation. Please provide 1-2 sentences that clearly connect your project's goals or methods to these themes. [Insert your response here] Choosing Big Data Sets \u00b6 Explore potential data sets for your project's topic from the data library . List your options below, organizing them by whether they represent the system you're studying (e.g., deciduous forests) or the disruption to it (e.g., wildfire). Then discuss your choices and indicate your final selections. Draft Potential Data Sets \u00b6 System Being Perturbed/Disrupted: [List all potential data sets here] Perturbator/Disrupter: [List all potential data sets here] Final Choice \u00b6 System Being Perturbed/Disrupted (Final Choice): [Indicate your final selected data set here] Perturbator/Disrupter (Final Choice): [Indicate your final selected data set here] Brief Check-in: Definition of Resilience (approx. 5 mins) \u00b6 Below is a working definition of the word \"Resilience\" for the Summit. Please edit the definition below based on your earlier discussion and chosen project. \"Resilience is the capacity of a system, community, organization, or individual to absorb stress, recover from disruptions, adapt to change, and continue to develop and thrive.\" [Edit or reaffirm this definition here] Day 1 Report Back \u00b6 Select one representative from your group to present your proposed project. For the report back, each group will have 30-60 seconds to present their responses to the questions below. Keep it concise and focused. This is just a quick oral presentation - you will not be able to use slides/images. Project Title: [Insert your team's project title here] Research Question: [Insert your team's refined research question here] Selected Data Sets: [List the data sets your team has chosen to use here]","title":"Make a plan"},{"location":"worksheets/worksheet_2/#team-activity-day-1-make-a-plan","text":"","title":"TEAM ACTIVITY Day 1: Make a plan"},{"location":"worksheets/worksheet_2/#instructions","text":"Work through the prompts in order. Please use a decision-making method \u201cto decide\u201d before moving to a new section of the activity.","title":"Instructions"},{"location":"worksheets/worksheet_2/#day-1-objectives","text":"Get to know your group members. Decide on a research question and project title. Start exploring potential datasets.","title":"Day 1 Objectives"},{"location":"worksheets/worksheet_2/#introductions-approx-time-10-mins-total-or-1-2-breaths-per-prompt","text":"Please share the following information about yourself. Each team member should type their response in the space below (create more as needed). Name: [Your Name] Pronouns: [Your Pronouns] Expertise: [Your Expertise] Environmental Data Science Superpower: [Describe your unique skill or interest in environmental data science] Reflection on Polarities Exercise: [Share one thing you observed about yourself] Name: [Your Name] Pronouns: [Your Pronouns] Expertise: [Your Expertise] Environmental Data Science Superpower: [Describe your unique skill or interest in environmental data science] Reflection on Polarities Exercise: [Share one thing you observed about yourself] Name: [Your Name] Pronouns: [Your Pronouns] Expertise: [Your Expertise] Environmental Data Science Superpower: [Describe your unique skill or interest in environmental data science] Reflection on Polarities Exercise: [Share one thing you observed about yourself] Name: [Your Name] Pronouns: [Your Pronouns] Expertise: [Your Expertise] Environmental Data Science Superpower: [Describe your unique skill or interest in environmental data science] Reflection on Polarities Exercise: [Share one thing you observed about yourself] Continue adding more team members following the same format, with a line break after each person.","title":"Introductions (approx. time: 10 mins total or \"1-2 breaths\" per prompt)"},{"location":"worksheets/worksheet_2/#research-question-innovation-for-inclusion-or-computation-approx-time-5-10-mins","text":"Write the research question your team selected in the space below. Feel free to revise the original question. [Insert research question here]","title":"Research Question: Innovation for Inclusion or Computation (approx. time: 5-10 mins)"},{"location":"worksheets/worksheet_2/#project-title-approx-time-5-10-mins","text":"Craft a catchy title for your team\u2019s project. Think of something that would grab attention at a conference or in a headline. [Insert title here]","title":"Project Title (approx. time: 5-10 mins)"},{"location":"worksheets/worksheet_2/#promoting-resilience-and-adaptation","text":"Describe how your proposed project aligns with the Summit's themes of resilience and adaptation. Please provide 1-2 sentences that clearly connect your project's goals or methods to these themes. [Insert your response here]","title":"Promoting Resilience and Adaptation"},{"location":"worksheets/worksheet_2/#choosing-big-data-sets","text":"Explore potential data sets for your project's topic from the data library . List your options below, organizing them by whether they represent the system you're studying (e.g., deciduous forests) or the disruption to it (e.g., wildfire). Then discuss your choices and indicate your final selections.","title":"Choosing Big Data Sets"},{"location":"worksheets/worksheet_2/#draft-potential-data-sets","text":"System Being Perturbed/Disrupted: [List all potential data sets here] Perturbator/Disrupter: [List all potential data sets here]","title":"Draft Potential Data Sets"},{"location":"worksheets/worksheet_2/#final-choice","text":"System Being Perturbed/Disrupted (Final Choice): [Indicate your final selected data set here] Perturbator/Disrupter (Final Choice): [Indicate your final selected data set here]","title":"Final Choice"},{"location":"worksheets/worksheet_2/#brief-check-in-definition-of-resilience-approx-5-mins","text":"Below is a working definition of the word \"Resilience\" for the Summit. Please edit the definition below based on your earlier discussion and chosen project. \"Resilience is the capacity of a system, community, organization, or individual to absorb stress, recover from disruptions, adapt to change, and continue to develop and thrive.\" [Edit or reaffirm this definition here]","title":"Brief Check-in: Definition of Resilience (approx. 5 mins)"},{"location":"worksheets/worksheet_2/#day-1-report-back","text":"Select one representative from your group to present your proposed project. For the report back, each group will have 30-60 seconds to present their responses to the questions below. Keep it concise and focused. This is just a quick oral presentation - you will not be able to use slides/images. Project Title: [Insert your team's project title here] Research Question: [Insert your team's refined research question here] Selected Data Sets: [List the data sets your team has chosen to use here]","title":"Day 1 Report Back"},{"location":"worksheets/worksheet_3/","text":"TEAM ACTIVITY 2: Innovate as a Team \u00b6 Welcome back! We hope today is a productive day getting to know your team and coding. Day 2 summary: \u00b6 Please complete the warm-up with your team, briefly review today\u2019s objectives, and carefully read the Day 2 and Day 3 report out items to guide your efforts. \"C:\\Users\\monic\\OneDrive\\Captura de pantalla 2024-05-15 173453.png\" Objectives for Day 2 \u00b6 Work together to decide on the data sets you will use. Reminder: Use a decision-making technique discussed during Day 1. Kaner\u2019s Gradient of Agreement is below for reference. Practice joining your datasets together. Discuss and try creating interesting graphics. Report back on your results at the end of the day. Today\u2019s report back is short and focused on your team process. The Day 3 report back is more detailed. Morning Warm-up \u00b6 Please share the following informaton with your team. (No need to write down your responses this time) - Name - Pronouns - Reflecting on Day 1, what is something that surprised you? Decision-Making \u00b6 Use the gradient of agreement (Kaner 20214) to make decisions as a team. Day 2 Report Back \u00b6 Day 2 report-back questions are about the team process . We are interested in your team\u2019s unique experience. Below are some prompts you might consider. You don't need to address all of them - choose which ones you want to present. Please limit your reflection to 2-3 mins. What worked well for your team?**What worked ?:Constructive arguments , open dialogue , it is ok to disagree, circle environment What\u2019s one thing you would change?**we decolonize our working space Did your group ever have an \u201cah-ha\u201d moment? What led up to that moment?**Eureka moment : Tribal leadership guidance, the question change, conceptualization of a visual statement and the conceptual idea of the sovereign data environment Did your group experience the groan zone? What is one tip you want to share with future groups at the Summit about getting through the groan zone?**active listening and build ideas from that expansion to compression, learning about disagreements [insert your group reflection responses here] Looking Ahead: Day 3 Report Back \u00b6 These are the prompts for the final Report Back tomorrow (Day 3) - start thinking about these questions as you work today. Each group will share their Day 3 GitHub page on the screen and give a 4 minute presentation. Project Title: Research Question: One interesting graphic/finding: What are you thinking about doing next with your team? Long-term, short-term? What\u2019s missing: what resources, people, data sets, etc. does your team need? Reminder \u00b6 There is the opportunity for groups to continue working on their projects as an ESIIL Working Group. If you love your team and want to continue working together, considering submitting a Working Group Application this fall. See the ESIIL website for more information: https://esiil.org/working-groups .","title":"Innovate as a team"},{"location":"worksheets/worksheet_3/#team-activity-2-innovate-as-a-team","text":"Welcome back! We hope today is a productive day getting to know your team and coding.","title":"TEAM ACTIVITY 2: Innovate as a Team"},{"location":"worksheets/worksheet_3/#day-2-summary","text":"Please complete the warm-up with your team, briefly review today\u2019s objectives, and carefully read the Day 2 and Day 3 report out items to guide your efforts. \"C:\\Users\\monic\\OneDrive\\Captura de pantalla 2024-05-15 173453.png\"","title":"Day 2 summary:"},{"location":"worksheets/worksheet_3/#objectives-for-day-2","text":"Work together to decide on the data sets you will use. Reminder: Use a decision-making technique discussed during Day 1. Kaner\u2019s Gradient of Agreement is below for reference. Practice joining your datasets together. Discuss and try creating interesting graphics. Report back on your results at the end of the day. Today\u2019s report back is short and focused on your team process. The Day 3 report back is more detailed.","title":"Objectives for Day 2"},{"location":"worksheets/worksheet_3/#morning-warm-up","text":"Please share the following informaton with your team. (No need to write down your responses this time) - Name - Pronouns - Reflecting on Day 1, what is something that surprised you?","title":"Morning Warm-up"},{"location":"worksheets/worksheet_3/#decision-making","text":"Use the gradient of agreement (Kaner 20214) to make decisions as a team.","title":"Decision-Making"},{"location":"worksheets/worksheet_3/#day-2-report-back","text":"Day 2 report-back questions are about the team process . We are interested in your team\u2019s unique experience. Below are some prompts you might consider. You don't need to address all of them - choose which ones you want to present. Please limit your reflection to 2-3 mins. What worked well for your team?**What worked ?:Constructive arguments , open dialogue , it is ok to disagree, circle environment What\u2019s one thing you would change?**we decolonize our working space Did your group ever have an \u201cah-ha\u201d moment? What led up to that moment?**Eureka moment : Tribal leadership guidance, the question change, conceptualization of a visual statement and the conceptual idea of the sovereign data environment Did your group experience the groan zone? What is one tip you want to share with future groups at the Summit about getting through the groan zone?**active listening and build ideas from that expansion to compression, learning about disagreements [insert your group reflection responses here]","title":"Day 2 Report Back"},{"location":"worksheets/worksheet_3/#looking-ahead-day-3-report-back","text":"These are the prompts for the final Report Back tomorrow (Day 3) - start thinking about these questions as you work today. Each group will share their Day 3 GitHub page on the screen and give a 4 minute presentation. Project Title: Research Question: One interesting graphic/finding: What are you thinking about doing next with your team? Long-term, short-term? What\u2019s missing: what resources, people, data sets, etc. does your team need?","title":"Looking Ahead: Day 3 Report Back"},{"location":"worksheets/worksheet_3/#reminder","text":"There is the opportunity for groups to continue working on their projects as an ESIIL Working Group. If you love your team and want to continue working together, considering submitting a Working Group Application this fall. See the ESIIL website for more information: https://esiil.org/working-groups .","title":"Reminder"},{"location":"worksheets/worksheet_4/","text":"TEAM ACTIVITY 3: Share Your Progress \u00b6 Use this time to prepare for the final report back, where you'll share an interesting result/outcome from your project and discuss potential future plans. Day 3 Report Back \u00b6 Select one or more people from your group to give a final report back. You will share this page on the screen as your presentation. Presentations should be no longer than 4 minutes. Project Title: [Insert project title here] Research Question: [Insert research question here] One interesting graphic/finding: [Insert graphic/finding here] What are you thinking about doing next with your team? Long-term, short-term? [Insert response here] What\u2019s missing: what resources, people, data sets, etc. does your team need? [Insert response here] Reminder \u00b6 There is the opportunity for groups to continue working on their projects as an ESIIL Working Group. If you love your team and want to continue working together, considering submitting a Working Group Application this fall. See the ESIIL website for more information: https://esiil.org/working-groups . Thank you for participating in the 2024 ESIIL Innovation Summit!!","title":"Share your progress"},{"location":"worksheets/worksheet_4/#team-activity-3-share-your-progress","text":"Use this time to prepare for the final report back, where you'll share an interesting result/outcome from your project and discuss potential future plans.","title":"TEAM ACTIVITY 3: Share Your Progress"},{"location":"worksheets/worksheet_4/#day-3-report-back","text":"Select one or more people from your group to give a final report back. You will share this page on the screen as your presentation. Presentations should be no longer than 4 minutes. Project Title: [Insert project title here] Research Question: [Insert research question here] One interesting graphic/finding: [Insert graphic/finding here] What are you thinking about doing next with your team? Long-term, short-term? [Insert response here] What\u2019s missing: what resources, people, data sets, etc. does your team need? [Insert response here]","title":"Day 3 Report Back"},{"location":"worksheets/worksheet_4/#reminder","text":"There is the opportunity for groups to continue working on their projects as an ESIIL Working Group. If you love your team and want to continue working together, considering submitting a Working Group Application this fall. See the ESIIL website for more information: https://esiil.org/working-groups . Thank you for participating in the 2024 ESIIL Innovation Summit!!","title":"Reminder"},{"location":"worksheets/worksheet_5/","text":"TEAM ACTIVITY 2: Make a plan \u00b6 Instructions: \u00b6 Follow the Prompts Sequentially: Work through the prompts in the order they are presented. Decision-Making Process: Before advancing to the next section of the handout, use a structured decision-making method. Ensure that all team members agree on the decisions made. This approach helps in maintaining coherence and collective agreement throughout the activities. Introductions (approx. time: 10 mins total or \"2 breaths\" per person) \u00b6 Each team member please share the following information about yourself: Name: [Your Name] Preferred Pronouns: [Your Pronouns] Expertise: [Your Expertise] Environmental Data Science Superpower: [Describe your unique skill or interest in environmental data science] Reflection on Polarities Exercise: [Share one thing you observed about yourself] Name: [Your Name] Preferred Pronouns: [Your Pronouns] Expertise: [Your Expertise] Environmental Data Science Superpower: [Describe your unique skill or interest in environmental data science] Reflection on Polarities Exercise: [Share one thing you observed about yourself] Name: [Your Name] Preferred Pronouns: [Your Pronouns] Expertise: [Your Expertise] Environmental Data Science Superpower: [Describe your unique skill or interest in environmental data science] Reflection on Polarities Exercise: [Share one thing you observed about yourself] Name: [Your Name] Preferred Pronouns: [Your Pronouns] Expertise: [Your Expertise] Environmental Data Science Superpower: [Describe your unique skill or interest in environmental data science] Reflection on Polarities Exercise: [Share one thing you observed about yourself] Continue adding more team members following the same format, with a line break after each person. Research Question: Innovation for Inclusion or Computation (approx. time: 5-10 mins) \u00b6 Refine the initial research question your team developed earlier. Please make any necessary edits or adjustments below: [Edit or refine your team's previously selected research question here] Title: Innovation for Inclusion or Computation (approx. time: 5-10 mins) \u00b6 Craft a catchy and public-facing title for your team\u2019s project. Think of something that would grab attention at a conference or in a headline: [Create an engaging title that captures the essence of your project here] Promoting Resilience and Adaptation \u00b6 Describe how your proposed project aligns with the summit's themes of resilience and adaptation. Please provide 1-2 sentences that clearly connect your project's goals or methods to these themes: [Insert your response here] Which Big Data Sets \u00b6 Explore potential data sets for your project's topic from the data library . List your options below, and after discussion and review, indicate your final choice for both the system being perturbed/disrupted and the perturbator/disrupter. Draft Potential Data Sets \u00b6 System Being Perturbed/Disrupted: [List all potential data sets here] Perturbator/Disrupter: [List all potential data sets here] Final Choice \u00b6 System Being Perturbed/Disrupted (Final Choice): [Indicate your final selected data set here] Perturbator/Disrupter (Final Choice): [Indicate your final selected data set here] Brief Check-in: Definition of Resilience (approx. 5 mins) \u00b6 Review and refine the working definition of 'Resilience' provided below, based on your discussions and insights from earlier sections of this worksheet. Adjust the definition to better align with your team\u2019s understanding or reaffirm it if it resonates with your views: \"Resilience is the capacity of a system, community, organization, or individual to absorb stress, recover from disruptions, adapt to change, and continue to develop and thrive.\" [Edit or reaffirm this definition here] Day 1 Report Back \u00b6 Select one representative from your group to present your proposed project to all Summit attendees (~125 people). This is an opportunity for your breakout group to summarize your project\u2019s approach as it relates to the Summit themes of adaptation and resilience. Presentation Content: Project Title: [Insert your team's project title here] Research Question: [Insert your team's refined research question here] Selected Data Sets: [List the data sets your team has chosen to use here] Presentation Guidelines: Duration: Your presentation should last between 30-60 seconds. Keep it concise and focused. This is just a quick oral presentation -you will not be able to use slides/images. Objective: Clearly communicate how your project aligns with the conference themes and highlight actionable insights that can aid decision makers.","title":"TEAM ACTIVITY 2: Make a plan"},{"location":"worksheets/worksheet_5/#team-activity-2-make-a-plan","text":"","title":"TEAM ACTIVITY 2: Make a plan"},{"location":"worksheets/worksheet_5/#instructions","text":"Follow the Prompts Sequentially: Work through the prompts in the order they are presented. Decision-Making Process: Before advancing to the next section of the handout, use a structured decision-making method. Ensure that all team members agree on the decisions made. This approach helps in maintaining coherence and collective agreement throughout the activities.","title":"Instructions:"},{"location":"worksheets/worksheet_5/#introductions-approx-time-10-mins-total-or-2-breaths-per-person","text":"Each team member please share the following information about yourself: Name: [Your Name] Preferred Pronouns: [Your Pronouns] Expertise: [Your Expertise] Environmental Data Science Superpower: [Describe your unique skill or interest in environmental data science] Reflection on Polarities Exercise: [Share one thing you observed about yourself] Name: [Your Name] Preferred Pronouns: [Your Pronouns] Expertise: [Your Expertise] Environmental Data Science Superpower: [Describe your unique skill or interest in environmental data science] Reflection on Polarities Exercise: [Share one thing you observed about yourself] Name: [Your Name] Preferred Pronouns: [Your Pronouns] Expertise: [Your Expertise] Environmental Data Science Superpower: [Describe your unique skill or interest in environmental data science] Reflection on Polarities Exercise: [Share one thing you observed about yourself] Name: [Your Name] Preferred Pronouns: [Your Pronouns] Expertise: [Your Expertise] Environmental Data Science Superpower: [Describe your unique skill or interest in environmental data science] Reflection on Polarities Exercise: [Share one thing you observed about yourself] Continue adding more team members following the same format, with a line break after each person.","title":"Introductions (approx. time: 10 mins total or \"2 breaths\" per person)"},{"location":"worksheets/worksheet_5/#research-question-innovation-for-inclusion-or-computation-approx-time-5-10-mins","text":"Refine the initial research question your team developed earlier. Please make any necessary edits or adjustments below: [Edit or refine your team's previously selected research question here]","title":"Research Question: Innovation for Inclusion or Computation (approx. time: 5-10 mins)"},{"location":"worksheets/worksheet_5/#title-innovation-for-inclusion-or-computation-approx-time-5-10-mins","text":"Craft a catchy and public-facing title for your team\u2019s project. Think of something that would grab attention at a conference or in a headline: [Create an engaging title that captures the essence of your project here]","title":"Title: Innovation for Inclusion or Computation (approx. time: 5-10 mins)"},{"location":"worksheets/worksheet_5/#promoting-resilience-and-adaptation","text":"Describe how your proposed project aligns with the summit's themes of resilience and adaptation. Please provide 1-2 sentences that clearly connect your project's goals or methods to these themes: [Insert your response here]","title":"Promoting Resilience and Adaptation"},{"location":"worksheets/worksheet_5/#which-big-data-sets","text":"Explore potential data sets for your project's topic from the data library . List your options below, and after discussion and review, indicate your final choice for both the system being perturbed/disrupted and the perturbator/disrupter.","title":"Which Big Data Sets"},{"location":"worksheets/worksheet_5/#draft-potential-data-sets","text":"System Being Perturbed/Disrupted: [List all potential data sets here] Perturbator/Disrupter: [List all potential data sets here]","title":"Draft Potential Data Sets"},{"location":"worksheets/worksheet_5/#final-choice","text":"System Being Perturbed/Disrupted (Final Choice): [Indicate your final selected data set here] Perturbator/Disrupter (Final Choice): [Indicate your final selected data set here]","title":"Final Choice"},{"location":"worksheets/worksheet_5/#brief-check-in-definition-of-resilience-approx-5-mins","text":"Review and refine the working definition of 'Resilience' provided below, based on your discussions and insights from earlier sections of this worksheet. Adjust the definition to better align with your team\u2019s understanding or reaffirm it if it resonates with your views: \"Resilience is the capacity of a system, community, organization, or individual to absorb stress, recover from disruptions, adapt to change, and continue to develop and thrive.\" [Edit or reaffirm this definition here]","title":"Brief Check-in: Definition of Resilience (approx. 5 mins)"},{"location":"worksheets/worksheet_5/#day-1-report-back","text":"Select one representative from your group to present your proposed project to all Summit attendees (~125 people). This is an opportunity for your breakout group to summarize your project\u2019s approach as it relates to the Summit themes of adaptation and resilience. Presentation Content: Project Title: [Insert your team's project title here] Research Question: [Insert your team's refined research question here] Selected Data Sets: [List the data sets your team has chosen to use here] Presentation Guidelines: Duration: Your presentation should last between 30-60 seconds. Keep it concise and focused. This is just a quick oral presentation -you will not be able to use slides/images. Objective: Clearly communicate how your project aligns with the conference themes and highlight actionable insights that can aid decision makers.","title":"Day 1 Report Back"},{"location":"worksheets/worksheet_redlining/","text":"Redlining \u00b6 Exploring the Impact of Historical Redlining on Urban Greenspace: A Collaborative Examination of Maps, Justice, and Resilience \u00b6 Introduction \u00b6 This group exploration delves into the long-term impacts of historical redlining on urban greenspace, emphasizing the powerful role of maps in shaping environmental and social landscapes. By drawing on the research by Nardone et al. (2021), you will collaboratively investigate how discriminatory practices encoded in maps have led to persistent disparities in urban settings. This exploration aims to uncover the resilience of communities in adapting to these entrenched injustices and to foster a deeper understanding of how mapping can serve both as a tool of exclusion and as a means for promoting social equity. ) Understanding Redlining as a Systemic Disturbance \u00b6 Redlining originated in the 1930s as a discriminatory practice where the Home Owners\u2019 Loan Corporation (HOLC) systematically denied mortgages or offered unfavorable terms based on racial and ethnic compositions. This methodical exclusion, executed through maps that color-coded \u201crisky\u201d investment areas in red, marked minority-populated areas, denying them crucial investment and development opportunities and initiating a profound and lasting disturbance in the urban fabric. Maps serve as powerful tools beyond navigation; they communicate and enforce control. By defining neighborhood boundaries through redlining, HOLC maps not only mirrored societal biases but also perpetuated and embedded them into the urban landscape. This manipulation of geographic data set a trajectory that limited economic growth, dictated the allocation of services, and influenced the development or deterioration of community infrastructure. Figure 1: 1938 Map of Atlanta uses colors as grades for neighborhoods. The red swaths identify each area with large African-American populations that were deemed \u201cless safe.\u201d ArcGIS Story Map Explore the Story Map: Click on the image above to explore the interactive story map about [subject of the story map]. Resilience and Adaptation in Urban Environments \u00b6 The legacy of redlining presents both a challenge and an opportunity for resilience and adaptation. Economically and socially, redlining entrenched cycles of poverty and racial segregation, creating a resilient wealth gap that has been difficult to dismantle. Environmentally, the neighborhoods targeted by redlining continue to face significant challenges\u2014they generally feature less greenspace, suffer from higher pollution levels, and are more vulnerable to the impacts of climate change. These factors compound the health and wellness challenges faced by residents. Despite these adversities, urban communities have continually demonstrated remarkable resilience. Adaptation strategies, such as community-led green initiatives, urban agriculture, and grassroots activism, have emerged as responses to these systemic disturbances. By enhancing green infrastructure and advocating for equitable environmental policies, these communities strive to increase their resilience against both historical inequities and environmental challenges. Watch the video Video Title: Exploring the Impacts of Historical Redlining on Urban Development Description: Click on the image above to watch a video that delves into the consequences of historical redlining and its ongoing impact on urban environments. This educational piece offers insights into how such discriminatory practices have shaped cities and what can be learned from them. The following group exercise will not only uncover the impact of redlining on urban greenspace but also highlight the adaptive strategies developed in response to this enduring disturbance. Through mapping and analysis, we aim to illustrate the powerful role that geographic data can play in understanding and fostering urban resilience and social equity. References \u00b6 Nardone, A., Rudolph, K. E., Morello-Frosch, R., & Casey, J. A. (2021). Redlines and Greenspace: The Relationship between Historical Redlining and 2010 Greenspace across the United States. Environmental Health Perspectives , 129(1), 017006. DOI:10.1289/EHP7495. Hoffman, J. S., Shandas, V., & Pendleton, N. (2020). The Effects of Historical Housing Policies on Resident Exposure to Intra-Urban Heat: A Study of 108 US Urban Areas. Climate , 8(1), 12. DOI:10.3390/cli8010012. Goals of this group activity \u00b6 The primary objectives of this tutorial are: 1. To practice coding in CyVerse. 2. To analyze the relationship between HOLC grades and the presence of urban greenspace. 3. To understand how historic policies continue to affect the spatial distribution of environmental amenities. Part 1: Accessing and Visualizing Historic Redlining Data \u00b6 We will begin by accessing HOLC maps from the Mapping Inequality project and overlaying this data with modern geographic datasets to visualize the historical impact on contemporary urban landscapes. Data Acquisition \u00b6 Download HOLC map shapefiles from the University of Richmond\u2019s Mapping Inequality Project. Utilize satellite imagery and other geospatial data to map current greenspace using the normalized difference vegetation index (NDVI). Analysis Methodology \u00b6 Replicate the approach used by Nardone et al. to calculate NDVI values for each HOLC neighborhood, assessing greenspace as a health-promoting resource. Employ statistical methods such as propensity score matching to control for confounding variables and estimate the true impact of HOLC grades on urban greenspace. img { width: 100%; } details summary { color: black; background-color: white; } details[open] summary { color: black; } R libraries we use in this analysis if ( ! requireNamespace ( \"tidytext\" , quietly = TRUE )) { install.packages ( \"tidytext\" ) } library ( tidytext ) ## Warning: package 'tidytext' was built under R version 4.3.2 library ( sf ) ## Warning: package 'sf' was built under R version 4.3.2 ## Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE library ( ggplot2 ) ## Warning: package 'ggplot2' was built under R version 4.3.2 library ( ggthemes ) ## Warning: package 'ggthemes' was built under R version 4.3.2 library ( dplyr ) ## ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ## ## filter, lag ## The following objects are masked from 'package:base': ## ## intersect, setdiff, setequal, union library ( rstac ) ## Warning: package 'rstac' was built under R version 4.3.2 library ( gdalcubes ) ## Warning: package 'gdalcubes' was built under R version 4.3.2 library ( gdalUtils ) ## Please note that rgdal will be retired during October 2023, ## plan transition to sf/stars/terra functions using GDAL and PROJ ## at your earliest convenience. ## See https://r-spatial.org/r/2023/05/15/evolution4.html and https://github.com/r-spatial/evolution ## rgdal: version: 1.6-7, (SVN revision 1203) ## Geospatial Data Abstraction Library extensions to R successfully loaded ## Loaded GDAL runtime: GDAL 3.5.3, released 2022/10/21 ## Path to GDAL shared files: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/rgdal/gdal ## GDAL does not use iconv for recoding strings. ## GDAL binary built with GEOS: TRUE ## Loaded PROJ runtime: Rel. 9.1.0, September 1st, 2022, [PJ_VERSION: 910] ## Path to PROJ shared files: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/gdalcubes/proj ## PROJ CDN enabled: FALSE ## Linking to sp version:1.6-1 ## To mute warnings of possible GDAL/OSR exportToProj4() degradation, ## use options(\"rgdal_show_exportToProj4_warnings\"=\"none\") before loading sp or rgdal. ## ## Attaching package: 'gdalUtils' ## The following object is masked from 'package:sf': ## ## gdal_rasterize library ( gdalcubes ) library ( colorspace ) library ( terra ) ## Warning: package 'terra' was built under R version 4.3.2 ## terra 1.7.71 ## ## Attaching package: 'terra' ## The following object is masked from 'package:colorspace': ## ## RGB ## The following objects are masked from 'package:gdalcubes': ## ## animate, crop, size library ( tidyterra ) ## ## Attaching package: 'tidyterra' ## The following object is masked from 'package:stats': ## ## filter library ( basemapR ) library ( tidytext ) library ( ggwordcloud ) library ( osmextract ) ## Data (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright. ## Check the package website, https://docs.ropensci.org/osmextract/, for more details. library ( sf ) library ( ggplot2 ) library ( ggthemes ) library ( glue ) ## ## Attaching package: 'glue' ## The following object is masked from 'package:terra': ## ## trim library ( purrr ) FUNCTION: List cities where HOLC data are available # Function to get a list of unique cities and states from the redlining data get_city_state_list_from_redlining_data <- function () { # URL to the GeoJSON data url <- \"https://raw.githubusercontent.com/americanpanorama/mapping-inequality-census-crosswalk/main/MIv3Areas_2010TractCrosswalk.geojson\" # Read the GeoJSON file into an sf object redlining_data <- tryCatch ({ read_sf ( url ) }, error = function ( e ) { stop ( \"Error reading GeoJSON data: \" , e $ message ) }) # Check for the existence of 'city' and 'state' columns if ( ! all ( c ( \"city\" , \"state\" ) %in% names ( redlining_data ))) { stop ( \"The required columns 'city' and/or 'state' do not exist in the data.\" ) } # Extract a unique list of city and state pairs without the geometries city_state_df <- redlining_data %>% select ( city , state ) %>% st_set_geometry ( NULL ) %>% # Drop the geometry to avoid issues with invalid shapes distinct ( city , state ) %>% arrange ( state , city ) # Arrange the list alphabetically by state, then by city # Return the dataframe of unique city-state pairs return ( city_state_df ) } Stream list of available HOLC cities #Retrieve the list of cities and states city_state_list <- get_city_state_list_from_redlining_data () knitr :: kable ( city_state_list , format = \"markdown\" ) | city | state | |:---------------------------------|:------| | Birmingham | AL | | Mobile | AL | | Montgomery | AL | | Arkadelphia | AR | | Batesville | AR | | Camden | AR | | Conway | AR | | El Dorado | AR | | Fort Smith | AR | | Little Rock | AR | | Russellville | AR | | Texarkana | AR | | Phoenix | AZ | | Fresno | CA | | Los Angeles | CA | | Oakland | CA | | Sacramento | CA | | San Diego | CA | | San Francisco | CA | | San Jose | CA | | Stockton | CA | | Boulder | CO | | Colorado Springs | CO | | Denver | CO | | Fort Collins | CO | | Fort Morgan | CO | | Grand Junction | CO | | Greeley | CO | | Longmont | CO | | Pueblo | CO | | Bridgeport and Fairfield | CT | | Hartford | CT | | New Britain | CT | | New Haven | CT | | Stamford, Darien, and New Canaan | CT | | Waterbury | CT | | Crestview | FL | | Daytona Beach | FL | | DeFuniak Springs | FL | | DeLand | FL | | Jacksonville | FL | | Miami | FL | | New Smyrna | FL | | Orlando | FL | | Pensacola | FL | | St. Petersburg | FL | | Tampa | FL | | Atlanta | GA | | Augusta | GA | | Columbus | GA | | Macon | GA | | Savannah | GA | | Boone | IA | | Cedar Rapids | IA | | Council Bluffs | IA | | Davenport | IA | | Des Moines | IA | | Dubuque | IA | | Sioux City | IA | | Waterloo | IA | | Aurora | IL | | Chicago | IL | | Decatur | IL | | East St. Louis | IL | | Joliet | IL | | Peoria | IL | | Rockford | IL | | Springfield | IL | | Evansville | IN | | Fort Wayne | IN | | Indianapolis | IN | | Lake Co. Gary | IN | | Muncie | IN | | South Bend | IN | | Terre Haute | IN | | Atchison | KS | | Junction City | KS | | Topeka | KS | | Wichita | KS | | Covington | KY | | Lexington | KY | | Louisville | KY | | New Orleans | LA | | Shreveport | LA | | Arlington | MA | | Belmont | MA | | Boston | MA | | Braintree | MA | | Brockton | MA | | Brookline | MA | | Cambridge | MA | | Chelsea | MA | | Dedham | MA | | Everett | MA | | Fall River | MA | | Fitchburg | MA | | Haverhill | MA | | Holyoke Chicopee | MA | | Lawrence | MA | | Lexington | MA | | Lowell | MA | | Lynn | MA | | Malden | MA | | Medford | MA | | Melrose | MA | | Milton | MA | | Needham | MA | | New Bedford | MA | | Newton | MA | | Pittsfield | MA | | Quincy | MA | | Revere | MA | | Salem | MA | | Saugus | MA | | Somerville | MA | | Springfield | MA | | Waltham | MA | | Watertown | MA | | Winchester | MA | | Winthrop | MA | | Worcester | MA | | Baltimore | MD | | Augusta | ME | | Boothbay | ME | | Portland | ME | | Sanford | ME | | Waterville | ME | | Battle Creek | MI | | Bay City | MI | | Detroit | MI | | Flint | MI | | Grand Rapids | MI | | Jackson | MI | | Kalamazoo | MI | | Lansing | MI | | Muskegon | MI | | Pontiac | MI | | Saginaw | MI | | Austin | MN | | Duluth | MN | | Mankato | MN | | Minneapolis | MN | | Rochester | MN | | St. Cloud | MN | | St. Paul | MN | | Staples | MN | | Cape Girardeau | MO | | Carthage | MO | | Greater Kansas City | MO | | Joplin | MO | | Springfield | MO | | St. Joseph | MO | | St. Louis | MO | | Jackson | MS | | Asheville | NC | | Charlotte | NC | | Durham | NC | | Elizabeth City | NC | | Fayetteville | NC | | Goldsboro | NC | | Greensboro | NC | | Hendersonville | NC | | High Point | NC | | New Bern | NC | | Rocky Mount | NC | | Statesville | NC | | Winston-Salem | NC | | Fargo | ND | | Grand Forks | ND | | Minot | ND | | Williston | ND | | Lincoln | NE | | Omaha | NE | | Manchester | NH | | Atlantic City | NJ | | Bergen Co. | NJ | | Camden | NJ | | Essex Co. | NJ | | Hudson Co. | NJ | | Monmouth | NJ | | Passaic County | NJ | | Perth Amboy | NJ | | Trenton | NJ | | Union Co. | NJ | | Albany | NY | | Binghamton-Johnson City | NY | | Bronx | NY | | Brooklyn | NY | | Buffalo | NY | | Elmira | NY | | Jamestown | NY | | Lower Westchester Co. | NY | | Manhattan | NY | | Niagara Falls | NY | | Poughkeepsie | NY | | Queens | NY | | Rochester | NY | | Schenectady | NY | | Staten Island | NY | | Syracuse | NY | | Troy | NY | | Utica | NY | | Akron | OH | | Canton | OH | | Cleveland | OH | | Columbus | OH | | Dayton | OH | | Hamilton | OH | | Lima | OH | | Lorain | OH | | Portsmouth | OH | | Springfield | OH | | Toledo | OH | | Warren | OH | | Youngstown | OH | | Ada | OK | | Alva | OK | | Enid | OK | | Miami Ottawa County | OK | | Muskogee | OK | | Norman | OK | | Oklahoma City | OK | | South McAlester | OK | | Tulsa | OK | | Portland | OR | | Allentown | PA | | Altoona | PA | | Bethlehem | PA | | Chester | PA | | Erie | PA | | Harrisburg | PA | | Johnstown | PA | | Lancaster | PA | | McKeesport | PA | | New Castle | PA | | Philadelphia | PA | | Pittsburgh | PA | | Wilkes-Barre | PA | | York | PA | | Pawtucket & Central Falls | RI | | Providence | RI | | Woonsocket | RI | | Aiken | SC | | Charleston | SC | | Columbia | SC | | Greater Anderson | SC | | Greater Greenville | SC | | Orangeburg | SC | | Rock Hill | SC | | Spartanburg | SC | | Sumter | SC | | Aberdeen | SD | | Huron | SD | | Milbank | SD | | Mitchell | SD | | Rapid City | SD | | Sioux Falls | SD | | Vermillion | SD | | Watertown | SD | | Chattanooga | TN | | Elizabethton | TN | | Erwin | TN | | Greenville | TN | | Johnson City | TN | | Knoxville | TN | | Memphis | TN | | Nashville | TN | | Amarillo | TX | | Austin | TX | | Beaumont | TX | | Dallas | TX | | El Paso | TX | | Fort Worth | TX | | Galveston | TX | | Houston | TX | | Port Arthur | TX | | San Antonio | TX | | Waco | TX | | Wichita Falls | TX | | Ogden | UT | | Salt Lake City | UT | | Bristol | VA | | Danville | VA | | Harrisonburg | VA | | Lynchburg | VA | | Newport News | VA | | Norfolk | VA | | Petersburg | VA | | Phoebus | VA | | Richmond | VA | | Roanoke | VA | | Staunton | VA | | Bennington | VT | | Brattleboro | VT | | Burlington | VT | | Montpelier | VT | | Newport City | VT | | Poultney | VT | | Rutland | VT | | Springfield | VT | | St. Albans | VT | | St. Johnsbury | VT | | Windsor | VT | | Seattle | WA | | Spokane | WA | | Tacoma | WA | | Kenosha | WI | | Madison | WI | | Milwaukee Co. | WI | | Oshkosh | WI | | Racine | WI | | Charleston | WV | | Huntington | WV | | Wheeling | WV | FUNCTION: Stream HOLC data from a city # Function to load and filter redlining data by city load_city_redlining_data <- function ( city_name ) { # URL to the GeoJSON data url <- \"https://raw.githubusercontent.com/americanpanorama/mapping-inequality-census-crosswalk/main/MIv3Areas_2010TractCrosswalk.geojson\" # Read the GeoJSON file into an sf object redlining_data <- read_sf ( url ) # Filter the data for the specified city and non-empty grades city_redline <- redlining_data %>% filter ( city == city_name ) # Return the filtered data return ( city_redline ) } Stream HOLC data for Denver, CO # Load redlining data for Denver denver_redlining <- load_city_redlining_data ( \"Denver\" ) knitr :: kable ( head ( denver_redlining ), format = \"markdown\" ) | area_id | city | state | city_survey | cat | grade | label | res | com | ind | fill | GEOID10 | GISJOIN | calc_area | pct_tract | geometry | |--------:|:-------|:------|:------------|:-----|:------|:------|:-----|:------|:------|:---------|:------------|:---------------|-------------:|----------:|:-----------------------------| | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004104 | G0800310004104 | 1.525535e+01 | 0.00001 | MULTIPOLYGON (((-104.9125 3\u2026 | | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004201 | G0800310004201 | 3.987458e+05 | 0.20900 | MULTIPOLYGON (((-104.9246 3\u2026 | | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004304 | G0800310004304 | 1.554195e+05 | 0.05927 | MULTIPOLYGON (((-104.9125 3\u2026 | | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004202 | G0800310004202 | 1.117770e+06 | 0.57245 | MULTIPOLYGON (((-104.9125 3\u2026 | | 6529 | Denver | CO | TRUE | Best | A | A2 | TRUE | FALSE | FALSE | \\#76a865 | 08031004302 | G0800310004302 | 3.133415e+05 | 0.28381 | MULTIPOLYGON (((-104.928 39\u2026 | | 6529 | Denver | CO | TRUE | Best | A | A2 | TRUE | FALSE | FALSE | \\#76a865 | 08031004301 | G0800310004301 | 1.221218e+05 | 0.08622 | MULTIPOLYGON (((-104.9305 3\u2026 | FUNCTION: Get Points-of-Interest from city of interest get_places <- function ( polygon_layer , type = \"food\" ) { # Check if the input is an sf object if ( ! inherits ( polygon_layer , \"sf\" )) { stop ( \"The provided object is not an sf object.\" ) } # Create a bounding box from the input sf object bbox_here <- st_bbox ( polygon_layer ) |> st_as_sfc () if ( type == \"food\" ){ my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( shop IN ('supermarket', 'bodega', 'market', 'other_market', 'farm', 'garden_centre', 'doityourself', 'farm_supply', 'compost', 'mulch', 'fertilizer') OR amenity IN ('social_facility', 'market', 'restaurant', 'coffee') OR leisure = 'garden' OR landuse IN ('farm', 'farmland', 'row_crops', 'orchard_plantation', 'dairy_grazing') OR building IN ('brewery', 'winery', 'distillery') OR shop = 'greengrocer' OR amenity = 'marketplace' )\" title <- \"food\" } if ( type == \"processed_food\" ) { my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( amenity IN ('fast_food', 'cafe', 'pub') OR shop IN ('convenience', 'supermarket') OR shop = 'kiosk' )\" title <- \"Processed Food Locations\" } if ( type == \"natural_habitats\" ){ my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( boundary = 'protected_area' OR natural IN ('tree', 'wood') OR landuse = 'forest' OR leisure = 'park' )\" title <- \"Natural habitats or City owned trees\" } if ( type == \"roads\" ){ my_layer <- \"lines\" my_query <- \"SELECT * FROM lines WHERE ( highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary') )\" title <- \"Major roads\" } if ( type == \"rivers\" ){ my_layer <- \"lines\" my_query <- \"SELECT * FROM lines WHERE ( waterway IN ('river'))\" title <- \"Major rivers\" } if ( type == \"internet_access\" ) { my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( amenity IN ('library', 'cafe', 'community_centre', 'public_building') AND internet_access = 'yes' )\" title <- \"Internet Access Locations\" } if ( type == \"water_bodies\" ) { my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( natural IN ('water', 'lake', 'pond') OR water IN ('lake', 'pond') OR landuse = 'reservoir' )\" title <- \"Water Bodies\" } if ( type == \"government_buildings\" ) { my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( amenity IN ('townhall', 'courthouse', 'embassy', 'police', 'fire_station') OR building IN ('capitol', 'government') )\" title <- \"Government Buildings\" } # Use the bbox to get data with oe_get(), specifying the desired layer and a custom SQL query for fresh food places tryCatch ({ places <- oe_get ( place = bbox_here , layer = my_layer , # Adjusted layer; change as per actual data availability query = my_query , quiet = TRUE ) places <- st_make_valid ( places ) # Crop the data to the bounding box cropped_places <- st_crop ( places , bbox_here ) # Plotting the cropped fresh food places plot <- ggplot ( data = cropped_places ) + geom_sf ( fill = \"cornflowerblue\" , color = \"cornflowerblue\" ) + ggtitle ( title ) + theme_tufte () + theme ( legend.position = \"none\" , # Optionally hide the legend axis.text = element_blank (), # Remove axis text axis.title = element_blank (), # Remove axis titles axis.ticks = element_blank (), # Remove axis ticks plot.background = element_rect ( fill = \"white\" , color = NA ), # Set the plot background to white panel.background = element_rect ( fill = \"white\" , color = NA ), # Set the panel background to white panel.grid.major = element_blank (), # Remove major grid lines panel.grid.minor = element_blank (), ) # Save the plot as a PNG file png_filename <- paste0 ( title , \"_\" , Sys.Date (), \".png\" ) ggsave ( png_filename , plot , width = 10 , height = 8 , units = \"in\" ) # Return the cropped dataset return ( cropped_places ) }, error = function ( e ) { stop ( \"Failed to retrieve or plot data: \" , e $ message ) }) } FUNCTION: Plot POI over HOLC grades plot_city_redlining <- function ( redlining_data , filename = \"redlining_plot.png\" ) { # Fetch additional geographic data based on redlining data roads <- get_places ( redlining_data , type = \"roads\" ) rivers <- get_places ( redlining_data , type = \"rivers\" ) # Filter residential zones with valid grades and where city survey is TRUE residential_zones <- redlining_data %>% filter ( city_survey == TRUE & grade != \"\" ) # Colors for the grades colors <- c ( \"#76a865\" , \"#7cb5bd\" , \"#ffff00\" , \"#d9838d\" ) # Plot the data using ggplot2 plot <- ggplot () + geom_sf ( data = roads , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.5 , lwd = 1.1 ) + geom_sf ( data = residential_zones , aes ( fill = grade ), alpha = 0.5 ) + theme_tufte () + scale_fill_manual ( values = colors ) + labs ( fill = 'HOLC Categories' ) + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), panel.grid.major = element_blank (), panel.grid.minor = element_blank (), legend.position = \"right\" ) # Save the plot as a high-resolution PNG file ggsave ( filename , plot , width = 10 , height = 8 , units = \"in\" , dpi = 600 ) # Return the plot object if needed for further manipulation or checking return ( plot ) } Plot Denver Redlining denver_plot <- plot_city_redlining ( denver_redlining ) Stream amenities by category food <- get_places ( denver_redlining , type = \"food\" ) food_processed <- get_places ( denver_redlining , type = \"processed_food\" ) natural_habitats <- get_places ( denver_redlining , type = \"natural_habitats\" ) roads <- get_places ( denver_redlining , type = \"roads\" ) rivers <- get_places ( denver_redlining , type = \"rivers\" ) #water_bodies <- get_places(denver_redlining, type=\"water_bodies\") government_buildings <- get_places ( denver_redlining , type = \"government_buildings\" ) FUNCTION: Plot the HOLC grades individually split_plot <- function ( sf_data , roads , rivers ) { # Filter for grades A, B, C, and D sf_data_filtered <- sf_data %>% filter ( grade %in% c ( 'A' , 'B' , 'C' , 'D' )) # Define a color for each grade grade_colors <- c ( \"A\" = \"#76a865\" , \"B\" = \"#7cb5bd\" , \"C\" = \"#ffff00\" , \"D\" = \"#d9838d\" ) # Create the plot with panels for each grade plot <- ggplot ( data = sf_data_filtered ) + geom_sf ( data = roads , alpha = 0.1 , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.1 , lwd = 1.1 ) + geom_sf ( aes ( fill = grade )) + facet_wrap ( ~ grade , nrow = 1 ) + # Free scales for different zoom levels if needed scale_fill_manual ( values = grade_colors ) + theme_minimal () + labs ( fill = 'HOLC Grade' ) + theme_tufte () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"none\" , # Optionally hide the legend axis.text = element_blank (), # Remove axis text axis.title = element_blank (), # Remove axis titles axis.ticks = element_blank (), # Remove axis ticks panel.grid.major = element_blank (), # Remove major grid lines panel.grid.minor = element_blank ()) ggsave ( plot , filename = \"HOLC_grades_individually.png\" , width = 10 , height = 4 , units = \"in\" , dpi = 1200 ) return ( plot ) } Plot 4 HOLC grades individually plot_row <- split_plot ( denver_redlining , roads , rivers ) FUNCTION: Map an amenity over each grade individually process_and_plot_sf_layers <- function ( layer1 , layer2 , output_file = \"output_plot.png\" ) { # Make geometries valid layer1 <- st_make_valid ( layer1 ) layer2 <- st_make_valid ( layer2 ) # Optionally, simplify geometries to remove duplicate vertices layer1 <- st_simplify ( layer1 , preserveTopology = TRUE ) |> filter ( grade != \"\" ) # Prepare a list to store results results <- list () # Loop through each grade and perform operations for ( grade in c ( \"A\" , \"B\" , \"C\" , \"D\" )) { # Filter layer1 for current grade layer1_grade <- layer1 [ layer1 $ grade == grade , ] # Buffer the geometries of the current grade buffered_layer1_grade <- st_buffer ( layer1_grade , dist = 500 ) # Intersect with the second layer intersections <- st_intersects ( layer2 , buffered_layer1_grade , sparse = FALSE ) selected_polygons <- layer2 [ rowSums ( intersections ) > 0 , ] # Add a new column to store the grade information selected_polygons $ grade <- grade # Store the result results [[ grade ]] <- selected_polygons } # Combine all selected polygons from different grades into one sf object final_selected_polygons <- do.call ( rbind , results ) # Define colors for the grades grade_colors <- c ( \"A\" = \"grey\" , \"B\" = \"grey\" , \"C\" = \"grey\" , \"D\" = \"grey\" ) # Create the plot plot <- ggplot () + geom_sf ( data = roads , alpha = 0.05 , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.1 , lwd = 1.1 ) + geom_sf ( data = layer1 , fill = \"grey\" , color = \"grey\" , size = 0.1 ) + facet_wrap ( ~ grade , nrow = 1 ) + geom_sf ( data = final_selected_polygons , fill = \"green\" , color = \"green\" , size = 0.1 ) + facet_wrap ( ~ grade , nrow = 1 ) + #scale_fill_manual(values = grade_colors) + #scale_color_manual(values = grade_colors) + theme_minimal () + labs ( fill = 'HOLC Grade' ) + theme_tufte () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"none\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot as a high-resolution PNG file ggsave ( output_file , plot , width = 10 , height = 4 , units = \"in\" , dpi = 1200 ) # Return the plot for optional further use return ( list ( plot = plot , sf = final_selected_polygons )) } FUNCTION: Create word cloud per grade create_wordclouds_by_grade <- function ( sf_object , output_file = \"food_word_cloud_per_grade.png\" , title = \"Healthy food place names word cloud\" , max_size = 25 , col_select = \"name\" ) { # Extract relevant data and prepare text data text_data <- sf_object %>% select ( grade , col_select ) %>% filter ( ! is.na ( col_select )) %>% unnest_tokens ( output = \"word\" , input = col_select , token = \"words\" ) %>% count ( grade , word , sort = TRUE ) %>% ungroup () %>% filter ( n () > 1 ) # Filter to remove overly common or single-occurrence words # Ensure there are no NA values in the 'word' column text_data <- text_data %>% filter ( ! is.na ( word )) # Handle cases where text_data might be empty if ( nrow ( text_data ) == 0 ) { stop ( \"No data available for creating word clouds.\" ) } # Create a word cloud using ggplot2 and ggwordcloud p <- ggplot ( ) + geom_text_wordcloud_area ( data = text_data , aes ( label = word , size = n ), rm_outside = TRUE ) + scale_size_area ( max_size = max_size ) + facet_wrap ( ~ grade , nrow = 1 ) + scale_color_gradient ( low = \"darkred\" , high = \"red\" ) + theme_minimal () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), panel.spacing = unit ( 0.5 , \"lines\" ), plot.title = element_text ( size = 16 , face = \"bold\" ), legend.position = \"none\" ) + labs ( title = title ) # Attempt to save the plot and handle any errors tryCatch ({ ggsave ( output_file , p , width = 10 , height = 4 , units = \"in\" , dpi = 600 ) }, error = function ( e ) { cat ( \"Error in saving the plot: \" , e $ message , \"\\n\" ) }) return ( p ) } Map food over each grade individually layer1 <- denver_redlining layer2 <- food food_match <- process_and_plot_sf_layers ( layer1 , layer2 , \"food_match.png\" ) WORD CLOUD: Names of places with fresh food food_word_cloud <- create_wordclouds_by_grade ( food_match $ sf , output_file = \"food_word_cloud_per_grade.png\" ) Warning: Using an external vector in selections was deprecated in tidyselect 1.1.0. \u2139 Please use `all_of()` or `any_of()` instead. # Was: data %>% select(col_select) # Now: data %>% select(all_of(col_select)) See . Warning in wordcloud_boxes(data_points = points_valid_first, boxes = boxes, : Some words could not fit on page. They have been removed. Map processed food over each grade individually layer1 <- denver_redlining layer2 <- food_processed processed_food_match <- process_and_plot_sf_layers ( layer1 , layer2 , \"processed_food_match.png\" ) WORD CLOUD: Names of places with processed food processed_food_cloud <- create_wordclouds_by_grade ( processed_food_match $ sf , output_file = \"processed_food_word_cloud_per_grade.png\" , title = \"Processed food place names where larger text is more frequent\" , max_size = 17 ) Part 2: Integrating Environmental Data \u00b6 Data Processing \u00b6 Use satellite data from 2010 to analyze greenspace using NDVI, an index that measures the quantity of vegetation in an area. Apply methods to adjust for potential confounders as described in the study, ensuring that comparisons of greenspace across HOLC grades are valid and not biased by historical or socio-demographic factors. Map natural habitats over each grade individually layer1 <- denver_redlining layer2 <- natural_habitats natural_habitats_match <- process_and_plot_sf_layers ( layer1 , layer2 , \"natural_habitats_match.png\" ) print ( natural_habitats_match $ plot ) ![](worksheet_redlining_files/figure-gfm/unnamed-chunk-18-1.png) WORD CLOUD: Name of natural habitat area natural_habitats_cloud <- create_wordclouds_by_grade ( natural_habitats_match $ sf , output_file = \"natural_habitats_word_cloud_per_grade.png\" , title = \"Natural habitats place names where larger text is more frequent\" , max_size = 35 ) FUNCTION: Stream NDVI data polygon_layer <- denver_redlining # Function to process satellite data based on an SF polygon's extent process_satellite_data <- function ( polygon_layer , start_date , end_date , assets , fps = 1 , output_file = \"anim.gif\" ) { # Record start time start_time <- Sys.time () # Calculate the bbox from the polygon layer bbox <- st_bbox ( polygon_layer ) s = stac ( \"https://earth-search.aws.element84.com/v0\" ) # Use stacR to search for Sentinel-2 images within the bbox and date range items = s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( bbox [ \"xmin\" ], bbox [ \"ymin\" ], bbox [ \"xmax\" ], bbox [ \"ymax\" ]), datetime = paste ( start_date , end_date , sep = \"/\" ), limit = 500 ) %>% post_request () # Define mask for Sentinel-2 image quality #S2.mask <- image_mask(\"SCL\", values = c(3, 8, 9)) # Create a collection of images filtering by cloud cover col <- stac_image_collection ( items $ features , asset_names = assets , property_filter = function ( x ) { x [[ \"eo:cloud_cover\" ]] < 30 }) # Define a view for processing the data v <- cube_view ( srs = \"EPSG:4326\" , extent = list ( t0 = start_date , t1 = end_date , left = bbox [ \"xmin\" ], right = bbox [ \"xmax\" ], top = bbox [ \"ymax\" ], bottom = bbox [ \"ymin\" ]), dx = 0.001 , dy = 0.001 , dt = \"P1M\" , aggregation = \"median\" , resampling = \"bilinear\" ) # Calculate NDVI and create an animation ndvi_col <- function ( n ) { rev ( sequential_hcl ( n , \"Green-Yellow\" )) } #raster_cube(col, v, mask = S2.mask) %>% raster_cube ( col , v ) %>% select_bands ( c ( \"B04\" , \"B08\" )) %>% apply_pixel ( \"(B08-B04)/(B08+B04)\" , \"NDVI\" ) %>% gdalcubes :: animate ( col = ndvi_col , zlim = c ( -0.2 , 1 ), key.pos = 1 , save_as = output_file , fps = fps ) # Calculate processing time end_time <- Sys.time () processing_time <- difftime ( end_time , start_time ) # Return processing time return ( processing_time ) } Stream NDVI data: animation processing_time <- process_satellite_data ( denver_redlining , \"2022-05-31\" , \"2023-05-31\" , c ( \"B04\" , \"B08\" )) FUNCTION: Stream year average NDVI yearly_average_ndvi <- function ( polygon_layer , output_file = \"ndvi.png\" , dx = 0.01 , dy = 0.01 ) { # Record start time start_time <- Sys.time () # Calculate the bbox from the polygon layer bbox <- st_bbox ( polygon_layer ) s = stac ( \"https://earth-search.aws.element84.com/v0\" ) # Search for Sentinel-2 images within the bbox for June items <- s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( bbox [ \"xmin\" ], bbox [ \"ymin\" ], bbox [ \"xmax\" ], bbox [ \"ymax\" ]), datetime = \"2023-01-01/2023-12-31\" , limit = 500 ) %>% post_request () # Create a collection of images filtering by cloud cover col <- stac_image_collection ( items $ features , asset_names = c ( \"B04\" , \"B08\" ), property_filter = function ( x ) { x [[ \"eo:cloud_cover\" ]] < 80 }) # Define a view for processing the data specifically for June v <- cube_view ( srs = \"EPSG:4326\" , extent = list ( t0 = \"2023-01-01\" , t1 = \"2023-12-31\" , left = bbox [ \"xmin\" ], right = bbox [ \"xmax\" ], top = bbox [ \"ymax\" ], bottom = bbox [ \"ymin\" ]), dx = dx , dy = dy , dt = \"P1Y\" , aggregation = \"median\" , resampling = \"bilinear\" ) # Process NDVI ndvi_rast <- raster_cube ( col , v ) %>% select_bands ( c ( \"B04\" , \"B08\" )) %>% apply_pixel ( \"(B08-B04)/(B08+B04)\" , \"NDVI\" ) %>% write_tif () |> terra :: rast () # Convert terra Raster to ggplot using tidyterra ndvi_plot <- ggplot () + geom_spatraster ( data = ndvi_rast , aes ( fill = NDVI )) + scale_fill_viridis_c ( option = \"viridis\" , direction = -1 , name = \"NDVI\" ) + labs ( title = \"NDVI mean for 2023\" ) + theme_minimal () + coord_sf () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"right\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot as a high-resolution PNG file ggsave ( output_file , ndvi_plot , width = 10 , height = 8 , dpi = 600 ) # Calculate processing time end_time <- Sys.time () processing_time <- difftime ( end_time , start_time ) # Return the plot and processing time return ( list ( plot = ndvi_plot , processing_time = processing_time , raster = ndvi_rast )) } Stream NDVI: high resolution ndvi_background <- yearly_average_ndvi ( denver_redlining , dx = 0.0001 , dy = 0.0001 ) FUNCTION: Map NDVI per HOLC grade individually create_mask_and_plot <- function ( redlining_sf , background_raster = ndvi $ raster , roads = NULL , rivers = NULL ){ start_time <- Sys.time () # Start timing # Validate and prepare the redlining data redlining_sf <- redlining_sf %>% filter ( grade != \"\" ) %>% st_make_valid () bbox <- st_bbox ( redlining_sf ) # Get original bounding box expanded_bbox <- expand_bbox ( bbox , 6000 , 1000 ) # expanded_bbox_poly <- st_as_sfc ( expanded_bbox , crs = st_crs ( redlining_sf )) %>% st_make_valid () # Initialize an empty list to store masks masks <- list () # Iterate over each grade to create masks unique_grades <- unique ( redlining_sf $ grade ) for ( grade in unique_grades ) { # Filter polygons by grade grade_polygons <- redlining_sf [ redlining_sf $ grade == grade , ] # Create an \"inverted\" mask by subtracting these polygons from the background mask <- st_difference ( expanded_bbox_poly , st_union ( grade_polygons )) # Store the mask in the list with the grade as the name masks [[ grade ]] <- st_sf ( geometry = mask , grade = grade ) } # Combine all masks into a single sf object mask_sf <- do.call ( rbind , masks ) # Normalize the grades so that C.2 becomes C, but correctly handle other grades mask_sf $ grade <- ifelse ( mask_sf $ grade == \"C.2\" , \"C\" , mask_sf $ grade ) # Prepare the plot plot <- ggplot () + geom_spatraster ( data = background_raster , aes ( fill = NDVI )) + scale_fill_viridis_c ( name = \"NDVI\" , option = \"viridis\" , direction = -1 ) + geom_sf ( data = mask_sf , aes ( color = grade ), fill = \"white\" , size = 0.1 , show.legend = FALSE ) + scale_color_manual ( values = c ( \"A\" = \"white\" , \"B\" = \"white\" , \"C\" = \"white\" , \"D\" = \"white\" ), name = \"Grade\" ) + facet_wrap ( ~ grade , nrow = 1 ) + geom_sf ( data = roads , alpha = 1 , lwd = 0.1 , color = \"white\" ) + geom_sf ( data = rivers , color = \"white\" , alpha = 0.5 , lwd = 1.1 ) + labs ( title = \"NDVI: Normalized Difference Vegetation Index\" ) + theme_minimal () + coord_sf ( xlim = c ( bbox [ \"xmin\" ], bbox [ \"xmax\" ]), ylim = c ( bbox [ \"ymin\" ], bbox [ \"ymax\" ]), expand = FALSE ) + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"bottom\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot ggsave ( \"redlining_mask_ndvi.png\" , plot , width = 10 , height = 4 , dpi = 600 ) end_time <- Sys.time () # End timing runtime <- end_time - start_time # Return the plot and runtime return ( list ( plot = plot , runtime = runtime , mask_sf = mask_sf )) } Stream NDVI: low resolution ndvi_background_low <- yearly_average_ndvi ( denver_redlining ) Map low resolution NDVI per HOLC grade ndvi <- create_mask_and_plot ( denver_redlining , background_raster = ndvi_background_low $ raster , roads = roads , rivers = rivers ) FUNCTION: Map Denver City provided data per HOLC grade process_city_inventory_data <- function ( address , inner_file , polygon_layer , output_filename , variable_label = 'Tree Density' ) { # Download and read the shapefile full_path <- glue ( \"/vsizip/vsicurl/{address}/{inner_file}\" ) shape_data <- st_read ( full_path , quiet = TRUE ) |> st_as_sf () # Process the shape data with the provided polygon layer processed_data <- process_and_plot_sf_layers ( polygon_layer , shape_data , paste0 ( output_filename , \".png\" )) # Extract trees from the processed data trees <- processed_data $ sf denver_redlining_residential <- polygon_layer |> filter ( grade != \"\" ) # Generate the density plot plot <- ggplot () + geom_sf ( data = roads , alpha = 0.05 , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.1 , lwd = 1.1 ) + geom_sf ( data = denver_redlining_residential , fill = \"grey\" , color = \"grey\" , size = 0.1 ) + facet_wrap ( ~ grade , nrow = 1 ) + stat_density_2d ( data = trees , mapping = aes ( x = map_dbl ( geometry , ~ . [ 1 ]), y = map_dbl ( geometry , ~ . [ 2 ]), fill = stat ( density )), geom = 'tile' , contour = FALSE , alpha = 0.9 ) + scale_fill_gradientn ( colors = c ( \"transparent\" , \"white\" , \"limegreen\" ), values = scales :: rescale ( c ( 0 , 0.1 , 1 )), # Adjust these based on your density range guide = \"colourbar\" ) + theme_minimal () + labs ( fill = variable_label ) + theme_tufte () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"bottom\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot ggsave ( paste0 ( output_filename , \"_density_plot.png\" ), plot , width = 10 , height = 4 , units = \"in\" , dpi = 600 ) # Return the plot and the tree layer return ( list ( plot = plot , layer = trees )) } Map tree inventory per HOLC grade result <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/tree_inventory/shape/tree_inventory.zip\" , \"tree_inventory.shp\" , denver_redlining , \"Denver_tree_inventory_2023\" ) Warning: `stat(density)` was deprecated in ggplot2 3.4.0. \u2139 Please use `after_stat(density)` instead. Map traffic accidents per HOLC grade result <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/traffic_accidents/shape/traffic_accidents.zip\" , \"traffic_accidents.shp\" , denver_redlining , \"Denver_traffic_accidents\" , variable_label = 'Traffic accidents density' ) Map stream sampling effort per HOLC grade instream_sampling_sites <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/instream_sampling_sites/shape/instream_sampling_sites.zip\" , \"instream_sampling_sites.shp\" , denver_redlining , \"instream_sampling_sites\" , variable_label = 'Instream sampling sites density' ) Map soil sampling effort per HOLC grade soil_samples <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/soil_samples/shape/soil_samples.zip\" , \"soil_samples.shp\" , denver_redlining , \"Soil samples\" , variable_label = 'soil samples density' ) Map public art density per HOLC grade public_art <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/public_art/shape/public_art.zip\" , \"public_art.shp\" , denver_redlining , \"Public art \" , variable_label = 'Public art density' ) Map liquor licenses density per HOLC grade liquor_licenses <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/liquor_licenses/shape/liquor_licenses.zip\" , \"liquor_licenses.shp\" , denver_redlining , \"liquor licenses \" , variable_label = 'liquor licenses density' ) Map crime density per HOLC grade Crime <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/crime/shape/crime.zip\" , \"crime.shp\" , denver_redlining , \"crime\" , variable_label = 'Crime density' ) WORD CLOUD: Types of crimes crime_cloud <- create_wordclouds_by_grade ( Crime $ layer , output_file = \"Crime_word_cloud_per_grade.png\" , title = \"Crime type where larger text is more frequent\" , max_size = 25 , col_select = \"OFFENSE_TY\" ) Warning: Using an external vector in selections was deprecated in tidyselect 1.1.0. \u2139 Please use `all_of()` or `any_of()` instead. # Was: data %>% select(col_select) # Now: data %>% select(all_of(col_select)) See . Map police shooting density per HOLC grade Denver_police_shootings <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/denver_police_officer_involved_shootings/shape/denver_police_officer_involved_shootings.zip\" , \"denver_police_officer_involved_shootings.shp\" , denver_redlining , \"Police shootings\" , variable_label = 'Police shootings density' ) Not enough data for density across all 4 WORD CLOUD: Police involved shootings Denver_police_shootings_cloud <- create_wordclouds_by_grade ( Denver_police_shootings $ layer , output_file = \"police_shootings_word_cloud_per_grade.png\" , title = \"police involved shooting per crime type where larger text is more frequent\" , max_size = 35 , col_select = \"SHOOT_ACTI\" ) Part 3: Comparative Analysis and Visualization \u00b6 Statistical Analysis \u00b6 Conduct a detailed statistical analysis to compare greenspace across different HOLC grades, using techniques like Targeted Maximum Likelihood Estimation (TMLE) to assess the association between historical redlining and current greenspace levels. Visualize the disparities in greenspace distribution using GIS tools, highlighting how redlining has shaped urban ecological landscapes. Conclusion \u00b6 This tutorial provides tools and methodologies to explore the lingering effects of historic redlining on urban greenspace, offering insights into the intersection of urban planning, environmental justice, and public health. References \u00b6 Nardone, A., Rudolph, K. E., Morello-Frosch, R., & Casey, J. A. (2021). Redlines and Greenspace: The Relationship between Historical Redlining and 2010 Greenspace across the United States. Environmental Health Perspectives , 129(1), 017006. DOI:10.1289/EHP7495. Available online","title":"Explore an example (teacher edition)"},{"location":"worksheets/worksheet_redlining/#redlining","text":"","title":"Redlining"},{"location":"worksheets/worksheet_redlining/#exploring-the-impact-of-historical-redlining-on-urban-greenspace-a-collaborative-examination-of-maps-justice-and-resilience","text":"","title":"Exploring the Impact of Historical Redlining on Urban Greenspace: A Collaborative Examination of Maps, Justice, and Resilience"},{"location":"worksheets/worksheet_redlining/#introduction","text":"This group exploration delves into the long-term impacts of historical redlining on urban greenspace, emphasizing the powerful role of maps in shaping environmental and social landscapes. By drawing on the research by Nardone et al. (2021), you will collaboratively investigate how discriminatory practices encoded in maps have led to persistent disparities in urban settings. This exploration aims to uncover the resilience of communities in adapting to these entrenched injustices and to foster a deeper understanding of how mapping can serve both as a tool of exclusion and as a means for promoting social equity. )","title":"Introduction"},{"location":"worksheets/worksheet_redlining/#understanding-redlining-as-a-systemic-disturbance","text":"Redlining originated in the 1930s as a discriminatory practice where the Home Owners\u2019 Loan Corporation (HOLC) systematically denied mortgages or offered unfavorable terms based on racial and ethnic compositions. This methodical exclusion, executed through maps that color-coded \u201crisky\u201d investment areas in red, marked minority-populated areas, denying them crucial investment and development opportunities and initiating a profound and lasting disturbance in the urban fabric. Maps serve as powerful tools beyond navigation; they communicate and enforce control. By defining neighborhood boundaries through redlining, HOLC maps not only mirrored societal biases but also perpetuated and embedded them into the urban landscape. This manipulation of geographic data set a trajectory that limited economic growth, dictated the allocation of services, and influenced the development or deterioration of community infrastructure. Figure 1: 1938 Map of Atlanta uses colors as grades for neighborhoods. The red swaths identify each area with large African-American populations that were deemed \u201cless safe.\u201d ArcGIS Story Map Explore the Story Map: Click on the image above to explore the interactive story map about [subject of the story map].","title":"Understanding Redlining as a Systemic Disturbance"},{"location":"worksheets/worksheet_redlining/#resilience-and-adaptation-in-urban-environments","text":"The legacy of redlining presents both a challenge and an opportunity for resilience and adaptation. Economically and socially, redlining entrenched cycles of poverty and racial segregation, creating a resilient wealth gap that has been difficult to dismantle. Environmentally, the neighborhoods targeted by redlining continue to face significant challenges\u2014they generally feature less greenspace, suffer from higher pollution levels, and are more vulnerable to the impacts of climate change. These factors compound the health and wellness challenges faced by residents. Despite these adversities, urban communities have continually demonstrated remarkable resilience. Adaptation strategies, such as community-led green initiatives, urban agriculture, and grassroots activism, have emerged as responses to these systemic disturbances. By enhancing green infrastructure and advocating for equitable environmental policies, these communities strive to increase their resilience against both historical inequities and environmental challenges. Watch the video Video Title: Exploring the Impacts of Historical Redlining on Urban Development Description: Click on the image above to watch a video that delves into the consequences of historical redlining and its ongoing impact on urban environments. This educational piece offers insights into how such discriminatory practices have shaped cities and what can be learned from them. The following group exercise will not only uncover the impact of redlining on urban greenspace but also highlight the adaptive strategies developed in response to this enduring disturbance. Through mapping and analysis, we aim to illustrate the powerful role that geographic data can play in understanding and fostering urban resilience and social equity.","title":"Resilience and Adaptation in Urban Environments"},{"location":"worksheets/worksheet_redlining/#references","text":"Nardone, A., Rudolph, K. E., Morello-Frosch, R., & Casey, J. A. (2021). Redlines and Greenspace: The Relationship between Historical Redlining and 2010 Greenspace across the United States. Environmental Health Perspectives , 129(1), 017006. DOI:10.1289/EHP7495. Hoffman, J. S., Shandas, V., & Pendleton, N. (2020). The Effects of Historical Housing Policies on Resident Exposure to Intra-Urban Heat: A Study of 108 US Urban Areas. Climate , 8(1), 12. DOI:10.3390/cli8010012.","title":"References"},{"location":"worksheets/worksheet_redlining/#goals-of-this-group-activity","text":"The primary objectives of this tutorial are: 1. To practice coding in CyVerse. 2. To analyze the relationship between HOLC grades and the presence of urban greenspace. 3. To understand how historic policies continue to affect the spatial distribution of environmental amenities.","title":"Goals of this group activity"},{"location":"worksheets/worksheet_redlining/#part-1-accessing-and-visualizing-historic-redlining-data","text":"We will begin by accessing HOLC maps from the Mapping Inequality project and overlaying this data with modern geographic datasets to visualize the historical impact on contemporary urban landscapes.","title":"Part 1: Accessing and Visualizing Historic Redlining Data"},{"location":"worksheets/worksheet_redlining/#data-acquisition","text":"Download HOLC map shapefiles from the University of Richmond\u2019s Mapping Inequality Project. Utilize satellite imagery and other geospatial data to map current greenspace using the normalized difference vegetation index (NDVI).","title":"Data Acquisition"},{"location":"worksheets/worksheet_redlining/#analysis-methodology","text":"Replicate the approach used by Nardone et al. to calculate NDVI values for each HOLC neighborhood, assessing greenspace as a health-promoting resource. Employ statistical methods such as propensity score matching to control for confounding variables and estimate the true impact of HOLC grades on urban greenspace. img { width: 100%; } details summary { color: black; background-color: white; } details[open] summary { color: black; } R libraries we use in this analysis if ( ! requireNamespace ( \"tidytext\" , quietly = TRUE )) { install.packages ( \"tidytext\" ) } library ( tidytext ) ## Warning: package 'tidytext' was built under R version 4.3.2 library ( sf ) ## Warning: package 'sf' was built under R version 4.3.2 ## Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE library ( ggplot2 ) ## Warning: package 'ggplot2' was built under R version 4.3.2 library ( ggthemes ) ## Warning: package 'ggthemes' was built under R version 4.3.2 library ( dplyr ) ## ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ## ## filter, lag ## The following objects are masked from 'package:base': ## ## intersect, setdiff, setequal, union library ( rstac ) ## Warning: package 'rstac' was built under R version 4.3.2 library ( gdalcubes ) ## Warning: package 'gdalcubes' was built under R version 4.3.2 library ( gdalUtils ) ## Please note that rgdal will be retired during October 2023, ## plan transition to sf/stars/terra functions using GDAL and PROJ ## at your earliest convenience. ## See https://r-spatial.org/r/2023/05/15/evolution4.html and https://github.com/r-spatial/evolution ## rgdal: version: 1.6-7, (SVN revision 1203) ## Geospatial Data Abstraction Library extensions to R successfully loaded ## Loaded GDAL runtime: GDAL 3.5.3, released 2022/10/21 ## Path to GDAL shared files: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/rgdal/gdal ## GDAL does not use iconv for recoding strings. ## GDAL binary built with GEOS: TRUE ## Loaded PROJ runtime: Rel. 9.1.0, September 1st, 2022, [PJ_VERSION: 910] ## Path to PROJ shared files: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/gdalcubes/proj ## PROJ CDN enabled: FALSE ## Linking to sp version:1.6-1 ## To mute warnings of possible GDAL/OSR exportToProj4() degradation, ## use options(\"rgdal_show_exportToProj4_warnings\"=\"none\") before loading sp or rgdal. ## ## Attaching package: 'gdalUtils' ## The following object is masked from 'package:sf': ## ## gdal_rasterize library ( gdalcubes ) library ( colorspace ) library ( terra ) ## Warning: package 'terra' was built under R version 4.3.2 ## terra 1.7.71 ## ## Attaching package: 'terra' ## The following object is masked from 'package:colorspace': ## ## RGB ## The following objects are masked from 'package:gdalcubes': ## ## animate, crop, size library ( tidyterra ) ## ## Attaching package: 'tidyterra' ## The following object is masked from 'package:stats': ## ## filter library ( basemapR ) library ( tidytext ) library ( ggwordcloud ) library ( osmextract ) ## Data (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright. ## Check the package website, https://docs.ropensci.org/osmextract/, for more details. library ( sf ) library ( ggplot2 ) library ( ggthemes ) library ( glue ) ## ## Attaching package: 'glue' ## The following object is masked from 'package:terra': ## ## trim library ( purrr ) FUNCTION: List cities where HOLC data are available # Function to get a list of unique cities and states from the redlining data get_city_state_list_from_redlining_data <- function () { # URL to the GeoJSON data url <- \"https://raw.githubusercontent.com/americanpanorama/mapping-inequality-census-crosswalk/main/MIv3Areas_2010TractCrosswalk.geojson\" # Read the GeoJSON file into an sf object redlining_data <- tryCatch ({ read_sf ( url ) }, error = function ( e ) { stop ( \"Error reading GeoJSON data: \" , e $ message ) }) # Check for the existence of 'city' and 'state' columns if ( ! all ( c ( \"city\" , \"state\" ) %in% names ( redlining_data ))) { stop ( \"The required columns 'city' and/or 'state' do not exist in the data.\" ) } # Extract a unique list of city and state pairs without the geometries city_state_df <- redlining_data %>% select ( city , state ) %>% st_set_geometry ( NULL ) %>% # Drop the geometry to avoid issues with invalid shapes distinct ( city , state ) %>% arrange ( state , city ) # Arrange the list alphabetically by state, then by city # Return the dataframe of unique city-state pairs return ( city_state_df ) } Stream list of available HOLC cities #Retrieve the list of cities and states city_state_list <- get_city_state_list_from_redlining_data () knitr :: kable ( city_state_list , format = \"markdown\" ) | city | state | |:---------------------------------|:------| | Birmingham | AL | | Mobile | AL | | Montgomery | AL | | Arkadelphia | AR | | Batesville | AR | | Camden | AR | | Conway | AR | | El Dorado | AR | | Fort Smith | AR | | Little Rock | AR | | Russellville | AR | | Texarkana | AR | | Phoenix | AZ | | Fresno | CA | | Los Angeles | CA | | Oakland | CA | | Sacramento | CA | | San Diego | CA | | San Francisco | CA | | San Jose | CA | | Stockton | CA | | Boulder | CO | | Colorado Springs | CO | | Denver | CO | | Fort Collins | CO | | Fort Morgan | CO | | Grand Junction | CO | | Greeley | CO | | Longmont | CO | | Pueblo | CO | | Bridgeport and Fairfield | CT | | Hartford | CT | | New Britain | CT | | New Haven | CT | | Stamford, Darien, and New Canaan | CT | | Waterbury | CT | | Crestview | FL | | Daytona Beach | FL | | DeFuniak Springs | FL | | DeLand | FL | | Jacksonville | FL | | Miami | FL | | New Smyrna | FL | | Orlando | FL | | Pensacola | FL | | St. Petersburg | FL | | Tampa | FL | | Atlanta | GA | | Augusta | GA | | Columbus | GA | | Macon | GA | | Savannah | GA | | Boone | IA | | Cedar Rapids | IA | | Council Bluffs | IA | | Davenport | IA | | Des Moines | IA | | Dubuque | IA | | Sioux City | IA | | Waterloo | IA | | Aurora | IL | | Chicago | IL | | Decatur | IL | | East St. Louis | IL | | Joliet | IL | | Peoria | IL | | Rockford | IL | | Springfield | IL | | Evansville | IN | | Fort Wayne | IN | | Indianapolis | IN | | Lake Co. Gary | IN | | Muncie | IN | | South Bend | IN | | Terre Haute | IN | | Atchison | KS | | Junction City | KS | | Topeka | KS | | Wichita | KS | | Covington | KY | | Lexington | KY | | Louisville | KY | | New Orleans | LA | | Shreveport | LA | | Arlington | MA | | Belmont | MA | | Boston | MA | | Braintree | MA | | Brockton | MA | | Brookline | MA | | Cambridge | MA | | Chelsea | MA | | Dedham | MA | | Everett | MA | | Fall River | MA | | Fitchburg | MA | | Haverhill | MA | | Holyoke Chicopee | MA | | Lawrence | MA | | Lexington | MA | | Lowell | MA | | Lynn | MA | | Malden | MA | | Medford | MA | | Melrose | MA | | Milton | MA | | Needham | MA | | New Bedford | MA | | Newton | MA | | Pittsfield | MA | | Quincy | MA | | Revere | MA | | Salem | MA | | Saugus | MA | | Somerville | MA | | Springfield | MA | | Waltham | MA | | Watertown | MA | | Winchester | MA | | Winthrop | MA | | Worcester | MA | | Baltimore | MD | | Augusta | ME | | Boothbay | ME | | Portland | ME | | Sanford | ME | | Waterville | ME | | Battle Creek | MI | | Bay City | MI | | Detroit | MI | | Flint | MI | | Grand Rapids | MI | | Jackson | MI | | Kalamazoo | MI | | Lansing | MI | | Muskegon | MI | | Pontiac | MI | | Saginaw | MI | | Austin | MN | | Duluth | MN | | Mankato | MN | | Minneapolis | MN | | Rochester | MN | | St. Cloud | MN | | St. Paul | MN | | Staples | MN | | Cape Girardeau | MO | | Carthage | MO | | Greater Kansas City | MO | | Joplin | MO | | Springfield | MO | | St. Joseph | MO | | St. Louis | MO | | Jackson | MS | | Asheville | NC | | Charlotte | NC | | Durham | NC | | Elizabeth City | NC | | Fayetteville | NC | | Goldsboro | NC | | Greensboro | NC | | Hendersonville | NC | | High Point | NC | | New Bern | NC | | Rocky Mount | NC | | Statesville | NC | | Winston-Salem | NC | | Fargo | ND | | Grand Forks | ND | | Minot | ND | | Williston | ND | | Lincoln | NE | | Omaha | NE | | Manchester | NH | | Atlantic City | NJ | | Bergen Co. | NJ | | Camden | NJ | | Essex Co. | NJ | | Hudson Co. | NJ | | Monmouth | NJ | | Passaic County | NJ | | Perth Amboy | NJ | | Trenton | NJ | | Union Co. | NJ | | Albany | NY | | Binghamton-Johnson City | NY | | Bronx | NY | | Brooklyn | NY | | Buffalo | NY | | Elmira | NY | | Jamestown | NY | | Lower Westchester Co. | NY | | Manhattan | NY | | Niagara Falls | NY | | Poughkeepsie | NY | | Queens | NY | | Rochester | NY | | Schenectady | NY | | Staten Island | NY | | Syracuse | NY | | Troy | NY | | Utica | NY | | Akron | OH | | Canton | OH | | Cleveland | OH | | Columbus | OH | | Dayton | OH | | Hamilton | OH | | Lima | OH | | Lorain | OH | | Portsmouth | OH | | Springfield | OH | | Toledo | OH | | Warren | OH | | Youngstown | OH | | Ada | OK | | Alva | OK | | Enid | OK | | Miami Ottawa County | OK | | Muskogee | OK | | Norman | OK | | Oklahoma City | OK | | South McAlester | OK | | Tulsa | OK | | Portland | OR | | Allentown | PA | | Altoona | PA | | Bethlehem | PA | | Chester | PA | | Erie | PA | | Harrisburg | PA | | Johnstown | PA | | Lancaster | PA | | McKeesport | PA | | New Castle | PA | | Philadelphia | PA | | Pittsburgh | PA | | Wilkes-Barre | PA | | York | PA | | Pawtucket & Central Falls | RI | | Providence | RI | | Woonsocket | RI | | Aiken | SC | | Charleston | SC | | Columbia | SC | | Greater Anderson | SC | | Greater Greenville | SC | | Orangeburg | SC | | Rock Hill | SC | | Spartanburg | SC | | Sumter | SC | | Aberdeen | SD | | Huron | SD | | Milbank | SD | | Mitchell | SD | | Rapid City | SD | | Sioux Falls | SD | | Vermillion | SD | | Watertown | SD | | Chattanooga | TN | | Elizabethton | TN | | Erwin | TN | | Greenville | TN | | Johnson City | TN | | Knoxville | TN | | Memphis | TN | | Nashville | TN | | Amarillo | TX | | Austin | TX | | Beaumont | TX | | Dallas | TX | | El Paso | TX | | Fort Worth | TX | | Galveston | TX | | Houston | TX | | Port Arthur | TX | | San Antonio | TX | | Waco | TX | | Wichita Falls | TX | | Ogden | UT | | Salt Lake City | UT | | Bristol | VA | | Danville | VA | | Harrisonburg | VA | | Lynchburg | VA | | Newport News | VA | | Norfolk | VA | | Petersburg | VA | | Phoebus | VA | | Richmond | VA | | Roanoke | VA | | Staunton | VA | | Bennington | VT | | Brattleboro | VT | | Burlington | VT | | Montpelier | VT | | Newport City | VT | | Poultney | VT | | Rutland | VT | | Springfield | VT | | St. Albans | VT | | St. Johnsbury | VT | | Windsor | VT | | Seattle | WA | | Spokane | WA | | Tacoma | WA | | Kenosha | WI | | Madison | WI | | Milwaukee Co. | WI | | Oshkosh | WI | | Racine | WI | | Charleston | WV | | Huntington | WV | | Wheeling | WV | FUNCTION: Stream HOLC data from a city # Function to load and filter redlining data by city load_city_redlining_data <- function ( city_name ) { # URL to the GeoJSON data url <- \"https://raw.githubusercontent.com/americanpanorama/mapping-inequality-census-crosswalk/main/MIv3Areas_2010TractCrosswalk.geojson\" # Read the GeoJSON file into an sf object redlining_data <- read_sf ( url ) # Filter the data for the specified city and non-empty grades city_redline <- redlining_data %>% filter ( city == city_name ) # Return the filtered data return ( city_redline ) } Stream HOLC data for Denver, CO # Load redlining data for Denver denver_redlining <- load_city_redlining_data ( \"Denver\" ) knitr :: kable ( head ( denver_redlining ), format = \"markdown\" ) | area_id | city | state | city_survey | cat | grade | label | res | com | ind | fill | GEOID10 | GISJOIN | calc_area | pct_tract | geometry | |--------:|:-------|:------|:------------|:-----|:------|:------|:-----|:------|:------|:---------|:------------|:---------------|-------------:|----------:|:-----------------------------| | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004104 | G0800310004104 | 1.525535e+01 | 0.00001 | MULTIPOLYGON (((-104.9125 3\u2026 | | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004201 | G0800310004201 | 3.987458e+05 | 0.20900 | MULTIPOLYGON (((-104.9246 3\u2026 | | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004304 | G0800310004304 | 1.554195e+05 | 0.05927 | MULTIPOLYGON (((-104.9125 3\u2026 | | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004202 | G0800310004202 | 1.117770e+06 | 0.57245 | MULTIPOLYGON (((-104.9125 3\u2026 | | 6529 | Denver | CO | TRUE | Best | A | A2 | TRUE | FALSE | FALSE | \\#76a865 | 08031004302 | G0800310004302 | 3.133415e+05 | 0.28381 | MULTIPOLYGON (((-104.928 39\u2026 | | 6529 | Denver | CO | TRUE | Best | A | A2 | TRUE | FALSE | FALSE | \\#76a865 | 08031004301 | G0800310004301 | 1.221218e+05 | 0.08622 | MULTIPOLYGON (((-104.9305 3\u2026 | FUNCTION: Get Points-of-Interest from city of interest get_places <- function ( polygon_layer , type = \"food\" ) { # Check if the input is an sf object if ( ! inherits ( polygon_layer , \"sf\" )) { stop ( \"The provided object is not an sf object.\" ) } # Create a bounding box from the input sf object bbox_here <- st_bbox ( polygon_layer ) |> st_as_sfc () if ( type == \"food\" ){ my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( shop IN ('supermarket', 'bodega', 'market', 'other_market', 'farm', 'garden_centre', 'doityourself', 'farm_supply', 'compost', 'mulch', 'fertilizer') OR amenity IN ('social_facility', 'market', 'restaurant', 'coffee') OR leisure = 'garden' OR landuse IN ('farm', 'farmland', 'row_crops', 'orchard_plantation', 'dairy_grazing') OR building IN ('brewery', 'winery', 'distillery') OR shop = 'greengrocer' OR amenity = 'marketplace' )\" title <- \"food\" } if ( type == \"processed_food\" ) { my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( amenity IN ('fast_food', 'cafe', 'pub') OR shop IN ('convenience', 'supermarket') OR shop = 'kiosk' )\" title <- \"Processed Food Locations\" } if ( type == \"natural_habitats\" ){ my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( boundary = 'protected_area' OR natural IN ('tree', 'wood') OR landuse = 'forest' OR leisure = 'park' )\" title <- \"Natural habitats or City owned trees\" } if ( type == \"roads\" ){ my_layer <- \"lines\" my_query <- \"SELECT * FROM lines WHERE ( highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary') )\" title <- \"Major roads\" } if ( type == \"rivers\" ){ my_layer <- \"lines\" my_query <- \"SELECT * FROM lines WHERE ( waterway IN ('river'))\" title <- \"Major rivers\" } if ( type == \"internet_access\" ) { my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( amenity IN ('library', 'cafe', 'community_centre', 'public_building') AND internet_access = 'yes' )\" title <- \"Internet Access Locations\" } if ( type == \"water_bodies\" ) { my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( natural IN ('water', 'lake', 'pond') OR water IN ('lake', 'pond') OR landuse = 'reservoir' )\" title <- \"Water Bodies\" } if ( type == \"government_buildings\" ) { my_layer <- \"multipolygons\" my_query <- \"SELECT * FROM multipolygons WHERE ( amenity IN ('townhall', 'courthouse', 'embassy', 'police', 'fire_station') OR building IN ('capitol', 'government') )\" title <- \"Government Buildings\" } # Use the bbox to get data with oe_get(), specifying the desired layer and a custom SQL query for fresh food places tryCatch ({ places <- oe_get ( place = bbox_here , layer = my_layer , # Adjusted layer; change as per actual data availability query = my_query , quiet = TRUE ) places <- st_make_valid ( places ) # Crop the data to the bounding box cropped_places <- st_crop ( places , bbox_here ) # Plotting the cropped fresh food places plot <- ggplot ( data = cropped_places ) + geom_sf ( fill = \"cornflowerblue\" , color = \"cornflowerblue\" ) + ggtitle ( title ) + theme_tufte () + theme ( legend.position = \"none\" , # Optionally hide the legend axis.text = element_blank (), # Remove axis text axis.title = element_blank (), # Remove axis titles axis.ticks = element_blank (), # Remove axis ticks plot.background = element_rect ( fill = \"white\" , color = NA ), # Set the plot background to white panel.background = element_rect ( fill = \"white\" , color = NA ), # Set the panel background to white panel.grid.major = element_blank (), # Remove major grid lines panel.grid.minor = element_blank (), ) # Save the plot as a PNG file png_filename <- paste0 ( title , \"_\" , Sys.Date (), \".png\" ) ggsave ( png_filename , plot , width = 10 , height = 8 , units = \"in\" ) # Return the cropped dataset return ( cropped_places ) }, error = function ( e ) { stop ( \"Failed to retrieve or plot data: \" , e $ message ) }) } FUNCTION: Plot POI over HOLC grades plot_city_redlining <- function ( redlining_data , filename = \"redlining_plot.png\" ) { # Fetch additional geographic data based on redlining data roads <- get_places ( redlining_data , type = \"roads\" ) rivers <- get_places ( redlining_data , type = \"rivers\" ) # Filter residential zones with valid grades and where city survey is TRUE residential_zones <- redlining_data %>% filter ( city_survey == TRUE & grade != \"\" ) # Colors for the grades colors <- c ( \"#76a865\" , \"#7cb5bd\" , \"#ffff00\" , \"#d9838d\" ) # Plot the data using ggplot2 plot <- ggplot () + geom_sf ( data = roads , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.5 , lwd = 1.1 ) + geom_sf ( data = residential_zones , aes ( fill = grade ), alpha = 0.5 ) + theme_tufte () + scale_fill_manual ( values = colors ) + labs ( fill = 'HOLC Categories' ) + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), panel.grid.major = element_blank (), panel.grid.minor = element_blank (), legend.position = \"right\" ) # Save the plot as a high-resolution PNG file ggsave ( filename , plot , width = 10 , height = 8 , units = \"in\" , dpi = 600 ) # Return the plot object if needed for further manipulation or checking return ( plot ) } Plot Denver Redlining denver_plot <- plot_city_redlining ( denver_redlining ) Stream amenities by category food <- get_places ( denver_redlining , type = \"food\" ) food_processed <- get_places ( denver_redlining , type = \"processed_food\" ) natural_habitats <- get_places ( denver_redlining , type = \"natural_habitats\" ) roads <- get_places ( denver_redlining , type = \"roads\" ) rivers <- get_places ( denver_redlining , type = \"rivers\" ) #water_bodies <- get_places(denver_redlining, type=\"water_bodies\") government_buildings <- get_places ( denver_redlining , type = \"government_buildings\" ) FUNCTION: Plot the HOLC grades individually split_plot <- function ( sf_data , roads , rivers ) { # Filter for grades A, B, C, and D sf_data_filtered <- sf_data %>% filter ( grade %in% c ( 'A' , 'B' , 'C' , 'D' )) # Define a color for each grade grade_colors <- c ( \"A\" = \"#76a865\" , \"B\" = \"#7cb5bd\" , \"C\" = \"#ffff00\" , \"D\" = \"#d9838d\" ) # Create the plot with panels for each grade plot <- ggplot ( data = sf_data_filtered ) + geom_sf ( data = roads , alpha = 0.1 , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.1 , lwd = 1.1 ) + geom_sf ( aes ( fill = grade )) + facet_wrap ( ~ grade , nrow = 1 ) + # Free scales for different zoom levels if needed scale_fill_manual ( values = grade_colors ) + theme_minimal () + labs ( fill = 'HOLC Grade' ) + theme_tufte () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"none\" , # Optionally hide the legend axis.text = element_blank (), # Remove axis text axis.title = element_blank (), # Remove axis titles axis.ticks = element_blank (), # Remove axis ticks panel.grid.major = element_blank (), # Remove major grid lines panel.grid.minor = element_blank ()) ggsave ( plot , filename = \"HOLC_grades_individually.png\" , width = 10 , height = 4 , units = \"in\" , dpi = 1200 ) return ( plot ) } Plot 4 HOLC grades individually plot_row <- split_plot ( denver_redlining , roads , rivers ) FUNCTION: Map an amenity over each grade individually process_and_plot_sf_layers <- function ( layer1 , layer2 , output_file = \"output_plot.png\" ) { # Make geometries valid layer1 <- st_make_valid ( layer1 ) layer2 <- st_make_valid ( layer2 ) # Optionally, simplify geometries to remove duplicate vertices layer1 <- st_simplify ( layer1 , preserveTopology = TRUE ) |> filter ( grade != \"\" ) # Prepare a list to store results results <- list () # Loop through each grade and perform operations for ( grade in c ( \"A\" , \"B\" , \"C\" , \"D\" )) { # Filter layer1 for current grade layer1_grade <- layer1 [ layer1 $ grade == grade , ] # Buffer the geometries of the current grade buffered_layer1_grade <- st_buffer ( layer1_grade , dist = 500 ) # Intersect with the second layer intersections <- st_intersects ( layer2 , buffered_layer1_grade , sparse = FALSE ) selected_polygons <- layer2 [ rowSums ( intersections ) > 0 , ] # Add a new column to store the grade information selected_polygons $ grade <- grade # Store the result results [[ grade ]] <- selected_polygons } # Combine all selected polygons from different grades into one sf object final_selected_polygons <- do.call ( rbind , results ) # Define colors for the grades grade_colors <- c ( \"A\" = \"grey\" , \"B\" = \"grey\" , \"C\" = \"grey\" , \"D\" = \"grey\" ) # Create the plot plot <- ggplot () + geom_sf ( data = roads , alpha = 0.05 , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.1 , lwd = 1.1 ) + geom_sf ( data = layer1 , fill = \"grey\" , color = \"grey\" , size = 0.1 ) + facet_wrap ( ~ grade , nrow = 1 ) + geom_sf ( data = final_selected_polygons , fill = \"green\" , color = \"green\" , size = 0.1 ) + facet_wrap ( ~ grade , nrow = 1 ) + #scale_fill_manual(values = grade_colors) + #scale_color_manual(values = grade_colors) + theme_minimal () + labs ( fill = 'HOLC Grade' ) + theme_tufte () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"none\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot as a high-resolution PNG file ggsave ( output_file , plot , width = 10 , height = 4 , units = \"in\" , dpi = 1200 ) # Return the plot for optional further use return ( list ( plot = plot , sf = final_selected_polygons )) } FUNCTION: Create word cloud per grade create_wordclouds_by_grade <- function ( sf_object , output_file = \"food_word_cloud_per_grade.png\" , title = \"Healthy food place names word cloud\" , max_size = 25 , col_select = \"name\" ) { # Extract relevant data and prepare text data text_data <- sf_object %>% select ( grade , col_select ) %>% filter ( ! is.na ( col_select )) %>% unnest_tokens ( output = \"word\" , input = col_select , token = \"words\" ) %>% count ( grade , word , sort = TRUE ) %>% ungroup () %>% filter ( n () > 1 ) # Filter to remove overly common or single-occurrence words # Ensure there are no NA values in the 'word' column text_data <- text_data %>% filter ( ! is.na ( word )) # Handle cases where text_data might be empty if ( nrow ( text_data ) == 0 ) { stop ( \"No data available for creating word clouds.\" ) } # Create a word cloud using ggplot2 and ggwordcloud p <- ggplot ( ) + geom_text_wordcloud_area ( data = text_data , aes ( label = word , size = n ), rm_outside = TRUE ) + scale_size_area ( max_size = max_size ) + facet_wrap ( ~ grade , nrow = 1 ) + scale_color_gradient ( low = \"darkred\" , high = \"red\" ) + theme_minimal () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), panel.spacing = unit ( 0.5 , \"lines\" ), plot.title = element_text ( size = 16 , face = \"bold\" ), legend.position = \"none\" ) + labs ( title = title ) # Attempt to save the plot and handle any errors tryCatch ({ ggsave ( output_file , p , width = 10 , height = 4 , units = \"in\" , dpi = 600 ) }, error = function ( e ) { cat ( \"Error in saving the plot: \" , e $ message , \"\\n\" ) }) return ( p ) } Map food over each grade individually layer1 <- denver_redlining layer2 <- food food_match <- process_and_plot_sf_layers ( layer1 , layer2 , \"food_match.png\" ) WORD CLOUD: Names of places with fresh food food_word_cloud <- create_wordclouds_by_grade ( food_match $ sf , output_file = \"food_word_cloud_per_grade.png\" ) Warning: Using an external vector in selections was deprecated in tidyselect 1.1.0. \u2139 Please use `all_of()` or `any_of()` instead. # Was: data %>% select(col_select) # Now: data %>% select(all_of(col_select)) See . Warning in wordcloud_boxes(data_points = points_valid_first, boxes = boxes, : Some words could not fit on page. They have been removed. Map processed food over each grade individually layer1 <- denver_redlining layer2 <- food_processed processed_food_match <- process_and_plot_sf_layers ( layer1 , layer2 , \"processed_food_match.png\" ) WORD CLOUD: Names of places with processed food processed_food_cloud <- create_wordclouds_by_grade ( processed_food_match $ sf , output_file = \"processed_food_word_cloud_per_grade.png\" , title = \"Processed food place names where larger text is more frequent\" , max_size = 17 )","title":"Analysis Methodology"},{"location":"worksheets/worksheet_redlining/#part-2-integrating-environmental-data","text":"","title":"Part 2: Integrating Environmental Data"},{"location":"worksheets/worksheet_redlining/#data-processing","text":"Use satellite data from 2010 to analyze greenspace using NDVI, an index that measures the quantity of vegetation in an area. Apply methods to adjust for potential confounders as described in the study, ensuring that comparisons of greenspace across HOLC grades are valid and not biased by historical or socio-demographic factors. Map natural habitats over each grade individually layer1 <- denver_redlining layer2 <- natural_habitats natural_habitats_match <- process_and_plot_sf_layers ( layer1 , layer2 , \"natural_habitats_match.png\" ) print ( natural_habitats_match $ plot ) ![](worksheet_redlining_files/figure-gfm/unnamed-chunk-18-1.png) WORD CLOUD: Name of natural habitat area natural_habitats_cloud <- create_wordclouds_by_grade ( natural_habitats_match $ sf , output_file = \"natural_habitats_word_cloud_per_grade.png\" , title = \"Natural habitats place names where larger text is more frequent\" , max_size = 35 ) FUNCTION: Stream NDVI data polygon_layer <- denver_redlining # Function to process satellite data based on an SF polygon's extent process_satellite_data <- function ( polygon_layer , start_date , end_date , assets , fps = 1 , output_file = \"anim.gif\" ) { # Record start time start_time <- Sys.time () # Calculate the bbox from the polygon layer bbox <- st_bbox ( polygon_layer ) s = stac ( \"https://earth-search.aws.element84.com/v0\" ) # Use stacR to search for Sentinel-2 images within the bbox and date range items = s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( bbox [ \"xmin\" ], bbox [ \"ymin\" ], bbox [ \"xmax\" ], bbox [ \"ymax\" ]), datetime = paste ( start_date , end_date , sep = \"/\" ), limit = 500 ) %>% post_request () # Define mask for Sentinel-2 image quality #S2.mask <- image_mask(\"SCL\", values = c(3, 8, 9)) # Create a collection of images filtering by cloud cover col <- stac_image_collection ( items $ features , asset_names = assets , property_filter = function ( x ) { x [[ \"eo:cloud_cover\" ]] < 30 }) # Define a view for processing the data v <- cube_view ( srs = \"EPSG:4326\" , extent = list ( t0 = start_date , t1 = end_date , left = bbox [ \"xmin\" ], right = bbox [ \"xmax\" ], top = bbox [ \"ymax\" ], bottom = bbox [ \"ymin\" ]), dx = 0.001 , dy = 0.001 , dt = \"P1M\" , aggregation = \"median\" , resampling = \"bilinear\" ) # Calculate NDVI and create an animation ndvi_col <- function ( n ) { rev ( sequential_hcl ( n , \"Green-Yellow\" )) } #raster_cube(col, v, mask = S2.mask) %>% raster_cube ( col , v ) %>% select_bands ( c ( \"B04\" , \"B08\" )) %>% apply_pixel ( \"(B08-B04)/(B08+B04)\" , \"NDVI\" ) %>% gdalcubes :: animate ( col = ndvi_col , zlim = c ( -0.2 , 1 ), key.pos = 1 , save_as = output_file , fps = fps ) # Calculate processing time end_time <- Sys.time () processing_time <- difftime ( end_time , start_time ) # Return processing time return ( processing_time ) } Stream NDVI data: animation processing_time <- process_satellite_data ( denver_redlining , \"2022-05-31\" , \"2023-05-31\" , c ( \"B04\" , \"B08\" )) FUNCTION: Stream year average NDVI yearly_average_ndvi <- function ( polygon_layer , output_file = \"ndvi.png\" , dx = 0.01 , dy = 0.01 ) { # Record start time start_time <- Sys.time () # Calculate the bbox from the polygon layer bbox <- st_bbox ( polygon_layer ) s = stac ( \"https://earth-search.aws.element84.com/v0\" ) # Search for Sentinel-2 images within the bbox for June items <- s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( bbox [ \"xmin\" ], bbox [ \"ymin\" ], bbox [ \"xmax\" ], bbox [ \"ymax\" ]), datetime = \"2023-01-01/2023-12-31\" , limit = 500 ) %>% post_request () # Create a collection of images filtering by cloud cover col <- stac_image_collection ( items $ features , asset_names = c ( \"B04\" , \"B08\" ), property_filter = function ( x ) { x [[ \"eo:cloud_cover\" ]] < 80 }) # Define a view for processing the data specifically for June v <- cube_view ( srs = \"EPSG:4326\" , extent = list ( t0 = \"2023-01-01\" , t1 = \"2023-12-31\" , left = bbox [ \"xmin\" ], right = bbox [ \"xmax\" ], top = bbox [ \"ymax\" ], bottom = bbox [ \"ymin\" ]), dx = dx , dy = dy , dt = \"P1Y\" , aggregation = \"median\" , resampling = \"bilinear\" ) # Process NDVI ndvi_rast <- raster_cube ( col , v ) %>% select_bands ( c ( \"B04\" , \"B08\" )) %>% apply_pixel ( \"(B08-B04)/(B08+B04)\" , \"NDVI\" ) %>% write_tif () |> terra :: rast () # Convert terra Raster to ggplot using tidyterra ndvi_plot <- ggplot () + geom_spatraster ( data = ndvi_rast , aes ( fill = NDVI )) + scale_fill_viridis_c ( option = \"viridis\" , direction = -1 , name = \"NDVI\" ) + labs ( title = \"NDVI mean for 2023\" ) + theme_minimal () + coord_sf () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"right\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot as a high-resolution PNG file ggsave ( output_file , ndvi_plot , width = 10 , height = 8 , dpi = 600 ) # Calculate processing time end_time <- Sys.time () processing_time <- difftime ( end_time , start_time ) # Return the plot and processing time return ( list ( plot = ndvi_plot , processing_time = processing_time , raster = ndvi_rast )) } Stream NDVI: high resolution ndvi_background <- yearly_average_ndvi ( denver_redlining , dx = 0.0001 , dy = 0.0001 ) FUNCTION: Map NDVI per HOLC grade individually create_mask_and_plot <- function ( redlining_sf , background_raster = ndvi $ raster , roads = NULL , rivers = NULL ){ start_time <- Sys.time () # Start timing # Validate and prepare the redlining data redlining_sf <- redlining_sf %>% filter ( grade != \"\" ) %>% st_make_valid () bbox <- st_bbox ( redlining_sf ) # Get original bounding box expanded_bbox <- expand_bbox ( bbox , 6000 , 1000 ) # expanded_bbox_poly <- st_as_sfc ( expanded_bbox , crs = st_crs ( redlining_sf )) %>% st_make_valid () # Initialize an empty list to store masks masks <- list () # Iterate over each grade to create masks unique_grades <- unique ( redlining_sf $ grade ) for ( grade in unique_grades ) { # Filter polygons by grade grade_polygons <- redlining_sf [ redlining_sf $ grade == grade , ] # Create an \"inverted\" mask by subtracting these polygons from the background mask <- st_difference ( expanded_bbox_poly , st_union ( grade_polygons )) # Store the mask in the list with the grade as the name masks [[ grade ]] <- st_sf ( geometry = mask , grade = grade ) } # Combine all masks into a single sf object mask_sf <- do.call ( rbind , masks ) # Normalize the grades so that C.2 becomes C, but correctly handle other grades mask_sf $ grade <- ifelse ( mask_sf $ grade == \"C.2\" , \"C\" , mask_sf $ grade ) # Prepare the plot plot <- ggplot () + geom_spatraster ( data = background_raster , aes ( fill = NDVI )) + scale_fill_viridis_c ( name = \"NDVI\" , option = \"viridis\" , direction = -1 ) + geom_sf ( data = mask_sf , aes ( color = grade ), fill = \"white\" , size = 0.1 , show.legend = FALSE ) + scale_color_manual ( values = c ( \"A\" = \"white\" , \"B\" = \"white\" , \"C\" = \"white\" , \"D\" = \"white\" ), name = \"Grade\" ) + facet_wrap ( ~ grade , nrow = 1 ) + geom_sf ( data = roads , alpha = 1 , lwd = 0.1 , color = \"white\" ) + geom_sf ( data = rivers , color = \"white\" , alpha = 0.5 , lwd = 1.1 ) + labs ( title = \"NDVI: Normalized Difference Vegetation Index\" ) + theme_minimal () + coord_sf ( xlim = c ( bbox [ \"xmin\" ], bbox [ \"xmax\" ]), ylim = c ( bbox [ \"ymin\" ], bbox [ \"ymax\" ]), expand = FALSE ) + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"bottom\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot ggsave ( \"redlining_mask_ndvi.png\" , plot , width = 10 , height = 4 , dpi = 600 ) end_time <- Sys.time () # End timing runtime <- end_time - start_time # Return the plot and runtime return ( list ( plot = plot , runtime = runtime , mask_sf = mask_sf )) } Stream NDVI: low resolution ndvi_background_low <- yearly_average_ndvi ( denver_redlining ) Map low resolution NDVI per HOLC grade ndvi <- create_mask_and_plot ( denver_redlining , background_raster = ndvi_background_low $ raster , roads = roads , rivers = rivers ) FUNCTION: Map Denver City provided data per HOLC grade process_city_inventory_data <- function ( address , inner_file , polygon_layer , output_filename , variable_label = 'Tree Density' ) { # Download and read the shapefile full_path <- glue ( \"/vsizip/vsicurl/{address}/{inner_file}\" ) shape_data <- st_read ( full_path , quiet = TRUE ) |> st_as_sf () # Process the shape data with the provided polygon layer processed_data <- process_and_plot_sf_layers ( polygon_layer , shape_data , paste0 ( output_filename , \".png\" )) # Extract trees from the processed data trees <- processed_data $ sf denver_redlining_residential <- polygon_layer |> filter ( grade != \"\" ) # Generate the density plot plot <- ggplot () + geom_sf ( data = roads , alpha = 0.05 , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.1 , lwd = 1.1 ) + geom_sf ( data = denver_redlining_residential , fill = \"grey\" , color = \"grey\" , size = 0.1 ) + facet_wrap ( ~ grade , nrow = 1 ) + stat_density_2d ( data = trees , mapping = aes ( x = map_dbl ( geometry , ~ . [ 1 ]), y = map_dbl ( geometry , ~ . [ 2 ]), fill = stat ( density )), geom = 'tile' , contour = FALSE , alpha = 0.9 ) + scale_fill_gradientn ( colors = c ( \"transparent\" , \"white\" , \"limegreen\" ), values = scales :: rescale ( c ( 0 , 0.1 , 1 )), # Adjust these based on your density range guide = \"colourbar\" ) + theme_minimal () + labs ( fill = variable_label ) + theme_tufte () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"bottom\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot ggsave ( paste0 ( output_filename , \"_density_plot.png\" ), plot , width = 10 , height = 4 , units = \"in\" , dpi = 600 ) # Return the plot and the tree layer return ( list ( plot = plot , layer = trees )) } Map tree inventory per HOLC grade result <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/tree_inventory/shape/tree_inventory.zip\" , \"tree_inventory.shp\" , denver_redlining , \"Denver_tree_inventory_2023\" ) Warning: `stat(density)` was deprecated in ggplot2 3.4.0. \u2139 Please use `after_stat(density)` instead. Map traffic accidents per HOLC grade result <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/traffic_accidents/shape/traffic_accidents.zip\" , \"traffic_accidents.shp\" , denver_redlining , \"Denver_traffic_accidents\" , variable_label = 'Traffic accidents density' ) Map stream sampling effort per HOLC grade instream_sampling_sites <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/instream_sampling_sites/shape/instream_sampling_sites.zip\" , \"instream_sampling_sites.shp\" , denver_redlining , \"instream_sampling_sites\" , variable_label = 'Instream sampling sites density' ) Map soil sampling effort per HOLC grade soil_samples <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/soil_samples/shape/soil_samples.zip\" , \"soil_samples.shp\" , denver_redlining , \"Soil samples\" , variable_label = 'soil samples density' ) Map public art density per HOLC grade public_art <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/public_art/shape/public_art.zip\" , \"public_art.shp\" , denver_redlining , \"Public art \" , variable_label = 'Public art density' ) Map liquor licenses density per HOLC grade liquor_licenses <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/liquor_licenses/shape/liquor_licenses.zip\" , \"liquor_licenses.shp\" , denver_redlining , \"liquor licenses \" , variable_label = 'liquor licenses density' ) Map crime density per HOLC grade Crime <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/crime/shape/crime.zip\" , \"crime.shp\" , denver_redlining , \"crime\" , variable_label = 'Crime density' ) WORD CLOUD: Types of crimes crime_cloud <- create_wordclouds_by_grade ( Crime $ layer , output_file = \"Crime_word_cloud_per_grade.png\" , title = \"Crime type where larger text is more frequent\" , max_size = 25 , col_select = \"OFFENSE_TY\" ) Warning: Using an external vector in selections was deprecated in tidyselect 1.1.0. \u2139 Please use `all_of()` or `any_of()` instead. # Was: data %>% select(col_select) # Now: data %>% select(all_of(col_select)) See . Map police shooting density per HOLC grade Denver_police_shootings <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/denver_police_officer_involved_shootings/shape/denver_police_officer_involved_shootings.zip\" , \"denver_police_officer_involved_shootings.shp\" , denver_redlining , \"Police shootings\" , variable_label = 'Police shootings density' ) Not enough data for density across all 4 WORD CLOUD: Police involved shootings Denver_police_shootings_cloud <- create_wordclouds_by_grade ( Denver_police_shootings $ layer , output_file = \"police_shootings_word_cloud_per_grade.png\" , title = \"police involved shooting per crime type where larger text is more frequent\" , max_size = 35 , col_select = \"SHOOT_ACTI\" )","title":"Data Processing"},{"location":"worksheets/worksheet_redlining/#part-3-comparative-analysis-and-visualization","text":"","title":"Part 3: Comparative Analysis and Visualization"},{"location":"worksheets/worksheet_redlining/#statistical-analysis","text":"Conduct a detailed statistical analysis to compare greenspace across different HOLC grades, using techniques like Targeted Maximum Likelihood Estimation (TMLE) to assess the association between historical redlining and current greenspace levels. Visualize the disparities in greenspace distribution using GIS tools, highlighting how redlining has shaped urban ecological landscapes.","title":"Statistical Analysis"},{"location":"worksheets/worksheet_redlining/#conclusion","text":"This tutorial provides tools and methodologies to explore the lingering effects of historic redlining on urban greenspace, offering insights into the intersection of urban planning, environmental justice, and public health.","title":"Conclusion"},{"location":"worksheets/worksheet_redlining/#references_1","text":"Nardone, A., Rudolph, K. E., Morello-Frosch, R., & Casey, J. A. (2021). Redlines and Greenspace: The Relationship between Historical Redlining and 2010 Greenspace across the United States. Environmental Health Perspectives , 129(1), 017006. DOI:10.1289/EHP7495. Available online","title":"References"},{"location":"worksheets/worksheet_redlining_student_edition/","text":"student edition \u00b6 img { width: 100%; } details summary { color: black; background-color: white; } details[open] summary { color: black; } R libraries we use in this analysis if ( ! requireNamespace ( \"tidytext\" , quietly = TRUE )) { install.packages ( \"tidytext\" ) } library ( tidytext ) ## Warning: package 'tidytext' was built under R version 4.3.2 library ( sf ) ## Warning: package 'sf' was built under R version 4.3.2 ## Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE library ( ggplot2 ) ## Warning: package 'ggplot2' was built under R version 4.3.2 library ( ggthemes ) ## Warning: package 'ggthemes' was built under R version 4.3.2 library ( dplyr ) ## ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ## ## filter, lag ## The following objects are masked from 'package:base': ## ## intersect, setdiff, setequal, union library ( rstac ) ## Warning: package 'rstac' was built under R version 4.3.2 library ( gdalcubes ) ## Warning: package 'gdalcubes' was built under R version 4.3.2 library ( gdalUtils ) ## Please note that rgdal will be retired during October 2023, ## plan transition to sf/stars/terra functions using GDAL and PROJ ## at your earliest convenience. ## See https://r-spatial.org/r/2023/05/15/evolution4.html and https://github.com/r-spatial/evolution ## rgdal: version: 1.6-7, (SVN revision 1203) ## Geospatial Data Abstraction Library extensions to R successfully loaded ## Loaded GDAL runtime: GDAL 3.5.3, released 2022/10/21 ## Path to GDAL shared files: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/rgdal/gdal ## GDAL does not use iconv for recoding strings. ## GDAL binary built with GEOS: TRUE ## Loaded PROJ runtime: Rel. 9.1.0, September 1st, 2022, [PJ_VERSION: 910] ## Path to PROJ shared files: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/gdalcubes/proj ## PROJ CDN enabled: FALSE ## Linking to sp version:1.6-1 ## To mute warnings of possible GDAL/OSR exportToProj4() degradation, ## use options(\"rgdal_show_exportToProj4_warnings\"=\"none\") before loading sp or rgdal. ## ## Attaching package: 'gdalUtils' ## The following object is masked from 'package:sf': ## ## gdal_rasterize library ( gdalcubes ) library ( colorspace ) library ( terra ) ## Warning: package 'terra' was built under R version 4.3.2 ## terra 1.7.71 ## ## Attaching package: 'terra' ## The following object is masked from 'package:colorspace': ## ## RGB ## The following objects are masked from 'package:gdalcubes': ## ## animate, crop, size library ( tidyterra ) ## ## Attaching package: 'tidyterra' ## The following object is masked from 'package:stats': ## ## filter library ( basemapR ) library ( tidytext ) library ( ggwordcloud ) library ( osmextract ) ## Data (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright. ## Check the package website, https://docs.ropensci.org/osmextract/, for more details. library ( sf ) library ( ggplot2 ) library ( ggthemes ) library ( glue ) ## ## Attaching package: 'glue' ## The following object is masked from 'package:terra': ## ## trim library ( purrr ) FUNCTION: Stream HOLC data from a city # Function to load and filter redlining data by city load_city_redlining_data <- function ( city_name ) { # URL to the GeoJSON data url <- \"https://raw.githubusercontent.com/americanpanorama/mapping-inequality-census-crosswalk/main/MIv3Areas_2010TractCrosswalk.geojson\" # Read the GeoJSON file into an sf object redlining_data <- read_sf ( url ) # Filter the data for the specified city and non-empty grades city_redline <- redlining_data %>% filter ( city == city_name ) # Return the filtered data return ( city_redline ) } Stream HOLC data for Denver, CO # Load redlining data for Denver denver_redlining <- load_city_redlining_data ( \"Denver\" ) knitr :: kable ( head ( denver_redlining ), format = \"markdown\" ) | area_id | city | state | city_survey | cat | grade | label | res | com | ind | fill | GEOID10 | GISJOIN | calc_area | pct_tract | geometry | |--------:|:-------|:------|:------------|:-----|:------|:------|:-----|:------|:------|:---------|:------------|:---------------|-------------:|----------:|:-----------------------------| | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004104 | G0800310004104 | 1.525535e+01 | 0.00001 | MULTIPOLYGON (((-104.9125 3\u2026 | | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004201 | G0800310004201 | 3.987458e+05 | 0.20900 | MULTIPOLYGON (((-104.9246 3\u2026 | | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004304 | G0800310004304 | 1.554195e+05 | 0.05927 | MULTIPOLYGON (((-104.9125 3\u2026 | | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004202 | G0800310004202 | 1.117770e+06 | 0.57245 | MULTIPOLYGON (((-104.9125 3\u2026 | | 6529 | Denver | CO | TRUE | Best | A | A2 | TRUE | FALSE | FALSE | \\#76a865 | 08031004302 | G0800310004302 | 3.133415e+05 | 0.28381 | MULTIPOLYGON (((-104.928 39\u2026 | | 6529 | Denver | CO | TRUE | Best | A | A2 | TRUE | FALSE | FALSE | \\#76a865 | 08031004301 | G0800310004301 | 1.221218e+05 | 0.08622 | MULTIPOLYGON (((-104.9305 3\u2026 | FUNCTION: Get Points-of-Interest from city of interest get_places <- function ( polygon_layer , type = \"food\" ) { # Check if the input is an sf object if ( ! inherits ( polygon_layer , \"sf\" )) { stop ( \"The provided object is not an sf object.\" ) } # Create a bounding box from the input sf object bbox_here <- st_bbox ( polygon_layer ) |> st_as_sfc () if ( type == \"roads\" ){ my_layer <- \"lines\" my_query <- \"SELECT * FROM lines WHERE ( highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary') )\" title <- \"Major roads\" } if ( type == \"rivers\" ){ my_layer <- \"lines\" my_query <- \"SELECT * FROM lines WHERE ( waterway IN ('river'))\" title <- \"Major rivers\" } # Use the bbox to get data with oe_get(), specifying the desired layer and a custom SQL query for fresh food places tryCatch ({ places <- oe_get ( place = bbox_here , layer = my_layer , # Adjusted layer; change as per actual data availability query = my_query , quiet = TRUE ) places <- st_make_valid ( places ) # Crop the data to the bounding box cropped_places <- st_crop ( places , bbox_here ) # Plotting the cropped fresh food places plot <- ggplot ( data = cropped_places ) + geom_sf ( fill = \"cornflowerblue\" , color = \"cornflowerblue\" ) + ggtitle ( title ) + theme_tufte () + theme ( legend.position = \"none\" , # Optionally hide the legend axis.text = element_blank (), # Remove axis text axis.title = element_blank (), # Remove axis titles axis.ticks = element_blank (), # Remove axis ticks plot.background = element_rect ( fill = \"white\" , color = NA ), # Set the plot background to white panel.background = element_rect ( fill = \"white\" , color = NA ), # Set the panel background to white panel.grid.major = element_blank (), # Remove major grid lines panel.grid.minor = element_blank (), ) # Save the plot as a PNG file png_filename <- paste0 ( title , \"_\" , Sys.Date (), \".png\" ) ggsave ( png_filename , plot , width = 10 , height = 8 , units = \"in\" ) # Return the cropped dataset return ( cropped_places ) }, error = function ( e ) { stop ( \"Failed to retrieve or plot data: \" , e $ message ) }) } Stream amenities by category roads <- get_places ( denver_redlining , type = \"roads\" ) rivers <- get_places ( denver_redlining , type = \"rivers\" ) FUNCTION: Plot POI over HOLC grades plot_city_redlining <- function ( redlining_data , filename = \"redlining_plot.png\" ) { # Fetch additional geographic data based on redlining data roads <- get_places ( redlining_data , type = \"roads\" ) rivers <- get_places ( redlining_data , type = \"rivers\" ) # Filter residential zones with valid grades and where city survey is TRUE residential_zones <- redlining_data %>% filter ( city_survey == TRUE & grade != \"\" ) # Colors for the grades colors <- c ( \"#76a865\" , \"#7cb5bd\" , \"#ffff00\" , \"#d9838d\" ) # Plot the data using ggplot2 plot <- ggplot () + geom_sf ( data = roads , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.5 , lwd = 1.1 ) + geom_sf ( data = residential_zones , aes ( fill = grade ), alpha = 0.5 ) + theme_tufte () + scale_fill_manual ( values = colors ) + labs ( fill = 'HOLC Categories' ) + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), panel.grid.major = element_blank (), panel.grid.minor = element_blank (), legend.position = \"right\" ) # Save the plot as a high-resolution PNG file ggsave ( filename , plot , width = 10 , height = 8 , units = \"in\" , dpi = 600 ) # Return the plot object if needed for further manipulation or checking return ( plot ) } FUNCTION: Plot the HOLC grades individually split_plot <- function ( sf_data , roads , rivers ) { # Filter for grades A, B, C, and D sf_data_filtered <- sf_data %>% filter ( grade %in% c ( 'A' , 'B' , 'C' , 'D' )) # Define a color for each grade grade_colors <- c ( \"A\" = \"#76a865\" , \"B\" = \"#7cb5bd\" , \"C\" = \"#ffff00\" , \"D\" = \"#d9838d\" ) # Create the plot with panels for each grade plot <- ggplot ( data = sf_data_filtered ) + geom_sf ( data = roads , alpha = 0.1 , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.1 , lwd = 1.1 ) + geom_sf ( aes ( fill = grade )) + facet_wrap ( ~ grade , nrow = 1 ) + # Free scales for different zoom levels if needed scale_fill_manual ( values = grade_colors ) + theme_minimal () + labs ( fill = 'HOLC Grade' ) + theme_tufte () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"none\" , # Optionally hide the legend axis.text = element_blank (), # Remove axis text axis.title = element_blank (), # Remove axis titles axis.ticks = element_blank (), # Remove axis ticks panel.grid.major = element_blank (), # Remove major grid lines panel.grid.minor = element_blank ()) ggsave ( plot , filename = \"HOLC_grades_individually.png\" , width = 10 , height = 4 , units = \"in\" , dpi = 1200 ) return ( plot ) } Plot Denver Redlining denver_plot <- plot_city_redlining ( denver_redlining ) denver_plot ![](worksheet_redlining_student_edition_files/figure-gfm/unnamed-chunk-8-1.png) Plot 4 HOLC grades individually plot_row <- split_plot ( denver_redlining , roads , rivers ) plot_row ![](worksheet_redlining_student_edition_files/figure-gfm/unnamed-chunk-9-1.png) FUNCTION: Map an amenity over each grade individually process_and_plot_sf_layers <- function ( layer1 , layer2 , output_file = \"output_plot.png\" ) { # Make geometries valid layer1 <- st_make_valid ( layer1 ) layer2 <- st_make_valid ( layer2 ) # Optionally, simplify geometries to remove duplicate vertices layer1 <- st_simplify ( layer1 , preserveTopology = TRUE ) |> filter ( grade != \"\" ) # Prepare a list to store results results <- list () # Loop through each grade and perform operations for ( grade in c ( \"A\" , \"B\" , \"C\" , \"D\" )) { # Filter layer1 for current grade layer1_grade <- layer1 [ layer1 $ grade == grade , ] # Buffer the geometries of the current grade buffered_layer1_grade <- st_buffer ( layer1_grade , dist = 500 ) # Intersect with the second layer intersections <- st_intersects ( layer2 , buffered_layer1_grade , sparse = FALSE ) selected_polygons <- layer2 [ rowSums ( intersections ) > 0 , ] # Add a new column to store the grade information selected_polygons $ grade <- grade # Store the result results [[ grade ]] <- selected_polygons } # Combine all selected polygons from different grades into one sf object final_selected_polygons <- do.call ( rbind , results ) # Define colors for the grades grade_colors <- c ( \"A\" = \"grey\" , \"B\" = \"grey\" , \"C\" = \"grey\" , \"D\" = \"grey\" ) # Create the plot plot <- ggplot () + geom_sf ( data = roads , alpha = 0.05 , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.1 , lwd = 1.1 ) + geom_sf ( data = layer1 , fill = \"grey\" , color = \"grey\" , size = 0.1 ) + facet_wrap ( ~ grade , nrow = 1 ) + geom_sf ( data = final_selected_polygons , fill = \"green\" , color = \"green\" , size = 0.1 ) + facet_wrap ( ~ grade , nrow = 1 ) + #scale_fill_manual(values = grade_colors) + #scale_color_manual(values = grade_colors) + theme_minimal () + labs ( fill = 'HOLC Grade' ) + theme_tufte () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"none\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot as a high-resolution PNG file ggsave ( output_file , plot , width = 10 , height = 4 , units = \"in\" , dpi = 1200 ) # Return the plot for optional further use return ( list ( plot = plot , sf = final_selected_polygons )) } Part 2: Integrating Environmental Data \u00b6 Data Processing \u00b6 Use satellite data from 2010 to analyze greenspace using NDVI, an index that measures the quantity of vegetation in an area. Apply methods to adjust for potential confounders as described in the study, ensuring that comparisons of greenspace across HOLC grades are valid and not biased by historical or socio-demographic factors. FUNCTION: Stream NDVI data polygon_layer <- denver_redlining # Function to process satellite data based on an SF polygon's extent process_satellite_data <- function ( polygon_layer , start_date , end_date , assets , fps = 1 , output_file = \"anim.gif\" ) { # Record start time start_time <- Sys.time () # Calculate the bbox from the polygon layer bbox <- st_bbox ( polygon_layer ) s = stac ( \"https://earth-search.aws.element84.com/v0\" ) # Use stacR to search for Sentinel-2 images within the bbox and date range items = s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( bbox [ \"xmin\" ], bbox [ \"ymin\" ], bbox [ \"xmax\" ], bbox [ \"ymax\" ]), datetime = paste ( start_date , end_date , sep = \"/\" ), limit = 500 ) %>% post_request () # Define mask for Sentinel-2 image quality #S2.mask <- image_mask(\"SCL\", values = c(3, 8, 9)) # Create a collection of images filtering by cloud cover col <- stac_image_collection ( items $ features , asset_names = assets , property_filter = function ( x ) { x [[ \"eo:cloud_cover\" ]] < 30 }) # Define a view for processing the data v <- cube_view ( srs = \"EPSG:4326\" , extent = list ( t0 = start_date , t1 = end_date , left = bbox [ \"xmin\" ], right = bbox [ \"xmax\" ], top = bbox [ \"ymax\" ], bottom = bbox [ \"ymin\" ]), dx = 0.001 , dy = 0.001 , dt = \"P1M\" , aggregation = \"median\" , resampling = \"bilinear\" ) # Calculate NDVI and create an animation ndvi_col <- function ( n ) { rev ( sequential_hcl ( n , \"Green-Yellow\" )) } #raster_cube(col, v, mask = S2.mask) %>% raster_cube ( col , v ) %>% select_bands ( c ( \"B04\" , \"B08\" )) %>% apply_pixel ( \"(B08-B04)/(B08+B04)\" , \"NDVI\" ) %>% gdalcubes :: animate ( col = ndvi_col , zlim = c ( -0.2 , 1 ), key.pos = 1 , save_as = output_file , fps = fps ) # Calculate processing time end_time <- Sys.time () processing_time <- difftime ( end_time , start_time ) # Return processing time return ( processing_time ) } Stream NDVI data: animation processing_time <- process_satellite_data ( denver_redlining , \"2022-05-31\" , \"2023-05-31\" , c ( \"B04\" , \"B08\" )) FUNCTION: Map NDVI per HOLC grade individually create_mask_and_plot <- function ( redlining_sf , background_raster = ndvi $ raster , roads = NULL , rivers = NULL ){ start_time <- Sys.time () # Start timing # Validate and prepare the redlining data redlining_sf <- redlining_sf %>% filter ( grade != \"\" ) %>% st_make_valid () bbox <- st_bbox ( redlining_sf ) # Get original bounding box expanded_bbox <- expand_bbox ( bbox , 6000 , 1000 ) # expanded_bbox_poly <- st_as_sfc ( expanded_bbox , crs = st_crs ( redlining_sf )) %>% st_make_valid () # Initialize an empty list to store masks masks <- list () # Iterate over each grade to create masks unique_grades <- unique ( redlining_sf $ grade ) for ( grade in unique_grades ) { # Filter polygons by grade grade_polygons <- redlining_sf [ redlining_sf $ grade == grade , ] # Create an \"inverted\" mask by subtracting these polygons from the background mask <- st_difference ( expanded_bbox_poly , st_union ( grade_polygons )) # Store the mask in the list with the grade as the name masks [[ grade ]] <- st_sf ( geometry = mask , grade = grade ) } # Combine all masks into a single sf object mask_sf <- do.call ( rbind , masks ) # Normalize the grades so that C.2 becomes C, but correctly handle other grades mask_sf $ grade <- ifelse ( mask_sf $ grade == \"C.2\" , \"C\" , mask_sf $ grade ) # Prepare the plot plot <- ggplot () + geom_spatraster ( data = background_raster , aes ( fill = NDVI )) + scale_fill_viridis_c ( name = \"NDVI\" , option = \"viridis\" , direction = -1 ) + geom_sf ( data = mask_sf , aes ( color = grade ), fill = \"white\" , size = 0.1 , show.legend = FALSE ) + scale_color_manual ( values = c ( \"A\" = \"white\" , \"B\" = \"white\" , \"C\" = \"white\" , \"D\" = \"white\" ), name = \"Grade\" ) + facet_wrap ( ~ grade , nrow = 1 ) + geom_sf ( data = roads , alpha = 1 , lwd = 0.1 , color = \"white\" ) + geom_sf ( data = rivers , color = \"white\" , alpha = 0.5 , lwd = 1.1 ) + labs ( title = \"NDVI: Normalized Difference Vegetation Index\" ) + theme_minimal () + coord_sf ( xlim = c ( bbox [ \"xmin\" ], bbox [ \"xmax\" ]), ylim = c ( bbox [ \"ymin\" ], bbox [ \"ymax\" ]), expand = FALSE ) + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"bottom\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot ggsave ( \"redlining_mask_ndvi.png\" , plot , width = 10 , height = 4 , dpi = 600 ) end_time <- Sys.time () # End timing runtime <- end_time - start_time # Return the plot and runtime return ( list ( plot = plot , runtime = runtime , mask_sf = mask_sf )) } FUNCTION: Stream year average NDVI yearly_average_ndvi <- function ( polygon_layer , output_file = \"ndvi.png\" , dx = 0.01 , dy = 0.01 ) { # Record start time start_time <- Sys.time () # Calculate the bbox from the polygon layer bbox <- st_bbox ( polygon_layer ) s = stac ( \"https://earth-search.aws.element84.com/v0\" ) # Search for Sentinel-2 images within the bbox for June items <- s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( bbox [ \"xmin\" ], bbox [ \"ymin\" ], bbox [ \"xmax\" ], bbox [ \"ymax\" ]), datetime = \"2023-01-01/2023-12-31\" , limit = 500 ) %>% post_request () # Create a collection of images filtering by cloud cover col <- stac_image_collection ( items $ features , asset_names = c ( \"B04\" , \"B08\" ), property_filter = function ( x ) { x [[ \"eo:cloud_cover\" ]] < 80 }) # Define a view for processing the data specifically for June v <- cube_view ( srs = \"EPSG:4326\" , extent = list ( t0 = \"2023-01-01\" , t1 = \"2023-12-31\" , left = bbox [ \"xmin\" ], right = bbox [ \"xmax\" ], top = bbox [ \"ymax\" ], bottom = bbox [ \"ymin\" ]), dx = dx , dy = dy , dt = \"P1Y\" , aggregation = \"median\" , resampling = \"bilinear\" ) # Process NDVI ndvi_rast <- raster_cube ( col , v ) %>% select_bands ( c ( \"B04\" , \"B08\" )) %>% apply_pixel ( \"(B08-B04)/(B08+B04)\" , \"NDVI\" ) %>% write_tif () |> terra :: rast () # Convert terra Raster to ggplot using tidyterra ndvi_plot <- ggplot () + geom_spatraster ( data = ndvi_rast , aes ( fill = NDVI )) + scale_fill_viridis_c ( option = \"viridis\" , direction = -1 , name = \"NDVI\" ) + labs ( title = \"NDVI mean for 2023\" ) + theme_minimal () + coord_sf () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"right\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot as a high-resolution PNG file ggsave ( output_file , ndvi_plot , width = 10 , height = 8 , dpi = 600 ) # Calculate processing time end_time <- Sys.time () processing_time <- difftime ( end_time , start_time ) # Return the plot and processing time return ( list ( plot = ndvi_plot , processing_time = processing_time , raster = ndvi_rast )) } Stream NDVI: low resolution ndvi_background_low <- yearly_average_ndvi ( denver_redlining ) Map low resolution NDVI per HOLC grade ndvi <- create_mask_and_plot ( denver_redlining , background_raster = ndvi_background_low $ raster , roads = roads , rivers = rivers ) FUNCTION: Map Denver City provided data per HOLC grade process_city_inventory_data <- function ( address , inner_file , polygon_layer , output_filename , variable_label = 'Tree Density' ) { # Download and read the shapefile full_path <- glue ( \"/vsizip/vsicurl/{address}/{inner_file}\" ) shape_data <- st_read ( full_path , quiet = TRUE ) |> st_as_sf () # Process the shape data with the provided polygon layer processed_data <- process_and_plot_sf_layers ( polygon_layer , shape_data , paste0 ( output_filename , \".png\" )) # Extract trees from the processed data trees <- processed_data $ sf denver_redlining_residential <- polygon_layer |> filter ( grade != \"\" ) # Generate the density plot plot <- ggplot () + geom_sf ( data = roads , alpha = 0.05 , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.1 , lwd = 1.1 ) + geom_sf ( data = denver_redlining_residential , fill = \"grey\" , color = \"grey\" , size = 0.1 ) + facet_wrap ( ~ grade , nrow = 1 ) + stat_density_2d ( data = trees , mapping = aes ( x = map_dbl ( geometry , ~ . [ 1 ]), y = map_dbl ( geometry , ~ . [ 2 ]), fill = stat ( density )), geom = 'tile' , contour = FALSE , alpha = 0.9 ) + scale_fill_gradientn ( colors = c ( \"transparent\" , \"white\" , \"limegreen\" ), values = scales :: rescale ( c ( 0 , 0.1 , 1 )), # Adjust these based on your density range guide = \"colourbar\" ) + theme_minimal () + labs ( fill = variable_label ) + theme_tufte () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"bottom\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot ggsave ( paste0 ( output_filename , \"_density_plot.png\" ), plot , width = 10 , height = 4 , units = \"in\" , dpi = 600 ) # Return the plot and the tree layer return ( list ( plot = plot , layer = trees )) } Map tree inventory per HOLC grade result <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/tree_inventory/shape/tree_inventory.zip\" , \"tree_inventory.shp\" , denver_redlining , \"Denver_tree_inventory_2023\" ) Warning: `stat(density)` was deprecated in ggplot2 3.4.0. \u2139 Please use `after_stat(density)` instead. Map traffic accidents per HOLC grade result <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/traffic_accidents/shape/traffic_accidents.zip\" , \"traffic_accidents.shp\" , denver_redlining , \"Denver_traffic_accidents\" , variable_label = 'Traffic accidents density' ) Map stream sampling effort per HOLC grade instream_sampling_sites <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/instream_sampling_sites/shape/instream_sampling_sites.zip\" , \"instream_sampling_sites.shp\" , denver_redlining , \"instream_sampling_sites\" , variable_label = 'Instream sampling sites density' ) Map soil sampling effort per HOLC grade soil_samples <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/soil_samples/shape/soil_samples.zip\" , \"soil_samples.shp\" , denver_redlining , \"Soil samples\" , variable_label = 'soil samples density' ) Map public art density per HOLC grade public_art <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/public_art/shape/public_art.zip\" , \"public_art.shp\" , denver_redlining , \"Public art \" , variable_label = 'Public art density' ) Map liquor licenses density per HOLC grade liquor_licenses <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/liquor_licenses/shape/liquor_licenses.zip\" , \"liquor_licenses.shp\" , denver_redlining , \"liquor licenses \" , variable_label = 'liquor licenses density' ) Map crime density per HOLC grade Crime <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/crime/shape/crime.zip\" , \"crime.shp\" , denver_redlining , \"crime\" , variable_label = 'Crime density' ) Map police shooting density per HOLC grade Denver_police_shootings <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/denver_police_officer_involved_shootings/shape/denver_police_officer_involved_shootings.zip\" , \"denver_police_officer_involved_shootings.shp\" , denver_redlining , \"Police shootings\" , variable_label = 'Police shootings density' ) Part 3: Comparative Analysis and Visualization \u00b6 Statistical Analysis \u00b6 Conduct a detailed statistical analysis to compare greenspace across different HOLC grades, using techniques like Targeted Maximum Likelihood Estimation (TMLE) to assess the association between historical redlining and current greenspace levels. Visualize the disparities in greenspace distribution using GIS tools, highlighting how redlining has shaped urban ecological landscapes. Conclusion \u00b6 This tutorial provides tools and methodologies to explore the lingering effects of historic redlining on urban greenspace, offering insights into the intersection of urban planning, environmental justice, and public health. References \u00b6 Nardone, A., Rudolph, K. E., Morello-Frosch, R., & Casey, J. A. (2021). Redlines and Greenspace: The Relationship between Historical Redlining and 2010 Greenspace across the United States. Environmental Health Perspectives , 129(1), 017006. DOI:10.1289/EHP7495. Available online","title":"student edition"},{"location":"worksheets/worksheet_redlining_student_edition/#student-edition","text":"img { width: 100%; } details summary { color: black; background-color: white; } details[open] summary { color: black; } R libraries we use in this analysis if ( ! requireNamespace ( \"tidytext\" , quietly = TRUE )) { install.packages ( \"tidytext\" ) } library ( tidytext ) ## Warning: package 'tidytext' was built under R version 4.3.2 library ( sf ) ## Warning: package 'sf' was built under R version 4.3.2 ## Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE library ( ggplot2 ) ## Warning: package 'ggplot2' was built under R version 4.3.2 library ( ggthemes ) ## Warning: package 'ggthemes' was built under R version 4.3.2 library ( dplyr ) ## ## Attaching package: 'dplyr' ## The following objects are masked from 'package:stats': ## ## filter, lag ## The following objects are masked from 'package:base': ## ## intersect, setdiff, setequal, union library ( rstac ) ## Warning: package 'rstac' was built under R version 4.3.2 library ( gdalcubes ) ## Warning: package 'gdalcubes' was built under R version 4.3.2 library ( gdalUtils ) ## Please note that rgdal will be retired during October 2023, ## plan transition to sf/stars/terra functions using GDAL and PROJ ## at your earliest convenience. ## See https://r-spatial.org/r/2023/05/15/evolution4.html and https://github.com/r-spatial/evolution ## rgdal: version: 1.6-7, (SVN revision 1203) ## Geospatial Data Abstraction Library extensions to R successfully loaded ## Loaded GDAL runtime: GDAL 3.5.3, released 2022/10/21 ## Path to GDAL shared files: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/rgdal/gdal ## GDAL does not use iconv for recoding strings. ## GDAL binary built with GEOS: TRUE ## Loaded PROJ runtime: Rel. 9.1.0, September 1st, 2022, [PJ_VERSION: 910] ## Path to PROJ shared files: /Library/Frameworks/R.framework/Versions/4.3-x86_64/Resources/library/gdalcubes/proj ## PROJ CDN enabled: FALSE ## Linking to sp version:1.6-1 ## To mute warnings of possible GDAL/OSR exportToProj4() degradation, ## use options(\"rgdal_show_exportToProj4_warnings\"=\"none\") before loading sp or rgdal. ## ## Attaching package: 'gdalUtils' ## The following object is masked from 'package:sf': ## ## gdal_rasterize library ( gdalcubes ) library ( colorspace ) library ( terra ) ## Warning: package 'terra' was built under R version 4.3.2 ## terra 1.7.71 ## ## Attaching package: 'terra' ## The following object is masked from 'package:colorspace': ## ## RGB ## The following objects are masked from 'package:gdalcubes': ## ## animate, crop, size library ( tidyterra ) ## ## Attaching package: 'tidyterra' ## The following object is masked from 'package:stats': ## ## filter library ( basemapR ) library ( tidytext ) library ( ggwordcloud ) library ( osmextract ) ## Data (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright. ## Check the package website, https://docs.ropensci.org/osmextract/, for more details. library ( sf ) library ( ggplot2 ) library ( ggthemes ) library ( glue ) ## ## Attaching package: 'glue' ## The following object is masked from 'package:terra': ## ## trim library ( purrr ) FUNCTION: Stream HOLC data from a city # Function to load and filter redlining data by city load_city_redlining_data <- function ( city_name ) { # URL to the GeoJSON data url <- \"https://raw.githubusercontent.com/americanpanorama/mapping-inequality-census-crosswalk/main/MIv3Areas_2010TractCrosswalk.geojson\" # Read the GeoJSON file into an sf object redlining_data <- read_sf ( url ) # Filter the data for the specified city and non-empty grades city_redline <- redlining_data %>% filter ( city == city_name ) # Return the filtered data return ( city_redline ) } Stream HOLC data for Denver, CO # Load redlining data for Denver denver_redlining <- load_city_redlining_data ( \"Denver\" ) knitr :: kable ( head ( denver_redlining ), format = \"markdown\" ) | area_id | city | state | city_survey | cat | grade | label | res | com | ind | fill | GEOID10 | GISJOIN | calc_area | pct_tract | geometry | |--------:|:-------|:------|:------------|:-----|:------|:------|:-----|:------|:------|:---------|:------------|:---------------|-------------:|----------:|:-----------------------------| | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004104 | G0800310004104 | 1.525535e+01 | 0.00001 | MULTIPOLYGON (((-104.9125 3\u2026 | | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004201 | G0800310004201 | 3.987458e+05 | 0.20900 | MULTIPOLYGON (((-104.9246 3\u2026 | | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004304 | G0800310004304 | 1.554195e+05 | 0.05927 | MULTIPOLYGON (((-104.9125 3\u2026 | | 6525 | Denver | CO | TRUE | Best | A | A1 | TRUE | FALSE | FALSE | \\#76a865 | 08031004202 | G0800310004202 | 1.117770e+06 | 0.57245 | MULTIPOLYGON (((-104.9125 3\u2026 | | 6529 | Denver | CO | TRUE | Best | A | A2 | TRUE | FALSE | FALSE | \\#76a865 | 08031004302 | G0800310004302 | 3.133415e+05 | 0.28381 | MULTIPOLYGON (((-104.928 39\u2026 | | 6529 | Denver | CO | TRUE | Best | A | A2 | TRUE | FALSE | FALSE | \\#76a865 | 08031004301 | G0800310004301 | 1.221218e+05 | 0.08622 | MULTIPOLYGON (((-104.9305 3\u2026 | FUNCTION: Get Points-of-Interest from city of interest get_places <- function ( polygon_layer , type = \"food\" ) { # Check if the input is an sf object if ( ! inherits ( polygon_layer , \"sf\" )) { stop ( \"The provided object is not an sf object.\" ) } # Create a bounding box from the input sf object bbox_here <- st_bbox ( polygon_layer ) |> st_as_sfc () if ( type == \"roads\" ){ my_layer <- \"lines\" my_query <- \"SELECT * FROM lines WHERE ( highway IN ('motorway', 'trunk', 'primary', 'secondary', 'tertiary') )\" title <- \"Major roads\" } if ( type == \"rivers\" ){ my_layer <- \"lines\" my_query <- \"SELECT * FROM lines WHERE ( waterway IN ('river'))\" title <- \"Major rivers\" } # Use the bbox to get data with oe_get(), specifying the desired layer and a custom SQL query for fresh food places tryCatch ({ places <- oe_get ( place = bbox_here , layer = my_layer , # Adjusted layer; change as per actual data availability query = my_query , quiet = TRUE ) places <- st_make_valid ( places ) # Crop the data to the bounding box cropped_places <- st_crop ( places , bbox_here ) # Plotting the cropped fresh food places plot <- ggplot ( data = cropped_places ) + geom_sf ( fill = \"cornflowerblue\" , color = \"cornflowerblue\" ) + ggtitle ( title ) + theme_tufte () + theme ( legend.position = \"none\" , # Optionally hide the legend axis.text = element_blank (), # Remove axis text axis.title = element_blank (), # Remove axis titles axis.ticks = element_blank (), # Remove axis ticks plot.background = element_rect ( fill = \"white\" , color = NA ), # Set the plot background to white panel.background = element_rect ( fill = \"white\" , color = NA ), # Set the panel background to white panel.grid.major = element_blank (), # Remove major grid lines panel.grid.minor = element_blank (), ) # Save the plot as a PNG file png_filename <- paste0 ( title , \"_\" , Sys.Date (), \".png\" ) ggsave ( png_filename , plot , width = 10 , height = 8 , units = \"in\" ) # Return the cropped dataset return ( cropped_places ) }, error = function ( e ) { stop ( \"Failed to retrieve or plot data: \" , e $ message ) }) } Stream amenities by category roads <- get_places ( denver_redlining , type = \"roads\" ) rivers <- get_places ( denver_redlining , type = \"rivers\" ) FUNCTION: Plot POI over HOLC grades plot_city_redlining <- function ( redlining_data , filename = \"redlining_plot.png\" ) { # Fetch additional geographic data based on redlining data roads <- get_places ( redlining_data , type = \"roads\" ) rivers <- get_places ( redlining_data , type = \"rivers\" ) # Filter residential zones with valid grades and where city survey is TRUE residential_zones <- redlining_data %>% filter ( city_survey == TRUE & grade != \"\" ) # Colors for the grades colors <- c ( \"#76a865\" , \"#7cb5bd\" , \"#ffff00\" , \"#d9838d\" ) # Plot the data using ggplot2 plot <- ggplot () + geom_sf ( data = roads , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.5 , lwd = 1.1 ) + geom_sf ( data = residential_zones , aes ( fill = grade ), alpha = 0.5 ) + theme_tufte () + scale_fill_manual ( values = colors ) + labs ( fill = 'HOLC Categories' ) + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), panel.grid.major = element_blank (), panel.grid.minor = element_blank (), legend.position = \"right\" ) # Save the plot as a high-resolution PNG file ggsave ( filename , plot , width = 10 , height = 8 , units = \"in\" , dpi = 600 ) # Return the plot object if needed for further manipulation or checking return ( plot ) } FUNCTION: Plot the HOLC grades individually split_plot <- function ( sf_data , roads , rivers ) { # Filter for grades A, B, C, and D sf_data_filtered <- sf_data %>% filter ( grade %in% c ( 'A' , 'B' , 'C' , 'D' )) # Define a color for each grade grade_colors <- c ( \"A\" = \"#76a865\" , \"B\" = \"#7cb5bd\" , \"C\" = \"#ffff00\" , \"D\" = \"#d9838d\" ) # Create the plot with panels for each grade plot <- ggplot ( data = sf_data_filtered ) + geom_sf ( data = roads , alpha = 0.1 , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.1 , lwd = 1.1 ) + geom_sf ( aes ( fill = grade )) + facet_wrap ( ~ grade , nrow = 1 ) + # Free scales for different zoom levels if needed scale_fill_manual ( values = grade_colors ) + theme_minimal () + labs ( fill = 'HOLC Grade' ) + theme_tufte () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"none\" , # Optionally hide the legend axis.text = element_blank (), # Remove axis text axis.title = element_blank (), # Remove axis titles axis.ticks = element_blank (), # Remove axis ticks panel.grid.major = element_blank (), # Remove major grid lines panel.grid.minor = element_blank ()) ggsave ( plot , filename = \"HOLC_grades_individually.png\" , width = 10 , height = 4 , units = \"in\" , dpi = 1200 ) return ( plot ) } Plot Denver Redlining denver_plot <- plot_city_redlining ( denver_redlining ) denver_plot ![](worksheet_redlining_student_edition_files/figure-gfm/unnamed-chunk-8-1.png) Plot 4 HOLC grades individually plot_row <- split_plot ( denver_redlining , roads , rivers ) plot_row ![](worksheet_redlining_student_edition_files/figure-gfm/unnamed-chunk-9-1.png) FUNCTION: Map an amenity over each grade individually process_and_plot_sf_layers <- function ( layer1 , layer2 , output_file = \"output_plot.png\" ) { # Make geometries valid layer1 <- st_make_valid ( layer1 ) layer2 <- st_make_valid ( layer2 ) # Optionally, simplify geometries to remove duplicate vertices layer1 <- st_simplify ( layer1 , preserveTopology = TRUE ) |> filter ( grade != \"\" ) # Prepare a list to store results results <- list () # Loop through each grade and perform operations for ( grade in c ( \"A\" , \"B\" , \"C\" , \"D\" )) { # Filter layer1 for current grade layer1_grade <- layer1 [ layer1 $ grade == grade , ] # Buffer the geometries of the current grade buffered_layer1_grade <- st_buffer ( layer1_grade , dist = 500 ) # Intersect with the second layer intersections <- st_intersects ( layer2 , buffered_layer1_grade , sparse = FALSE ) selected_polygons <- layer2 [ rowSums ( intersections ) > 0 , ] # Add a new column to store the grade information selected_polygons $ grade <- grade # Store the result results [[ grade ]] <- selected_polygons } # Combine all selected polygons from different grades into one sf object final_selected_polygons <- do.call ( rbind , results ) # Define colors for the grades grade_colors <- c ( \"A\" = \"grey\" , \"B\" = \"grey\" , \"C\" = \"grey\" , \"D\" = \"grey\" ) # Create the plot plot <- ggplot () + geom_sf ( data = roads , alpha = 0.05 , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.1 , lwd = 1.1 ) + geom_sf ( data = layer1 , fill = \"grey\" , color = \"grey\" , size = 0.1 ) + facet_wrap ( ~ grade , nrow = 1 ) + geom_sf ( data = final_selected_polygons , fill = \"green\" , color = \"green\" , size = 0.1 ) + facet_wrap ( ~ grade , nrow = 1 ) + #scale_fill_manual(values = grade_colors) + #scale_color_manual(values = grade_colors) + theme_minimal () + labs ( fill = 'HOLC Grade' ) + theme_tufte () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"none\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot as a high-resolution PNG file ggsave ( output_file , plot , width = 10 , height = 4 , units = \"in\" , dpi = 1200 ) # Return the plot for optional further use return ( list ( plot = plot , sf = final_selected_polygons )) }","title":"student edition"},{"location":"worksheets/worksheet_redlining_student_edition/#part-2-integrating-environmental-data","text":"","title":"Part 2: Integrating Environmental Data"},{"location":"worksheets/worksheet_redlining_student_edition/#data-processing","text":"Use satellite data from 2010 to analyze greenspace using NDVI, an index that measures the quantity of vegetation in an area. Apply methods to adjust for potential confounders as described in the study, ensuring that comparisons of greenspace across HOLC grades are valid and not biased by historical or socio-demographic factors. FUNCTION: Stream NDVI data polygon_layer <- denver_redlining # Function to process satellite data based on an SF polygon's extent process_satellite_data <- function ( polygon_layer , start_date , end_date , assets , fps = 1 , output_file = \"anim.gif\" ) { # Record start time start_time <- Sys.time () # Calculate the bbox from the polygon layer bbox <- st_bbox ( polygon_layer ) s = stac ( \"https://earth-search.aws.element84.com/v0\" ) # Use stacR to search for Sentinel-2 images within the bbox and date range items = s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( bbox [ \"xmin\" ], bbox [ \"ymin\" ], bbox [ \"xmax\" ], bbox [ \"ymax\" ]), datetime = paste ( start_date , end_date , sep = \"/\" ), limit = 500 ) %>% post_request () # Define mask for Sentinel-2 image quality #S2.mask <- image_mask(\"SCL\", values = c(3, 8, 9)) # Create a collection of images filtering by cloud cover col <- stac_image_collection ( items $ features , asset_names = assets , property_filter = function ( x ) { x [[ \"eo:cloud_cover\" ]] < 30 }) # Define a view for processing the data v <- cube_view ( srs = \"EPSG:4326\" , extent = list ( t0 = start_date , t1 = end_date , left = bbox [ \"xmin\" ], right = bbox [ \"xmax\" ], top = bbox [ \"ymax\" ], bottom = bbox [ \"ymin\" ]), dx = 0.001 , dy = 0.001 , dt = \"P1M\" , aggregation = \"median\" , resampling = \"bilinear\" ) # Calculate NDVI and create an animation ndvi_col <- function ( n ) { rev ( sequential_hcl ( n , \"Green-Yellow\" )) } #raster_cube(col, v, mask = S2.mask) %>% raster_cube ( col , v ) %>% select_bands ( c ( \"B04\" , \"B08\" )) %>% apply_pixel ( \"(B08-B04)/(B08+B04)\" , \"NDVI\" ) %>% gdalcubes :: animate ( col = ndvi_col , zlim = c ( -0.2 , 1 ), key.pos = 1 , save_as = output_file , fps = fps ) # Calculate processing time end_time <- Sys.time () processing_time <- difftime ( end_time , start_time ) # Return processing time return ( processing_time ) } Stream NDVI data: animation processing_time <- process_satellite_data ( denver_redlining , \"2022-05-31\" , \"2023-05-31\" , c ( \"B04\" , \"B08\" )) FUNCTION: Map NDVI per HOLC grade individually create_mask_and_plot <- function ( redlining_sf , background_raster = ndvi $ raster , roads = NULL , rivers = NULL ){ start_time <- Sys.time () # Start timing # Validate and prepare the redlining data redlining_sf <- redlining_sf %>% filter ( grade != \"\" ) %>% st_make_valid () bbox <- st_bbox ( redlining_sf ) # Get original bounding box expanded_bbox <- expand_bbox ( bbox , 6000 , 1000 ) # expanded_bbox_poly <- st_as_sfc ( expanded_bbox , crs = st_crs ( redlining_sf )) %>% st_make_valid () # Initialize an empty list to store masks masks <- list () # Iterate over each grade to create masks unique_grades <- unique ( redlining_sf $ grade ) for ( grade in unique_grades ) { # Filter polygons by grade grade_polygons <- redlining_sf [ redlining_sf $ grade == grade , ] # Create an \"inverted\" mask by subtracting these polygons from the background mask <- st_difference ( expanded_bbox_poly , st_union ( grade_polygons )) # Store the mask in the list with the grade as the name masks [[ grade ]] <- st_sf ( geometry = mask , grade = grade ) } # Combine all masks into a single sf object mask_sf <- do.call ( rbind , masks ) # Normalize the grades so that C.2 becomes C, but correctly handle other grades mask_sf $ grade <- ifelse ( mask_sf $ grade == \"C.2\" , \"C\" , mask_sf $ grade ) # Prepare the plot plot <- ggplot () + geom_spatraster ( data = background_raster , aes ( fill = NDVI )) + scale_fill_viridis_c ( name = \"NDVI\" , option = \"viridis\" , direction = -1 ) + geom_sf ( data = mask_sf , aes ( color = grade ), fill = \"white\" , size = 0.1 , show.legend = FALSE ) + scale_color_manual ( values = c ( \"A\" = \"white\" , \"B\" = \"white\" , \"C\" = \"white\" , \"D\" = \"white\" ), name = \"Grade\" ) + facet_wrap ( ~ grade , nrow = 1 ) + geom_sf ( data = roads , alpha = 1 , lwd = 0.1 , color = \"white\" ) + geom_sf ( data = rivers , color = \"white\" , alpha = 0.5 , lwd = 1.1 ) + labs ( title = \"NDVI: Normalized Difference Vegetation Index\" ) + theme_minimal () + coord_sf ( xlim = c ( bbox [ \"xmin\" ], bbox [ \"xmax\" ]), ylim = c ( bbox [ \"ymin\" ], bbox [ \"ymax\" ]), expand = FALSE ) + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"bottom\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot ggsave ( \"redlining_mask_ndvi.png\" , plot , width = 10 , height = 4 , dpi = 600 ) end_time <- Sys.time () # End timing runtime <- end_time - start_time # Return the plot and runtime return ( list ( plot = plot , runtime = runtime , mask_sf = mask_sf )) } FUNCTION: Stream year average NDVI yearly_average_ndvi <- function ( polygon_layer , output_file = \"ndvi.png\" , dx = 0.01 , dy = 0.01 ) { # Record start time start_time <- Sys.time () # Calculate the bbox from the polygon layer bbox <- st_bbox ( polygon_layer ) s = stac ( \"https://earth-search.aws.element84.com/v0\" ) # Search for Sentinel-2 images within the bbox for June items <- s |> stac_search ( collections = \"sentinel-s2-l2a-cogs\" , bbox = c ( bbox [ \"xmin\" ], bbox [ \"ymin\" ], bbox [ \"xmax\" ], bbox [ \"ymax\" ]), datetime = \"2023-01-01/2023-12-31\" , limit = 500 ) %>% post_request () # Create a collection of images filtering by cloud cover col <- stac_image_collection ( items $ features , asset_names = c ( \"B04\" , \"B08\" ), property_filter = function ( x ) { x [[ \"eo:cloud_cover\" ]] < 80 }) # Define a view for processing the data specifically for June v <- cube_view ( srs = \"EPSG:4326\" , extent = list ( t0 = \"2023-01-01\" , t1 = \"2023-12-31\" , left = bbox [ \"xmin\" ], right = bbox [ \"xmax\" ], top = bbox [ \"ymax\" ], bottom = bbox [ \"ymin\" ]), dx = dx , dy = dy , dt = \"P1Y\" , aggregation = \"median\" , resampling = \"bilinear\" ) # Process NDVI ndvi_rast <- raster_cube ( col , v ) %>% select_bands ( c ( \"B04\" , \"B08\" )) %>% apply_pixel ( \"(B08-B04)/(B08+B04)\" , \"NDVI\" ) %>% write_tif () |> terra :: rast () # Convert terra Raster to ggplot using tidyterra ndvi_plot <- ggplot () + geom_spatraster ( data = ndvi_rast , aes ( fill = NDVI )) + scale_fill_viridis_c ( option = \"viridis\" , direction = -1 , name = \"NDVI\" ) + labs ( title = \"NDVI mean for 2023\" ) + theme_minimal () + coord_sf () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"right\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot as a high-resolution PNG file ggsave ( output_file , ndvi_plot , width = 10 , height = 8 , dpi = 600 ) # Calculate processing time end_time <- Sys.time () processing_time <- difftime ( end_time , start_time ) # Return the plot and processing time return ( list ( plot = ndvi_plot , processing_time = processing_time , raster = ndvi_rast )) } Stream NDVI: low resolution ndvi_background_low <- yearly_average_ndvi ( denver_redlining ) Map low resolution NDVI per HOLC grade ndvi <- create_mask_and_plot ( denver_redlining , background_raster = ndvi_background_low $ raster , roads = roads , rivers = rivers ) FUNCTION: Map Denver City provided data per HOLC grade process_city_inventory_data <- function ( address , inner_file , polygon_layer , output_filename , variable_label = 'Tree Density' ) { # Download and read the shapefile full_path <- glue ( \"/vsizip/vsicurl/{address}/{inner_file}\" ) shape_data <- st_read ( full_path , quiet = TRUE ) |> st_as_sf () # Process the shape data with the provided polygon layer processed_data <- process_and_plot_sf_layers ( polygon_layer , shape_data , paste0 ( output_filename , \".png\" )) # Extract trees from the processed data trees <- processed_data $ sf denver_redlining_residential <- polygon_layer |> filter ( grade != \"\" ) # Generate the density plot plot <- ggplot () + geom_sf ( data = roads , alpha = 0.05 , lwd = 0.1 ) + geom_sf ( data = rivers , color = \"blue\" , alpha = 0.1 , lwd = 1.1 ) + geom_sf ( data = denver_redlining_residential , fill = \"grey\" , color = \"grey\" , size = 0.1 ) + facet_wrap ( ~ grade , nrow = 1 ) + stat_density_2d ( data = trees , mapping = aes ( x = map_dbl ( geometry , ~ . [ 1 ]), y = map_dbl ( geometry , ~ . [ 2 ]), fill = stat ( density )), geom = 'tile' , contour = FALSE , alpha = 0.9 ) + scale_fill_gradientn ( colors = c ( \"transparent\" , \"white\" , \"limegreen\" ), values = scales :: rescale ( c ( 0 , 0.1 , 1 )), # Adjust these based on your density range guide = \"colourbar\" ) + theme_minimal () + labs ( fill = variable_label ) + theme_tufte () + theme ( plot.background = element_rect ( fill = \"white\" , color = NA ), panel.background = element_rect ( fill = \"white\" , color = NA ), legend.position = \"bottom\" , axis.text = element_blank (), axis.title = element_blank (), axis.ticks = element_blank (), panel.grid.major = element_blank (), panel.grid.minor = element_blank ()) # Save the plot ggsave ( paste0 ( output_filename , \"_density_plot.png\" ), plot , width = 10 , height = 4 , units = \"in\" , dpi = 600 ) # Return the plot and the tree layer return ( list ( plot = plot , layer = trees )) } Map tree inventory per HOLC grade result <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/tree_inventory/shape/tree_inventory.zip\" , \"tree_inventory.shp\" , denver_redlining , \"Denver_tree_inventory_2023\" ) Warning: `stat(density)` was deprecated in ggplot2 3.4.0. \u2139 Please use `after_stat(density)` instead. Map traffic accidents per HOLC grade result <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/traffic_accidents/shape/traffic_accidents.zip\" , \"traffic_accidents.shp\" , denver_redlining , \"Denver_traffic_accidents\" , variable_label = 'Traffic accidents density' ) Map stream sampling effort per HOLC grade instream_sampling_sites <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/instream_sampling_sites/shape/instream_sampling_sites.zip\" , \"instream_sampling_sites.shp\" , denver_redlining , \"instream_sampling_sites\" , variable_label = 'Instream sampling sites density' ) Map soil sampling effort per HOLC grade soil_samples <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/soil_samples/shape/soil_samples.zip\" , \"soil_samples.shp\" , denver_redlining , \"Soil samples\" , variable_label = 'soil samples density' ) Map public art density per HOLC grade public_art <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/public_art/shape/public_art.zip\" , \"public_art.shp\" , denver_redlining , \"Public art \" , variable_label = 'Public art density' ) Map liquor licenses density per HOLC grade liquor_licenses <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/liquor_licenses/shape/liquor_licenses.zip\" , \"liquor_licenses.shp\" , denver_redlining , \"liquor licenses \" , variable_label = 'liquor licenses density' ) Map crime density per HOLC grade Crime <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/crime/shape/crime.zip\" , \"crime.shp\" , denver_redlining , \"crime\" , variable_label = 'Crime density' ) Map police shooting density per HOLC grade Denver_police_shootings <- process_city_inventory_data ( \"https://www.denvergov.org/media/gis/DataCatalog/denver_police_officer_involved_shootings/shape/denver_police_officer_involved_shootings.zip\" , \"denver_police_officer_involved_shootings.shp\" , denver_redlining , \"Police shootings\" , variable_label = 'Police shootings density' )","title":"Data Processing"},{"location":"worksheets/worksheet_redlining_student_edition/#part-3-comparative-analysis-and-visualization","text":"","title":"Part 3: Comparative Analysis and Visualization"},{"location":"worksheets/worksheet_redlining_student_edition/#statistical-analysis","text":"Conduct a detailed statistical analysis to compare greenspace across different HOLC grades, using techniques like Targeted Maximum Likelihood Estimation (TMLE) to assess the association between historical redlining and current greenspace levels. Visualize the disparities in greenspace distribution using GIS tools, highlighting how redlining has shaped urban ecological landscapes.","title":"Statistical Analysis"},{"location":"worksheets/worksheet_redlining_student_edition/#conclusion","text":"This tutorial provides tools and methodologies to explore the lingering effects of historic redlining on urban greenspace, offering insights into the intersection of urban planning, environmental justice, and public health.","title":"Conclusion"},{"location":"worksheets/worksheet_redlining_student_edition/#references","text":"Nardone, A., Rudolph, K. E., Morello-Frosch, R., & Casey, J. A. (2021). Redlines and Greenspace: The Relationship between Historical Redlining and 2010 Greenspace across the United States. Environmental Health Perspectives , 129(1), 017006. DOI:10.1289/EHP7495. Available online","title":"References"}]}